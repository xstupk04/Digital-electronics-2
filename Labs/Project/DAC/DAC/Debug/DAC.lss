
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000040  00800100  000012ca  0000135e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000012ca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000047  00800140  00800140  0000139e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000139e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000013d0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000168  00000000  00000000  00001410  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d8c  00000000  00000000  00001578  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c0e  00000000  00000000  00003304  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000d96  00000000  00000000  00003f12  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003f8  00000000  00000000  00004ca8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000675  00000000  00000000  000050a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000e4f  00000000  00000000  00005715  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000158  00000000  00000000  00006564  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 84 00 	jmp	0x108	; 0x108 <__ctors_end>
       4:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       8:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
       c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      10:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      14:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      18:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      1c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      20:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      24:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      28:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      2c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      30:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      34:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_13>
      38:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      3c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      40:	0c 94 6f 03 	jmp	0x6de	; 0x6de <__vector_16>
      44:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      48:	0c 94 41 04 	jmp	0x882	; 0x882 <__vector_18>
      4c:	0c 94 6f 04 	jmp	0x8de	; 0x8de <__vector_19>
      50:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      54:	0c 94 a0 03 	jmp	0x740	; 0x740 <__vector_21>
      58:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      5c:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      60:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      64:	0c 94 a1 00 	jmp	0x142	; 0x142 <__bad_interrupt>
      68:	07 63       	ori	r16, 0x37	; 55
      6a:	42 36       	cpi	r20, 0x62	; 98
      6c:	b7 9b       	sbis	0x16, 7	; 22
      6e:	d8 a7       	std	Y+40, r29	; 0x28
      70:	1a 39       	cpi	r17, 0x9A	; 154
      72:	68 56       	subi	r22, 0x68	; 104
      74:	18 ae       	std	Y+56, r1	; 0x38
      76:	ba ab       	std	Y+50, r27	; 0x32
      78:	55 8c       	ldd	r5, Z+29	; 0x1d
      7a:	1d 3c       	cpi	r17, 0xCD	; 205
      7c:	b7 cc       	rjmp	.-1682   	; 0xfffff9ec <__eeprom_end+0xff7ef9ec>
      7e:	57 63       	ori	r21, 0x37	; 55
      80:	bd 6d       	ori	r27, 0xDD	; 221
      82:	ed fd       	.word	0xfded	; ????
      84:	75 3e       	cpi	r23, 0xE5	; 229
      86:	f6 17       	cp	r31, r22
      88:	72 31       	cpi	r23, 0x12	; 18
      8a:	bf 00       	.word	0x00bf	; ????
      8c:	00 00       	nop
      8e:	80 3f       	cpi	r24, 0xF0	; 240
      90:	05 a8       	ldd	r0, Z+53	; 0x35
      92:	4c cd       	rjmp	.-1384   	; 0xfffffb2c <__eeprom_end+0xff7efb2c>
      94:	b2 d4       	rcall	.+2404   	; 0x9fa <__addsf3x+0x1e>
      96:	4e b9       	out	0x0e, r20	; 14
      98:	38 36       	cpi	r19, 0x68	; 104
      9a:	a9 02       	muls	r26, r25
      9c:	0c 50       	subi	r16, 0x0C	; 12
      9e:	b9 91       	ld	r27, Y+
      a0:	86 88       	ldd	r8, Z+22	; 0x16
      a2:	08 3c       	cpi	r16, 0xC8	; 200
      a4:	a6 aa       	std	Z+54, r10	; 0x36
      a6:	aa 2a       	or	r10, r26
      a8:	be 00       	.word	0x00be	; ????
      aa:	00 00       	nop
      ac:	80 3f       	cpi	r24, 0xF0	; 240
      ae:	08 00       	.word	0x0008	; ????
      b0:	00 00       	nop
      b2:	be 92       	st	-X, r11
      b4:	24 49       	sbci	r18, 0x94	; 148
      b6:	12 3e       	cpi	r17, 0xE2	; 226
      b8:	ab aa       	std	Y+51, r10	; 0x33
      ba:	aa 2a       	or	r10, r26
      bc:	be cd       	rjmp	.-1156   	; 0xfffffc3a <__eeprom_end+0xff7efc3a>
      be:	cc cc       	rjmp	.-1640   	; 0xfffffa58 <__eeprom_end+0xff7efa58>
      c0:	4c 3e       	cpi	r20, 0xEC	; 236
      c2:	00 00       	nop
      c4:	00 80       	ld	r0, Z
      c6:	be ab       	std	Y+54, r27	; 0x36
      c8:	aa aa       	std	Y+50, r10	; 0x32
      ca:	aa 3e       	cpi	r26, 0xEA	; 234
      cc:	00 00       	nop
      ce:	00 00       	nop
      d0:	bf 00       	.word	0x00bf	; ????
      d2:	00 00       	nop
      d4:	80 3f       	cpi	r24, 0xF0	; 240
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	00 08       	sbc	r0, r0
      dc:	41 78       	andi	r20, 0x81	; 129
      de:	d3 bb       	out	0x13, r29	; 19
      e0:	43 87       	std	Z+11, r20	; 0x0b
      e2:	d1 13       	cpse	r29, r17
      e4:	3d 19       	sub	r19, r13
      e6:	0e 3c       	cpi	r16, 0xCE	; 206
      e8:	c3 bd       	out	0x23, r28	; 35
      ea:	42 82       	std	Z+2, r4	; 0x02
      ec:	ad 2b       	or	r26, r29
      ee:	3e 68       	ori	r19, 0x8E	; 142
      f0:	ec 82       	std	Y+4, r14	; 0x04
      f2:	76 be       	out	0x36, r7	; 54
      f4:	d9 8f       	std	Y+25, r29	; 0x19
      f6:	e1 a9       	ldd	r30, Z+49	; 0x31
      f8:	3e 4c       	sbci	r19, 0xCE	; 206
      fa:	80 ef       	ldi	r24, 0xF0	; 240
      fc:	ff be       	out	0x3f, r15	; 63
      fe:	01 c4       	rjmp	.+2050   	; 0x902 <__stack+0x3>
     100:	ff 7f       	andi	r31, 0xFF	; 255
     102:	3f 00       	.word	0x003f	; ????
     104:	00 00       	nop
	...

00000108 <__ctors_end>:
     108:	11 24       	eor	r1, r1
     10a:	1f be       	out	0x3f, r1	; 63
     10c:	cf ef       	ldi	r28, 0xFF	; 255
     10e:	d8 e0       	ldi	r29, 0x08	; 8
     110:	de bf       	out	0x3e, r29	; 62
     112:	cd bf       	out	0x3d, r28	; 61

00000114 <__do_copy_data>:
     114:	11 e0       	ldi	r17, 0x01	; 1
     116:	a0 e0       	ldi	r26, 0x00	; 0
     118:	b1 e0       	ldi	r27, 0x01	; 1
     11a:	ea ec       	ldi	r30, 0xCA	; 202
     11c:	f2 e1       	ldi	r31, 0x12	; 18
     11e:	02 c0       	rjmp	.+4      	; 0x124 <__do_copy_data+0x10>
     120:	05 90       	lpm	r0, Z+
     122:	0d 92       	st	X+, r0
     124:	a0 34       	cpi	r26, 0x40	; 64
     126:	b1 07       	cpc	r27, r17
     128:	d9 f7       	brne	.-10     	; 0x120 <__do_copy_data+0xc>

0000012a <__do_clear_bss>:
     12a:	21 e0       	ldi	r18, 0x01	; 1
     12c:	a0 e4       	ldi	r26, 0x40	; 64
     12e:	b1 e0       	ldi	r27, 0x01	; 1
     130:	01 c0       	rjmp	.+2      	; 0x134 <.do_clear_bss_start>

00000132 <.do_clear_bss_loop>:
     132:	1d 92       	st	X+, r1

00000134 <.do_clear_bss_start>:
     134:	a7 38       	cpi	r26, 0x87	; 135
     136:	b2 07       	cpc	r27, r18
     138:	e1 f7       	brne	.-8      	; 0x132 <.do_clear_bss_loop>
     13a:	0e 94 d0 02 	call	0x5a0	; 0x5a0 <main>
     13e:	0c 94 63 09 	jmp	0x12c6	; 0x12c6 <_exit>

00000142 <__bad_interrupt>:
     142:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000146 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
     146:	fc 01       	movw	r30, r24
     148:	40 81       	ld	r20, Z
     14a:	21 e0       	ldi	r18, 0x01	; 1
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	02 c0       	rjmp	.+4      	; 0x154 <GPIO_config_output+0xe>
     150:	22 0f       	add	r18, r18
     152:	33 1f       	adc	r19, r19
     154:	6a 95       	dec	r22
     156:	e2 f7       	brpl	.-8      	; 0x150 <GPIO_config_output+0xa>
     158:	24 2b       	or	r18, r20
     15a:	20 83       	st	Z, r18
     15c:	08 95       	ret

0000015e <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
     15e:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
     160:	90 81       	ld	r25, Z
     162:	21 e0       	ldi	r18, 0x01	; 1
     164:	30 e0       	ldi	r19, 0x00	; 0
     166:	02 c0       	rjmp	.+4      	; 0x16c <GPIO_write_low+0xe>
     168:	22 0f       	add	r18, r18
     16a:	33 1f       	adc	r19, r19
     16c:	6a 95       	dec	r22
     16e:	e2 f7       	brpl	.-8      	; 0x168 <GPIO_write_low+0xa>
     170:	20 95       	com	r18
     172:	29 23       	and	r18, r25
     174:	20 83       	st	Z, r18
     176:	08 95       	ret

00000178 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name | (1<<pin_num);
     178:	fc 01       	movw	r30, r24
     17a:	40 81       	ld	r20, Z
     17c:	21 e0       	ldi	r18, 0x01	; 1
     17e:	30 e0       	ldi	r19, 0x00	; 0
     180:	02 c0       	rjmp	.+4      	; 0x186 <GPIO_write_high+0xe>
     182:	22 0f       	add	r18, r18
     184:	33 1f       	adc	r19, r19
     186:	6a 95       	dec	r22
     188:	e2 f7       	brpl	.-8      	; 0x182 <GPIO_write_high+0xa>
     18a:	24 2b       	or	r18, r20
     18c:	20 83       	st	Z, r18
     18e:	08 95       	ret

00000190 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     190:	29 9a       	sbi	0x05, 1	; 5
     192:	85 e0       	ldi	r24, 0x05	; 5
     194:	8a 95       	dec	r24
     196:	f1 f7       	brne	.-4      	; 0x194 <toggle_e+0x4>
     198:	00 00       	nop
     19a:	29 98       	cbi	0x05, 1	; 5
     19c:	08 95       	ret

0000019e <lcd_write>:
     19e:	cf 93       	push	r28
     1a0:	c8 2f       	mov	r28, r24
     1a2:	66 23       	and	r22, r22
     1a4:	11 f0       	breq	.+4      	; 0x1aa <lcd_write+0xc>
     1a6:	28 9a       	sbi	0x05, 0	; 5
     1a8:	01 c0       	rjmp	.+2      	; 0x1ac <lcd_write+0xe>
     1aa:	28 98       	cbi	0x05, 0	; 5
     1ac:	54 9a       	sbi	0x0a, 4	; 10
     1ae:	55 9a       	sbi	0x0a, 5	; 10
     1b0:	56 9a       	sbi	0x0a, 6	; 10
     1b2:	57 9a       	sbi	0x0a, 7	; 10
     1b4:	5f 98       	cbi	0x0b, 7	; 11
     1b6:	5e 98       	cbi	0x0b, 6	; 11
     1b8:	5d 98       	cbi	0x0b, 5	; 11
     1ba:	5c 98       	cbi	0x0b, 4	; 11
     1bc:	cc 23       	and	r28, r28
     1be:	0c f4       	brge	.+2      	; 0x1c2 <lcd_write+0x24>
     1c0:	5f 9a       	sbi	0x0b, 7	; 11
     1c2:	c6 fd       	sbrc	r28, 6
     1c4:	5e 9a       	sbi	0x0b, 6	; 11
     1c6:	c5 fd       	sbrc	r28, 5
     1c8:	5d 9a       	sbi	0x0b, 5	; 11
     1ca:	c4 fd       	sbrc	r28, 4
     1cc:	5c 9a       	sbi	0x0b, 4	; 11
     1ce:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     1d2:	5f 98       	cbi	0x0b, 7	; 11
     1d4:	5e 98       	cbi	0x0b, 6	; 11
     1d6:	5d 98       	cbi	0x0b, 5	; 11
     1d8:	5c 98       	cbi	0x0b, 4	; 11
     1da:	c3 fd       	sbrc	r28, 3
     1dc:	5f 9a       	sbi	0x0b, 7	; 11
     1de:	c2 fd       	sbrc	r28, 2
     1e0:	5e 9a       	sbi	0x0b, 6	; 11
     1e2:	c1 fd       	sbrc	r28, 1
     1e4:	5d 9a       	sbi	0x0b, 5	; 11
     1e6:	c0 fd       	sbrc	r28, 0
     1e8:	5c 9a       	sbi	0x0b, 4	; 11
     1ea:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     1ee:	5c 9a       	sbi	0x0b, 4	; 11
     1f0:	5d 9a       	sbi	0x0b, 5	; 11
     1f2:	5e 9a       	sbi	0x0b, 6	; 11
     1f4:	5f 9a       	sbi	0x0b, 7	; 11
     1f6:	87 eb       	ldi	r24, 0xB7	; 183
     1f8:	9b e0       	ldi	r25, 0x0B	; 11
     1fa:	01 97       	sbiw	r24, 0x01	; 1
     1fc:	f1 f7       	brne	.-4      	; 0x1fa <lcd_write+0x5c>
     1fe:	00 c0       	rjmp	.+0      	; 0x200 <lcd_write+0x62>
     200:	00 00       	nop
     202:	cf 91       	pop	r28
     204:	08 95       	ret

00000206 <lcd_command>:
     206:	60 e0       	ldi	r22, 0x00	; 0
     208:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     20c:	08 95       	ret

0000020e <lcd_gotoxy>:
     20e:	61 11       	cpse	r22, r1
     210:	04 c0       	rjmp	.+8      	; 0x21a <lcd_gotoxy+0xc>
     212:	80 58       	subi	r24, 0x80	; 128
     214:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
     218:	08 95       	ret
     21a:	80 54       	subi	r24, 0x40	; 64
     21c:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
     220:	08 95       	ret

00000222 <lcd_clrscr>:
     222:	81 e0       	ldi	r24, 0x01	; 1
     224:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
     228:	08 95       	ret

0000022a <lcd_putc>:
     22a:	61 e0       	ldi	r22, 0x01	; 1
     22c:	0e 94 cf 00 	call	0x19e	; 0x19e <lcd_write>
     230:	08 95       	ret

00000232 <lcd_puts>:
     232:	cf 93       	push	r28
     234:	df 93       	push	r29
     236:	ec 01       	movw	r28, r24
     238:	21 96       	adiw	r28, 0x01	; 1
     23a:	fc 01       	movw	r30, r24
     23c:	80 81       	ld	r24, Z
     23e:	88 23       	and	r24, r24
     240:	29 f0       	breq	.+10     	; 0x24c <lcd_puts+0x1a>
     242:	0e 94 15 01 	call	0x22a	; 0x22a <lcd_putc>
     246:	89 91       	ld	r24, Y+
     248:	81 11       	cpse	r24, r1
     24a:	fb cf       	rjmp	.-10     	; 0x242 <lcd_puts+0x10>
     24c:	df 91       	pop	r29
     24e:	cf 91       	pop	r28
     250:	08 95       	ret

00000252 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     252:	cf 93       	push	r28
     254:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     256:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     258:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     25a:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     25c:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     25e:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     260:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     262:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     264:	8f ef       	ldi	r24, 0xFF	; 255
     266:	99 ef       	ldi	r25, 0xF9	; 249
     268:	01 97       	sbiw	r24, 0x01	; 1
     26a:	f1 f7       	brne	.-4      	; 0x268 <lcd_init+0x16>
     26c:	00 c0       	rjmp	.+0      	; 0x26e <lcd_init+0x1c>
     26e:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     270:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     272:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     274:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     278:	8f e1       	ldi	r24, 0x1F	; 31
     27a:	9e e4       	ldi	r25, 0x4E	; 78
     27c:	01 97       	sbiw	r24, 0x01	; 1
     27e:	f1 f7       	brne	.-4      	; 0x27c <lcd_init+0x2a>
     280:	00 c0       	rjmp	.+0      	; 0x282 <lcd_init+0x30>
     282:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     284:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     288:	8f ef       	ldi	r24, 0xFF	; 255
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	01 97       	sbiw	r24, 0x01	; 1
     28e:	f1 f7       	brne	.-4      	; 0x28c <lcd_init+0x3a>
     290:	00 c0       	rjmp	.+0      	; 0x292 <lcd_init+0x40>
     292:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     294:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     298:	8f ef       	ldi	r24, 0xFF	; 255
     29a:	90 e0       	ldi	r25, 0x00	; 0
     29c:	01 97       	sbiw	r24, 0x01	; 1
     29e:	f1 f7       	brne	.-4      	; 0x29c <lcd_init+0x4a>
     2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <lcd_init+0x50>
     2a2:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     2a4:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     2a6:	0e 94 c8 00 	call	0x190	; 0x190 <toggle_e>
     2aa:	8f ef       	ldi	r24, 0xFF	; 255
     2ac:	90 e0       	ldi	r25, 0x00	; 0
     2ae:	01 97       	sbiw	r24, 0x01	; 1
     2b0:	f1 f7       	brne	.-4      	; 0x2ae <lcd_init+0x5c>
     2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <lcd_init+0x62>
     2b4:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     2b6:	88 e2       	ldi	r24, 0x28	; 40
     2b8:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     2bc:	88 e0       	ldi	r24, 0x08	; 8
     2be:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
    lcd_clrscr();                  /* display clear                */
     2c2:	0e 94 11 01 	call	0x222	; 0x222 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     2c6:	86 e0       	ldi	r24, 0x06	; 6
     2c8:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     2cc:	8c 2f       	mov	r24, r28
     2ce:	0e 94 03 01 	call	0x206	; 0x206 <lcd_command>
}/* lcd_init */
     2d2:	cf 91       	pop	r28
     2d4:	08 95       	ret

000002d6 <fce>:
 * Main function where the program execution begins. Use Timer/Counter1
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */

unsigned int fce(unsigned int i ) {
     2d6:	4f 92       	push	r4
     2d8:	5f 92       	push	r5
     2da:	6f 92       	push	r6
     2dc:	7f 92       	push	r7
     2de:	8f 92       	push	r8
     2e0:	9f 92       	push	r9
     2e2:	af 92       	push	r10
     2e4:	bf 92       	push	r11
     2e6:	cf 92       	push	r12
     2e8:	df 92       	push	r13
     2ea:	ef 92       	push	r14
     2ec:	ff 92       	push	r15
     2ee:	cf 93       	push	r28
     2f0:	df 93       	push	r29
     2f2:	ec 01       	movw	r28, r24
	
	if(fceType==0) 
     2f4:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     2f8:	81 11       	cpse	r24, r1
     2fa:	38 c0       	rjmp	.+112    	; 0x36c <fce+0x96>
		return (unsigned int)(255*(1 + sin(i * 6.28 * Tvz/T))/2);
     2fc:	be 01       	movw	r22, r28
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	90 e0       	ldi	r25, 0x00	; 0
     302:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
     306:	23 ec       	ldi	r18, 0xC3	; 195
     308:	35 ef       	ldi	r19, 0xF5	; 245
     30a:	48 ec       	ldi	r20, 0xC8	; 200
     30c:	50 e4       	ldi	r21, 0x40	; 64
     30e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     312:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     316:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     31a:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     31e:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     322:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     326:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <T>
     32a:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <T+0x1>
     32e:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <T+0x2>
     332:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <T+0x3>
     336:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     33a:	0e 94 98 07 	call	0xf30	; 0xf30 <sin>
     33e:	20 e0       	ldi	r18, 0x00	; 0
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	40 e8       	ldi	r20, 0x80	; 128
     344:	5f e3       	ldi	r21, 0x3F	; 63
     346:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
     34a:	20 e0       	ldi	r18, 0x00	; 0
     34c:	30 e0       	ldi	r19, 0x00	; 0
     34e:	4f e7       	ldi	r20, 0x7F	; 127
     350:	53 e4       	ldi	r21, 0x43	; 67
     352:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     356:	20 e0       	ldi	r18, 0x00	; 0
     358:	30 e0       	ldi	r19, 0x00	; 0
     35a:	40 e0       	ldi	r20, 0x00	; 0
     35c:	5f e3       	ldi	r21, 0x3F	; 63
     35e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     362:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
     366:	26 2f       	mov	r18, r22
     368:	97 2f       	mov	r25, r23
     36a:	8e c0       	rjmp	.+284    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	else if(fceType==1)
     36c:	81 30       	cpi	r24, 0x01	; 1
     36e:	51 f5       	brne	.+84     	; 0x3c4 <fce+0xee>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
     370:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     374:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     378:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     37c:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     380:	be 01       	movw	r22, r28
     382:	80 e0       	ldi	r24, 0x00	; 0
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
     38a:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     38e:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     392:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     396:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     39a:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     39e:	a7 01       	movw	r20, r14
     3a0:	96 01       	movw	r18, r12
     3a2:	0e 94 33 06 	call	0xc66	; 0xc66 <fmod>
     3a6:	20 e0       	ldi	r18, 0x00	; 0
     3a8:	30 e0       	ldi	r19, 0x00	; 0
     3aa:	4f e7       	ldi	r20, 0x7F	; 127
     3ac:	53 e4       	ldi	r21, 0x43	; 67
     3ae:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     3b2:	a7 01       	movw	r20, r14
     3b4:	96 01       	movw	r18, r12
     3b6:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     3ba:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
     3be:	26 2f       	mov	r18, r22
     3c0:	97 2f       	mov	r25, r23
     3c2:	62 c0       	rjmp	.+196    	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	else if(fceType==2) {	
     3c4:	82 30       	cpi	r24, 0x02	; 2
     3c6:	09 f0       	breq	.+2      	; 0x3ca <fce+0xf4>
     3c8:	5a c0       	rjmp	.+180    	; 0x47e <__LOCK_REGION_LENGTH__+0x7e>
		return (unsigned int)(255 * pow(-1,i/  ((int)(T/Tvz/2))) * 2 * fmod(i*Tvz,T)/T);
     3ca:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     3ce:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     3d2:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     3d6:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     3da:	80 90 01 01 	lds	r8, 0x0101	; 0x800101 <Tvz>
     3de:	90 90 02 01 	lds	r9, 0x0102	; 0x800102 <Tvz+0x1>
     3e2:	a0 90 03 01 	lds	r10, 0x0103	; 0x800103 <Tvz+0x2>
     3e6:	b0 90 04 01 	lds	r11, 0x0104	; 0x800104 <Tvz+0x3>
     3ea:	a5 01       	movw	r20, r10
     3ec:	94 01       	movw	r18, r8
     3ee:	c7 01       	movw	r24, r14
     3f0:	b6 01       	movw	r22, r12
     3f2:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     3f6:	20 e0       	ldi	r18, 0x00	; 0
     3f8:	30 e0       	ldi	r19, 0x00	; 0
     3fa:	40 e0       	ldi	r20, 0x00	; 0
     3fc:	5f e3       	ldi	r21, 0x3F	; 63
     3fe:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     402:	0e 94 b5 05 	call	0xb6a	; 0xb6a <__fixsfsi>
     406:	ab 01       	movw	r20, r22
     408:	bc 01       	movw	r22, r24
     40a:	ce 01       	movw	r24, r28
     40c:	ba 01       	movw	r22, r20
     40e:	0e 94 1a 09 	call	0x1234	; 0x1234 <__udivmodhi4>
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	90 e0       	ldi	r25, 0x00	; 0
     416:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
     41a:	9b 01       	movw	r18, r22
     41c:	ac 01       	movw	r20, r24
     41e:	60 e0       	ldi	r22, 0x00	; 0
     420:	70 e0       	ldi	r23, 0x00	; 0
     422:	80 e8       	ldi	r24, 0x80	; 128
     424:	9f eb       	ldi	r25, 0xBF	; 191
     426:	0e 94 48 07 	call	0xe90	; 0xe90 <pow>
     42a:	2b 01       	movw	r4, r22
     42c:	3c 01       	movw	r6, r24
     42e:	be 01       	movw	r22, r28
     430:	80 e0       	ldi	r24, 0x00	; 0
     432:	90 e0       	ldi	r25, 0x00	; 0
     434:	0e 94 eb 05 	call	0xbd6	; 0xbd6 <__floatunsisf>
     438:	a5 01       	movw	r20, r10
     43a:	94 01       	movw	r18, r8
     43c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     440:	a7 01       	movw	r20, r14
     442:	96 01       	movw	r18, r12
     444:	0e 94 33 06 	call	0xc66	; 0xc66 <fmod>
     448:	4b 01       	movw	r8, r22
     44a:	5c 01       	movw	r10, r24
     44c:	20 e0       	ldi	r18, 0x00	; 0
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	4f e7       	ldi	r20, 0x7F	; 127
     452:	53 e4       	ldi	r21, 0x43	; 67
     454:	c3 01       	movw	r24, r6
     456:	b2 01       	movw	r22, r4
     458:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     45c:	9b 01       	movw	r18, r22
     45e:	ac 01       	movw	r20, r24
     460:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
     464:	a5 01       	movw	r20, r10
     466:	94 01       	movw	r18, r8
     468:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     46c:	a7 01       	movw	r20, r14
     46e:	96 01       	movw	r18, r12
     470:	0e 94 43 05 	call	0xa86	; 0xa86 <__divsf3>
     474:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
     478:	26 2f       	mov	r18, r22
     47a:	97 2f       	mov	r25, r23
     47c:	05 c0       	rjmp	.+10     	; 0x488 <__LOCK_REGION_LENGTH__+0x88>
	}
	else if(fceType==10)
     47e:	8a 30       	cpi	r24, 0x0A	; 10
     480:	09 f0       	breq	.+2      	; 0x484 <__LOCK_REGION_LENGTH__+0x84>
	return (uint8_t)(0);
}
     482:	03 c0       	rjmp	.+6      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);
	else if(fceType==2) {	
		return (unsigned int)(255 * pow(-1,i/  ((int)(T/Tvz/2))) * 2 * fmod(i*Tvz,T)/T);
	}
	else if(fceType==10)
	return (uint8_t)(0);
     484:	20 e0       	ldi	r18, 0x00	; 0
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	82 2f       	mov	r24, r18
}
     48a:	df 91       	pop	r29
     48c:	cf 91       	pop	r28
     48e:	ff 90       	pop	r15
     490:	ef 90       	pop	r14
     492:	df 90       	pop	r13
     494:	cf 90       	pop	r12
     496:	bf 90       	pop	r11
     498:	af 90       	pop	r10
     49a:	9f 90       	pop	r9
     49c:	8f 90       	pop	r8
     49e:	7f 90       	pop	r7
     4a0:	6f 90       	pop	r6
     4a2:	5f 90       	pop	r5
     4a4:	4f 90       	pop	r4
     4a6:	08 95       	ret

000004a8 <setByte>:

unsigned setByte(unsigned int num) {
     4a8:	cf 93       	push	r28
     4aa:	c8 2f       	mov	r28, r24
	if (num & (0x01 << 0)) GPIO_write_high(&PORTD,PD3); else GPIO_write_low(&PORTD,PD3);
     4ac:	80 ff       	sbrs	r24, 0
     4ae:	07 c0       	rjmp	.+14     	; 0x4be <setByte+0x16>
     4b0:	63 e0       	ldi	r22, 0x03	; 3
     4b2:	70 e0       	ldi	r23, 0x00	; 0
     4b4:	8b e2       	ldi	r24, 0x2B	; 43
     4b6:	90 e0       	ldi	r25, 0x00	; 0
     4b8:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4bc:	06 c0       	rjmp	.+12     	; 0x4ca <setByte+0x22>
     4be:	63 e0       	ldi	r22, 0x03	; 3
     4c0:	70 e0       	ldi	r23, 0x00	; 0
     4c2:	8b e2       	ldi	r24, 0x2B	; 43
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 1)) GPIO_write_high(&PORTD,PD2); else GPIO_write_low(&PORTD,PD2);
     4ca:	c1 ff       	sbrs	r28, 1
     4cc:	07 c0       	rjmp	.+14     	; 0x4dc <setByte+0x34>
     4ce:	62 e0       	ldi	r22, 0x02	; 2
     4d0:	70 e0       	ldi	r23, 0x00	; 0
     4d2:	8b e2       	ldi	r24, 0x2B	; 43
     4d4:	90 e0       	ldi	r25, 0x00	; 0
     4d6:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4da:	06 c0       	rjmp	.+12     	; 0x4e8 <setByte+0x40>
     4dc:	62 e0       	ldi	r22, 0x02	; 2
     4de:	70 e0       	ldi	r23, 0x00	; 0
     4e0:	8b e2       	ldi	r24, 0x2B	; 43
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 2)) GPIO_write_high(&PORTD,PD1); else GPIO_write_low(&PORTD,PD1);
     4e8:	c2 ff       	sbrs	r28, 2
     4ea:	07 c0       	rjmp	.+14     	; 0x4fa <setByte+0x52>
     4ec:	61 e0       	ldi	r22, 0x01	; 1
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	8b e2       	ldi	r24, 0x2B	; 43
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     4f8:	06 c0       	rjmp	.+12     	; 0x506 <setByte+0x5e>
     4fa:	61 e0       	ldi	r22, 0x01	; 1
     4fc:	70 e0       	ldi	r23, 0x00	; 0
     4fe:	8b e2       	ldi	r24, 0x2B	; 43
     500:	90 e0       	ldi	r25, 0x00	; 0
     502:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 3)) GPIO_write_high(&PORTD,PD0); else GPIO_write_low(&PORTD,PD0);
     506:	c3 ff       	sbrs	r28, 3
     508:	07 c0       	rjmp	.+14     	; 0x518 <setByte+0x70>
     50a:	60 e0       	ldi	r22, 0x00	; 0
     50c:	70 e0       	ldi	r23, 0x00	; 0
     50e:	8b e2       	ldi	r24, 0x2B	; 43
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     516:	06 c0       	rjmp	.+12     	; 0x524 <setByte+0x7c>
     518:	60 e0       	ldi	r22, 0x00	; 0
     51a:	70 e0       	ldi	r23, 0x00	; 0
     51c:	8b e2       	ldi	r24, 0x2B	; 43
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 4)) GPIO_write_high(&PORTC,PC6); else GPIO_write_low(&PORTC,PC6);
     524:	c4 ff       	sbrs	r28, 4
     526:	07 c0       	rjmp	.+14     	; 0x536 <setByte+0x8e>
     528:	66 e0       	ldi	r22, 0x06	; 6
     52a:	70 e0       	ldi	r23, 0x00	; 0
     52c:	88 e2       	ldi	r24, 0x28	; 40
     52e:	90 e0       	ldi	r25, 0x00	; 0
     530:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     534:	06 c0       	rjmp	.+12     	; 0x542 <setByte+0x9a>
     536:	66 e0       	ldi	r22, 0x06	; 6
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	88 e2       	ldi	r24, 0x28	; 40
     53c:	90 e0       	ldi	r25, 0x00	; 0
     53e:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 5)) GPIO_write_high(&PORTC,PC5); else GPIO_write_low(&PORTC,PC5);
     542:	c5 ff       	sbrs	r28, 5
     544:	07 c0       	rjmp	.+14     	; 0x554 <setByte+0xac>
     546:	65 e0       	ldi	r22, 0x05	; 5
     548:	70 e0       	ldi	r23, 0x00	; 0
     54a:	88 e2       	ldi	r24, 0x28	; 40
     54c:	90 e0       	ldi	r25, 0x00	; 0
     54e:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     552:	06 c0       	rjmp	.+12     	; 0x560 <setByte+0xb8>
     554:	65 e0       	ldi	r22, 0x05	; 5
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	88 e2       	ldi	r24, 0x28	; 40
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 6)) GPIO_write_high(&PORTC,PC4); else GPIO_write_low(&PORTC,PC4);
     560:	c6 ff       	sbrs	r28, 6
     562:	07 c0       	rjmp	.+14     	; 0x572 <setByte+0xca>
     564:	64 e0       	ldi	r22, 0x04	; 4
     566:	70 e0       	ldi	r23, 0x00	; 0
     568:	88 e2       	ldi	r24, 0x28	; 40
     56a:	90 e0       	ldi	r25, 0x00	; 0
     56c:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     570:	06 c0       	rjmp	.+12     	; 0x57e <setByte+0xd6>
     572:	64 e0       	ldi	r22, 0x04	; 4
     574:	70 e0       	ldi	r23, 0x00	; 0
     576:	88 e2       	ldi	r24, 0x28	; 40
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
	if (num & (0x01 << 7)) GPIO_write_high(&PORTC,PC3); else GPIO_write_low(&PORTC,PC3);		
     57e:	c7 ff       	sbrs	r28, 7
     580:	07 c0       	rjmp	.+14     	; 0x590 <setByte+0xe8>
     582:	63 e0       	ldi	r22, 0x03	; 3
     584:	70 e0       	ldi	r23, 0x00	; 0
     586:	88 e2       	ldi	r24, 0x28	; 40
     588:	90 e0       	ldi	r25, 0x00	; 0
     58a:	0e 94 bc 00 	call	0x178	; 0x178 <GPIO_write_high>
     58e:	06 c0       	rjmp	.+12     	; 0x59c <setByte+0xf4>
     590:	63 e0       	ldi	r22, 0x03	; 3
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	88 e2       	ldi	r24, 0x28	; 40
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 af 00 	call	0x15e	; 0x15e <GPIO_write_low>
}
     59c:	cf 91       	pop	r28
     59e:	08 95       	ret

000005a0 <main>:

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     5a0:	8c e0       	ldi	r24, 0x0C	; 12
     5a2:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("value:");
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	81 e0       	ldi	r24, 0x01	; 1
     5aa:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     5ae:	89 e0       	ldi	r24, 0x09	; 9
     5b0:	91 e0       	ldi	r25, 0x01	; 1
     5b2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
    lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     5b6:	61 e0       	ldi	r22, 0x01	; 1
     5b8:	81 e0       	ldi	r24, 0x01	; 1
     5ba:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     5be:	80 e1       	ldi	r24, 0x10	; 16
     5c0:	91 e0       	ldi	r25, 0x01	; 1
     5c2:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	

		
   //config output 
	
	GPIO_config_output(&DDRD, PD0);
     5c6:	60 e0       	ldi	r22, 0x00	; 0
     5c8:	70 e0       	ldi	r23, 0x00	; 0
     5ca:	8a e2       	ldi	r24, 0x2A	; 42
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD1);
     5d2:	61 e0       	ldi	r22, 0x01	; 1
     5d4:	70 e0       	ldi	r23, 0x00	; 0
     5d6:	8a e2       	ldi	r24, 0x2A	; 42
     5d8:	90 e0       	ldi	r25, 0x00	; 0
     5da:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD2);
     5de:	62 e0       	ldi	r22, 0x02	; 2
     5e0:	70 e0       	ldi	r23, 0x00	; 0
     5e2:	8a e2       	ldi	r24, 0x2A	; 42
     5e4:	90 e0       	ldi	r25, 0x00	; 0
     5e6:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD3);
     5ea:	63 e0       	ldi	r22, 0x03	; 3
     5ec:	70 e0       	ldi	r23, 0x00	; 0
     5ee:	8a e2       	ldi	r24, 0x2A	; 42
     5f0:	90 e0       	ldi	r25, 0x00	; 0
     5f2:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC3);
     5f6:	63 e0       	ldi	r22, 0x03	; 3
     5f8:	70 e0       	ldi	r23, 0x00	; 0
     5fa:	87 e2       	ldi	r24, 0x27	; 39
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC4);
     602:	64 e0       	ldi	r22, 0x04	; 4
     604:	70 e0       	ldi	r23, 0x00	; 0
     606:	87 e2       	ldi	r24, 0x27	; 39
     608:	90 e0       	ldi	r25, 0x00	; 0
     60a:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC5);
     60e:	65 e0       	ldi	r22, 0x05	; 5
     610:	70 e0       	ldi	r23, 0x00	; 0
     612:	87 e2       	ldi	r24, 0x27	; 39
     614:	90 e0       	ldi	r25, 0x00	; 0
     616:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC6);
     61a:	66 e0       	ldi	r22, 0x06	; 6
     61c:	70 e0       	ldi	r23, 0x00	; 0
     61e:	87 e2       	ldi	r24, 0x27	; 39
     620:	90 e0       	ldi	r25, 0x00	; 0
     622:	0e 94 a3 00 	call	0x146	; 0x146 <GPIO_config_output>
  
    // Enable interrupt and set the overflow prescaler to 262 ms
	TIM1_overflow_interrupt_enable();
     626:	ef e6       	ldi	r30, 0x6F	; 111
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	80 81       	ld	r24, Z
     62c:	81 60       	ori	r24, 0x01	; 1
     62e:	80 83       	st	Z, r24
	TIM1_overflow_262ms();
     630:	e1 e8       	ldi	r30, 0x81	; 129
     632:	f0 e0       	ldi	r31, 0x00	; 0
     634:	80 81       	ld	r24, Z
     636:	8b 7f       	andi	r24, 0xFB	; 251
     638:	80 83       	st	Z, r24
     63a:	80 81       	ld	r24, Z
     63c:	83 60       	ori	r24, 0x03	; 3
     63e:	80 83       	st	Z, r24
	TIM0_overflow_interrupt_enable();
     640:	ee e6       	ldi	r30, 0x6E	; 110
     642:	f0 e0       	ldi	r31, 0x00	; 0
     644:	80 81       	ld	r24, Z
     646:	81 60       	ori	r24, 0x01	; 1
     648:	80 83       	st	Z, r24
	TIM0_overflow_4ms();
     64a:	85 b5       	in	r24, 0x25	; 37
     64c:	8c 7f       	andi	r24, 0xFC	; 252
     64e:	85 bd       	out	0x25, r24	; 37
     650:	85 b5       	in	r24, 0x25	; 37
     652:	84 60       	ori	r24, 0x04	; 4
     654:	85 bd       	out	0x25, r24	; 37

	// Initialize LCD display
	lcd_init(LCD_DISP_ON);
     656:	8c e0       	ldi	r24, 0x0C	; 12
     658:	0e 94 29 01 	call	0x252	; 0x252 <lcd_init>
	lcd_gotoxy(1, 0); lcd_puts("value:");
     65c:	60 e0       	ldi	r22, 0x00	; 0
     65e:	81 e0       	ldi	r24, 0x01	; 1
     660:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     664:	89 e0       	ldi	r24, 0x09	; 9
     666:	91 e0       	ldi	r25, 0x01	; 1
     668:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     66c:	61 e0       	ldi	r22, 0x01	; 1
     66e:	81 e0       	ldi	r24, 0x01	; 1
     670:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     674:	80 e1       	ldi	r24, 0x10	; 16
     676:	91 e0       	ldi	r25, 0x01	; 1
     678:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>

	// Configure ADC to convert PC0[A0] analog value

	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
     67c:	ec e7       	ldi	r30, 0x7C	; 124
     67e:	f0 e0       	ldi	r31, 0x00	; 0
     680:	80 81       	ld	r24, Z
     682:	80 64       	ori	r24, 0x40	; 64
     684:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     686:	80 81       	ld	r24, Z
     688:	8f 77       	andi	r24, 0x7F	; 127
     68a:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
     68c:	80 81       	ld	r24, Z
     68e:	80 7f       	andi	r24, 0xF0	; 240
     690:	80 83       	st	Z, r24

	// Enable ADC module
	ADCSRA |= (1<<ADEN);
     692:	ea e7       	ldi	r30, 0x7A	; 122
     694:	f0 e0       	ldi	r31, 0x00	; 0
     696:	80 81       	ld	r24, Z
     698:	80 68       	ori	r24, 0x80	; 128
     69a:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
     69c:	80 81       	ld	r24, Z
     69e:	88 60       	ori	r24, 0x08	; 8
     6a0:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= ((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2));
     6a2:	80 81       	ld	r24, Z
     6a4:	87 60       	ori	r24, 0x07	; 7
     6a6:	80 83       	st	Z, r24

    // Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     6a8:	87 e6       	ldi	r24, 0x67	; 103
     6aa:	90 e0       	ldi	r25, 0x00	; 0
     6ac:	0e 94 99 04 	call	0x932	; 0x932 <uart_init>

    // Enables interrupts by setting the global interrupt mask
    sei();
     6b0:	78 94       	sei
     6b2:	ff cf       	rjmp	.-2      	; 0x6b2 <main+0x112>

000006b4 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{	
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	8f 93       	push	r24
     6c0:	ef 93       	push	r30
     6c2:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
     6c4:	ea e7       	ldi	r30, 0x7A	; 122
     6c6:	f0 e0       	ldi	r31, 0x00	; 0
     6c8:	80 81       	ld	r24, Z
     6ca:	80 64       	ori	r24, 0x40	; 64
     6cc:	80 83       	st	Z, r24
}
     6ce:	ff 91       	pop	r31
     6d0:	ef 91       	pop	r30
     6d2:	8f 91       	pop	r24
     6d4:	0f 90       	pop	r0
     6d6:	0f be       	out	0x3f, r0	; 63
     6d8:	0f 90       	pop	r0
     6da:	1f 90       	pop	r1
     6dc:	18 95       	reti

000006de <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     6de:	1f 92       	push	r1
     6e0:	0f 92       	push	r0
     6e2:	0f b6       	in	r0, 0x3f	; 63
     6e4:	0f 92       	push	r0
     6e6:	11 24       	eor	r1, r1
     6e8:	2f 93       	push	r18
     6ea:	3f 93       	push	r19
     6ec:	4f 93       	push	r20
     6ee:	5f 93       	push	r21
     6f0:	6f 93       	push	r22
     6f2:	7f 93       	push	r23
     6f4:	8f 93       	push	r24
     6f6:	9f 93       	push	r25
     6f8:	af 93       	push	r26
     6fa:	bf 93       	push	r27
     6fc:	ef 93       	push	r30
     6fe:	ff 93       	push	r31
	uint16_t a =fce(i++);
     700:	80 91 40 01 	lds	r24, 0x0140	; 0x800140 <__data_end>
     704:	90 91 41 01 	lds	r25, 0x0141	; 0x800141 <__data_end+0x1>
     708:	9c 01       	movw	r18, r24
     70a:	2f 5f       	subi	r18, 0xFF	; 255
     70c:	3f 4f       	sbci	r19, 0xFF	; 255
     70e:	30 93 41 01 	sts	0x0141, r19	; 0x800141 <__data_end+0x1>
     712:	20 93 40 01 	sts	0x0140, r18	; 0x800140 <__data_end>
     716:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <fce>
	//uint16_t b = a;
	//char phase[6] ="      ";
	setByte(a);	
     71a:	0e 94 54 02 	call	0x4a8	; 0x4a8 <setByte>
	//lcd_gotoxy(8, 1);
	//
	//itoa(b, phase, 10);
	//lcd_puts(phase); // show decimal
	
}	
     71e:	ff 91       	pop	r31
     720:	ef 91       	pop	r30
     722:	bf 91       	pop	r27
     724:	af 91       	pop	r26
     726:	9f 91       	pop	r25
     728:	8f 91       	pop	r24
     72a:	7f 91       	pop	r23
     72c:	6f 91       	pop	r22
     72e:	5f 91       	pop	r21
     730:	4f 91       	pop	r20
     732:	3f 91       	pop	r19
     734:	2f 91       	pop	r18
     736:	0f 90       	pop	r0
     738:	0f be       	out	0x3f, r0	; 63
     73a:	0f 90       	pop	r0
     73c:	1f 90       	pop	r1
     73e:	18 95       	reti

00000740 <__vector_21>:
ISR(ADC_vect)
{
     740:	1f 92       	push	r1
     742:	0f 92       	push	r0
     744:	0f b6       	in	r0, 0x3f	; 63
     746:	0f 92       	push	r0
     748:	11 24       	eor	r1, r1
     74a:	0f 93       	push	r16
     74c:	1f 93       	push	r17
     74e:	2f 93       	push	r18
     750:	3f 93       	push	r19
     752:	4f 93       	push	r20
     754:	5f 93       	push	r21
     756:	6f 93       	push	r22
     758:	7f 93       	push	r23
     75a:	8f 93       	push	r24
     75c:	9f 93       	push	r25
     75e:	af 93       	push	r26
     760:	bf 93       	push	r27
     762:	ef 93       	push	r30
     764:	ff 93       	push	r31
     766:	cf 93       	push	r28
     768:	df 93       	push	r29
     76a:	1f 92       	push	r1
     76c:	cd b7       	in	r28, 0x3d	; 61
     76e:	de b7       	in	r29, 0x3e	; 62
	uint16_t value = ADC;
     770:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     774:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		char lcd_string [] = "";
     778:	19 82       	std	Y+1, r1	; 0x01
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     77a:	4a e0       	ldi	r20, 0x0A	; 10
     77c:	be 01       	movw	r22, r28
     77e:	6f 5f       	subi	r22, 0xFF	; 255
     780:	7f 4f       	sbci	r23, 0xFF	; 255
     782:	c8 01       	movw	r24, r16
     784:	0e 94 2e 09 	call	0x125c	; 0x125c <__itoa_ncheck>
		itoa(value, lcd_string, 10); // value to dacimal

		lcd_gotoxy(8, 0);
     788:	60 e0       	ldi	r22, 0x00	; 0
     78a:	88 e0       	ldi	r24, 0x08	; 8
     78c:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
		lcd_puts(lcd_string); // show decimal
     790:	ce 01       	movw	r24, r28
     792:	01 96       	adiw	r24, 0x01	; 1
     794:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	
	
	
	
	if (value < 700) // reduce amount of sent uart data
     798:	0c 3b       	cpi	r16, 0xBC	; 188
     79a:	82 e0       	ldi	r24, 0x02	; 2
     79c:	18 07       	cpc	r17, r24
     79e:	60 f4       	brcc	.+24     	; 0x7b8 <__vector_21+0x78>
	{
		uart_puts("ADC value in decimal:");
     7a0:	88 e1       	ldi	r24, 0x18	; 24
     7a2:	91 e0       	ldi	r25, 0x01	; 1
     7a4:	0e 94 c7 04 	call	0x98e	; 0x98e <uart_puts>
		uart_puts(lcd_string); // send uart value in decimal
     7a8:	ce 01       	movw	r24, r28
     7aa:	01 96       	adiw	r24, 0x01	; 1
     7ac:	0e 94 c7 04 	call	0x98e	; 0x98e <uart_puts>
		uart_puts("\n");
     7b0:	8e e2       	ldi	r24, 0x2E	; 46
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 c7 04 	call	0x98e	; 0x98e <uart_puts>

	
	

	
	if (value>465 && value<520)fceType=0;
     7b8:	c8 01       	movw	r24, r16
     7ba:	82 5d       	subi	r24, 0xD2	; 210
     7bc:	91 40       	sbci	r25, 0x01	; 1
     7be:	c6 97       	sbiw	r24, 0x36	; 54
     7c0:	10 f4       	brcc	.+4      	; 0x7c6 <__vector_21+0x86>
     7c2:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
	if (value>360 && value<380)fceType=1;
     7c6:	c8 01       	movw	r24, r16
     7c8:	89 56       	subi	r24, 0x69	; 105
     7ca:	91 40       	sbci	r25, 0x01	; 1
     7cc:	43 97       	sbiw	r24, 0x13	; 19
     7ce:	18 f4       	brcc	.+6      	; 0x7d6 <__vector_21+0x96>
     7d0:	81 e0       	ldi	r24, 0x01	; 1
     7d2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (value>198 && value<208)fceType=2;
     7d6:	c8 01       	movw	r24, r16
     7d8:	87 5c       	subi	r24, 0xC7	; 199
     7da:	91 09       	sbc	r25, r1
     7dc:	09 97       	sbiw	r24, 0x09	; 9
     7de:	30 f4       	brcc	.+12     	; 0x7ec <__vector_21+0xac>
     7e0:	82 e0       	ldi	r24, 0x02	; 2
     7e2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
	if (value==0)fceType=10;
     7e6:	01 2b       	or	r16, r17
     7e8:	19 f0       	breq	.+6      	; 0x7f0 <__vector_21+0xb0>
     7ea:	1e c0       	rjmp	.+60     	; 0x828 <__vector_21+0xe8>
     7ec:	01 2b       	or	r16, r17
     7ee:	21 f4       	brne	.+8      	; 0x7f8 <__vector_21+0xb8>
     7f0:	8a e0       	ldi	r24, 0x0A	; 10
     7f2:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     7f6:	18 c0       	rjmp	.+48     	; 0x828 <__vector_21+0xe8>
		if (fceType==0){lcd_gotoxy(10, 1); lcd_puts("sin");}
     7f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     7fc:	81 11       	cpse	r24, r1
     7fe:	08 c0       	rjmp	.+16     	; 0x810 <__vector_21+0xd0>
     800:	61 e0       	ldi	r22, 0x01	; 1
     802:	8a e0       	ldi	r24, 0x0A	; 10
     804:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     808:	80 e3       	ldi	r24, 0x30	; 48
     80a:	91 e0       	ldi	r25, 0x01	; 1
     80c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
		if (fceType==1){lcd_gotoxy(10, 1); lcd_puts("saw");}
     810:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     814:	81 30       	cpi	r24, 0x01	; 1
     816:	41 f4       	brne	.+16     	; 0x828 <__vector_21+0xe8>
     818:	61 e0       	ldi	r22, 0x01	; 1
     81a:	8a e0       	ldi	r24, 0x0A	; 10
     81c:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     820:	84 e3       	ldi	r24, 0x34	; 52
     822:	91 e0       	ldi	r25, 0x01	; 1
     824:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
		if (fceType==2){lcd_gotoxy(10, 1); lcd_puts("tri");}
     828:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	41 f4       	brne	.+16     	; 0x840 <__vector_21+0x100>
     830:	61 e0       	ldi	r22, 0x01	; 1
     832:	8a e0       	ldi	r24, 0x0A	; 10
     834:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     838:	88 e3       	ldi	r24, 0x38	; 56
     83a:	91 e0       	ldi	r25, 0x01	; 1
     83c:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
		if (fceType==10){lcd_gotoxy(10, 1); lcd_puts("off");}
     840:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     844:	8a 30       	cpi	r24, 0x0A	; 10
     846:	39 f4       	brne	.+14     	; 0x856 <__vector_21+0x116>
     848:	61 e0       	ldi	r22, 0x01	; 1
     84a:	0e 94 07 01 	call	0x20e	; 0x20e <lcd_gotoxy>
     84e:	8c e3       	ldi	r24, 0x3C	; 60
     850:	91 e0       	ldi	r25, 0x01	; 1
     852:	0e 94 19 01 	call	0x232	; 0x232 <lcd_puts>
	
	
	
     856:	0f 90       	pop	r0
     858:	df 91       	pop	r29
     85a:	cf 91       	pop	r28
     85c:	ff 91       	pop	r31
     85e:	ef 91       	pop	r30
     860:	bf 91       	pop	r27
     862:	af 91       	pop	r26
     864:	9f 91       	pop	r25
     866:	8f 91       	pop	r24
     868:	7f 91       	pop	r23
     86a:	6f 91       	pop	r22
     86c:	5f 91       	pop	r21
     86e:	4f 91       	pop	r20
     870:	3f 91       	pop	r19
     872:	2f 91       	pop	r18
     874:	1f 91       	pop	r17
     876:	0f 91       	pop	r16
     878:	0f 90       	pop	r0
     87a:	0f be       	out	0x3f, r0	; 63
     87c:	0f 90       	pop	r0
     87e:	1f 90       	pop	r1
     880:	18 95       	reti

00000882 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     882:	1f 92       	push	r1
     884:	0f 92       	push	r0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	0f 92       	push	r0
     88a:	11 24       	eor	r1, r1
     88c:	2f 93       	push	r18
     88e:	8f 93       	push	r24
     890:	9f 93       	push	r25
     892:	ef 93       	push	r30
     894:	ff 93       	push	r31
     896:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     89a:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     89e:	8c 71       	andi	r24, 0x1C	; 28
     8a0:	e0 91 44 01 	lds	r30, 0x0144	; 0x800144 <UART_RxHead>
     8a4:	ef 5f       	subi	r30, 0xFF	; 255
     8a6:	ef 71       	andi	r30, 0x1F	; 31
     8a8:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <UART_RxTail>
     8ac:	e9 17       	cp	r30, r25
     8ae:	39 f0       	breq	.+14     	; 0x8be <__vector_18+0x3c>
     8b0:	e0 93 44 01 	sts	0x0144, r30	; 0x800144 <UART_RxHead>
     8b4:	f0 e0       	ldi	r31, 0x00	; 0
     8b6:	e9 5b       	subi	r30, 0xB9	; 185
     8b8:	fe 4f       	sbci	r31, 0xFE	; 254
     8ba:	20 83       	st	Z, r18
     8bc:	01 c0       	rjmp	.+2      	; 0x8c0 <__vector_18+0x3e>
     8be:	82 e0       	ldi	r24, 0x02	; 2
     8c0:	90 91 42 01 	lds	r25, 0x0142	; 0x800142 <UART_LastRxError>
     8c4:	89 2b       	or	r24, r25
     8c6:	80 93 42 01 	sts	0x0142, r24	; 0x800142 <UART_LastRxError>
     8ca:	ff 91       	pop	r31
     8cc:	ef 91       	pop	r30
     8ce:	9f 91       	pop	r25
     8d0:	8f 91       	pop	r24
     8d2:	2f 91       	pop	r18
     8d4:	0f 90       	pop	r0
     8d6:	0f be       	out	0x3f, r0	; 63
     8d8:	0f 90       	pop	r0
     8da:	1f 90       	pop	r1
     8dc:	18 95       	reti

000008de <__vector_19>:
     8de:	1f 92       	push	r1
     8e0:	0f 92       	push	r0
     8e2:	0f b6       	in	r0, 0x3f	; 63
     8e4:	0f 92       	push	r0
     8e6:	11 24       	eor	r1, r1
     8e8:	8f 93       	push	r24
     8ea:	9f 93       	push	r25
     8ec:	ef 93       	push	r30
     8ee:	ff 93       	push	r31
     8f0:	90 91 46 01 	lds	r25, 0x0146	; 0x800146 <UART_TxHead>
     8f4:	80 91 45 01 	lds	r24, 0x0145	; 0x800145 <UART_TxTail>
     8f8:	98 17       	cp	r25, r24
     8fa:	69 f0       	breq	.+26     	; 0x916 <__stack+0x17>
     8fc:	e0 91 45 01 	lds	r30, 0x0145	; 0x800145 <UART_TxTail>
     900:	ef 5f       	subi	r30, 0xFF	; 255
     902:	ef 71       	andi	r30, 0x1F	; 31
     904:	e0 93 45 01 	sts	0x0145, r30	; 0x800145 <UART_TxTail>
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	e9 59       	subi	r30, 0x99	; 153
     90c:	fe 4f       	sbci	r31, 0xFE	; 254
     90e:	80 81       	ld	r24, Z
     910:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     914:	05 c0       	rjmp	.+10     	; 0x920 <__stack+0x21>
     916:	e1 ec       	ldi	r30, 0xC1	; 193
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	8f 7d       	andi	r24, 0xDF	; 223
     91e:	80 83       	st	Z, r24
     920:	ff 91       	pop	r31
     922:	ef 91       	pop	r30
     924:	9f 91       	pop	r25
     926:	8f 91       	pop	r24
     928:	0f 90       	pop	r0
     92a:	0f be       	out	0x3f, r0	; 63
     92c:	0f 90       	pop	r0
     92e:	1f 90       	pop	r1
     930:	18 95       	reti

00000932 <uart_init>:
     932:	10 92 46 01 	sts	0x0146, r1	; 0x800146 <UART_TxHead>
     936:	10 92 45 01 	sts	0x0145, r1	; 0x800145 <UART_TxTail>
     93a:	10 92 44 01 	sts	0x0144, r1	; 0x800144 <UART_RxHead>
     93e:	10 92 43 01 	sts	0x0143, r1	; 0x800143 <UART_RxTail>
     942:	99 23       	and	r25, r25
     944:	1c f4       	brge	.+6      	; 0x94c <uart_init+0x1a>
     946:	22 e0       	ldi	r18, 0x02	; 2
     948:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     94c:	90 78       	andi	r25, 0x80	; 128
     94e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     952:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     956:	88 e9       	ldi	r24, 0x98	; 152
     958:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     95c:	86 e0       	ldi	r24, 0x06	; 6
     95e:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     962:	08 95       	ret

00000964 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     964:	20 91 46 01 	lds	r18, 0x0146	; 0x800146 <UART_TxHead>
     968:	2f 5f       	subi	r18, 0xFF	; 255
     96a:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     96c:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <UART_TxTail>
     970:	29 17       	cp	r18, r25
     972:	e1 f3       	breq	.-8      	; 0x96c <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     974:	e2 2f       	mov	r30, r18
     976:	f0 e0       	ldi	r31, 0x00	; 0
     978:	e9 59       	subi	r30, 0x99	; 153
     97a:	fe 4f       	sbci	r31, 0xFE	; 254
     97c:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     97e:	20 93 46 01 	sts	0x0146, r18	; 0x800146 <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     982:	e1 ec       	ldi	r30, 0xC1	; 193
     984:	f0 e0       	ldi	r31, 0x00	; 0
     986:	80 81       	ld	r24, Z
     988:	80 62       	ori	r24, 0x20	; 32
     98a:	80 83       	st	Z, r24
     98c:	08 95       	ret

0000098e <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     98e:	cf 93       	push	r28
     990:	df 93       	push	r29
     992:	ec 01       	movw	r28, r24
    while (*s)
     994:	88 81       	ld	r24, Y
     996:	88 23       	and	r24, r24
     998:	31 f0       	breq	.+12     	; 0x9a6 <uart_puts+0x18>
     99a:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     99c:	0e 94 b2 04 	call	0x964	; 0x964 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     9a0:	89 91       	ld	r24, Y+
     9a2:	81 11       	cpse	r24, r1
     9a4:	fb cf       	rjmp	.-10     	; 0x99c <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
     9a6:	df 91       	pop	r29
     9a8:	cf 91       	pop	r28
     9aa:	08 95       	ret

000009ac <__subsf3>:
     9ac:	50 58       	subi	r21, 0x80	; 128

000009ae <__addsf3>:
     9ae:	bb 27       	eor	r27, r27
     9b0:	aa 27       	eor	r26, r26
     9b2:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
     9b6:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
     9ba:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
     9be:	38 f0       	brcs	.+14     	; 0x9ce <__addsf3+0x20>
     9c0:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
     9c4:	20 f0       	brcs	.+8      	; 0x9ce <__addsf3+0x20>
     9c6:	39 f4       	brne	.+14     	; 0x9d6 <__addsf3+0x28>
     9c8:	9f 3f       	cpi	r25, 0xFF	; 255
     9ca:	19 f4       	brne	.+6      	; 0x9d2 <__addsf3+0x24>
     9cc:	26 f4       	brtc	.+8      	; 0x9d6 <__addsf3+0x28>
     9ce:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
     9d2:	0e f4       	brtc	.+2      	; 0x9d6 <__addsf3+0x28>
     9d4:	e0 95       	com	r30
     9d6:	e7 fb       	bst	r30, 7
     9d8:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>

000009dc <__addsf3x>:
     9dc:	e9 2f       	mov	r30, r25
     9de:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
     9e2:	58 f3       	brcs	.-42     	; 0x9ba <__addsf3+0xc>
     9e4:	ba 17       	cp	r27, r26
     9e6:	62 07       	cpc	r22, r18
     9e8:	73 07       	cpc	r23, r19
     9ea:	84 07       	cpc	r24, r20
     9ec:	95 07       	cpc	r25, r21
     9ee:	20 f0       	brcs	.+8      	; 0x9f8 <__addsf3x+0x1c>
     9f0:	79 f4       	brne	.+30     	; 0xa10 <__addsf3x+0x34>
     9f2:	a6 f5       	brtc	.+104    	; 0xa5c <__addsf3x+0x80>
     9f4:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__fp_zero>
     9f8:	0e f4       	brtc	.+2      	; 0x9fc <__addsf3x+0x20>
     9fa:	e0 95       	com	r30
     9fc:	0b 2e       	mov	r0, r27
     9fe:	ba 2f       	mov	r27, r26
     a00:	a0 2d       	mov	r26, r0
     a02:	0b 01       	movw	r0, r22
     a04:	b9 01       	movw	r22, r18
     a06:	90 01       	movw	r18, r0
     a08:	0c 01       	movw	r0, r24
     a0a:	ca 01       	movw	r24, r20
     a0c:	a0 01       	movw	r20, r0
     a0e:	11 24       	eor	r1, r1
     a10:	ff 27       	eor	r31, r31
     a12:	59 1b       	sub	r21, r25
     a14:	99 f0       	breq	.+38     	; 0xa3c <__addsf3x+0x60>
     a16:	59 3f       	cpi	r21, 0xF9	; 249
     a18:	50 f4       	brcc	.+20     	; 0xa2e <__addsf3x+0x52>
     a1a:	50 3e       	cpi	r21, 0xE0	; 224
     a1c:	68 f1       	brcs	.+90     	; 0xa78 <__addsf3x+0x9c>
     a1e:	1a 16       	cp	r1, r26
     a20:	f0 40       	sbci	r31, 0x00	; 0
     a22:	a2 2f       	mov	r26, r18
     a24:	23 2f       	mov	r18, r19
     a26:	34 2f       	mov	r19, r20
     a28:	44 27       	eor	r20, r20
     a2a:	58 5f       	subi	r21, 0xF8	; 248
     a2c:	f3 cf       	rjmp	.-26     	; 0xa14 <__addsf3x+0x38>
     a2e:	46 95       	lsr	r20
     a30:	37 95       	ror	r19
     a32:	27 95       	ror	r18
     a34:	a7 95       	ror	r26
     a36:	f0 40       	sbci	r31, 0x00	; 0
     a38:	53 95       	inc	r21
     a3a:	c9 f7       	brne	.-14     	; 0xa2e <__addsf3x+0x52>
     a3c:	7e f4       	brtc	.+30     	; 0xa5c <__addsf3x+0x80>
     a3e:	1f 16       	cp	r1, r31
     a40:	ba 0b       	sbc	r27, r26
     a42:	62 0b       	sbc	r22, r18
     a44:	73 0b       	sbc	r23, r19
     a46:	84 0b       	sbc	r24, r20
     a48:	ba f0       	brmi	.+46     	; 0xa78 <__addsf3x+0x9c>
     a4a:	91 50       	subi	r25, 0x01	; 1
     a4c:	a1 f0       	breq	.+40     	; 0xa76 <__addsf3x+0x9a>
     a4e:	ff 0f       	add	r31, r31
     a50:	bb 1f       	adc	r27, r27
     a52:	66 1f       	adc	r22, r22
     a54:	77 1f       	adc	r23, r23
     a56:	88 1f       	adc	r24, r24
     a58:	c2 f7       	brpl	.-16     	; 0xa4a <__addsf3x+0x6e>
     a5a:	0e c0       	rjmp	.+28     	; 0xa78 <__addsf3x+0x9c>
     a5c:	ba 0f       	add	r27, r26
     a5e:	62 1f       	adc	r22, r18
     a60:	73 1f       	adc	r23, r19
     a62:	84 1f       	adc	r24, r20
     a64:	48 f4       	brcc	.+18     	; 0xa78 <__addsf3x+0x9c>
     a66:	87 95       	ror	r24
     a68:	77 95       	ror	r23
     a6a:	67 95       	ror	r22
     a6c:	b7 95       	ror	r27
     a6e:	f7 95       	ror	r31
     a70:	9e 3f       	cpi	r25, 0xFE	; 254
     a72:	08 f0       	brcs	.+2      	; 0xa76 <__addsf3x+0x9a>
     a74:	b0 cf       	rjmp	.-160    	; 0x9d6 <__addsf3+0x28>
     a76:	93 95       	inc	r25
     a78:	88 0f       	add	r24, r24
     a7a:	08 f0       	brcs	.+2      	; 0xa7e <__addsf3x+0xa2>
     a7c:	99 27       	eor	r25, r25
     a7e:	ee 0f       	add	r30, r30
     a80:	97 95       	ror	r25
     a82:	87 95       	ror	r24
     a84:	08 95       	ret

00000a86 <__divsf3>:
     a86:	0e 94 57 05 	call	0xaae	; 0xaae <__divsf3x>
     a8a:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
     a8e:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
     a92:	58 f0       	brcs	.+22     	; 0xaaa <__divsf3+0x24>
     a94:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
     a98:	40 f0       	brcs	.+16     	; 0xaaa <__divsf3+0x24>
     a9a:	29 f4       	brne	.+10     	; 0xaa6 <__divsf3+0x20>
     a9c:	5f 3f       	cpi	r21, 0xFF	; 255
     a9e:	29 f0       	breq	.+10     	; 0xaaa <__divsf3+0x24>
     aa0:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
     aa4:	51 11       	cpse	r21, r1
     aa6:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
     aaa:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>

00000aae <__divsf3x>:
     aae:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
     ab2:	68 f3       	brcs	.-38     	; 0xa8e <__divsf3+0x8>

00000ab4 <__divsf3_pse>:
     ab4:	99 23       	and	r25, r25
     ab6:	b1 f3       	breq	.-20     	; 0xaa4 <__divsf3+0x1e>
     ab8:	55 23       	and	r21, r21
     aba:	91 f3       	breq	.-28     	; 0xaa0 <__divsf3+0x1a>
     abc:	95 1b       	sub	r25, r21
     abe:	55 0b       	sbc	r21, r21
     ac0:	bb 27       	eor	r27, r27
     ac2:	aa 27       	eor	r26, r26
     ac4:	62 17       	cp	r22, r18
     ac6:	73 07       	cpc	r23, r19
     ac8:	84 07       	cpc	r24, r20
     aca:	38 f0       	brcs	.+14     	; 0xada <__divsf3_pse+0x26>
     acc:	9f 5f       	subi	r25, 0xFF	; 255
     ace:	5f 4f       	sbci	r21, 0xFF	; 255
     ad0:	22 0f       	add	r18, r18
     ad2:	33 1f       	adc	r19, r19
     ad4:	44 1f       	adc	r20, r20
     ad6:	aa 1f       	adc	r26, r26
     ad8:	a9 f3       	breq	.-22     	; 0xac4 <__divsf3_pse+0x10>
     ada:	35 d0       	rcall	.+106    	; 0xb46 <__divsf3_pse+0x92>
     adc:	0e 2e       	mov	r0, r30
     ade:	3a f0       	brmi	.+14     	; 0xaee <__divsf3_pse+0x3a>
     ae0:	e0 e8       	ldi	r30, 0x80	; 128
     ae2:	32 d0       	rcall	.+100    	; 0xb48 <__divsf3_pse+0x94>
     ae4:	91 50       	subi	r25, 0x01	; 1
     ae6:	50 40       	sbci	r21, 0x00	; 0
     ae8:	e6 95       	lsr	r30
     aea:	00 1c       	adc	r0, r0
     aec:	ca f7       	brpl	.-14     	; 0xae0 <__divsf3_pse+0x2c>
     aee:	2b d0       	rcall	.+86     	; 0xb46 <__divsf3_pse+0x92>
     af0:	fe 2f       	mov	r31, r30
     af2:	29 d0       	rcall	.+82     	; 0xb46 <__divsf3_pse+0x92>
     af4:	66 0f       	add	r22, r22
     af6:	77 1f       	adc	r23, r23
     af8:	88 1f       	adc	r24, r24
     afa:	bb 1f       	adc	r27, r27
     afc:	26 17       	cp	r18, r22
     afe:	37 07       	cpc	r19, r23
     b00:	48 07       	cpc	r20, r24
     b02:	ab 07       	cpc	r26, r27
     b04:	b0 e8       	ldi	r27, 0x80	; 128
     b06:	09 f0       	breq	.+2      	; 0xb0a <__divsf3_pse+0x56>
     b08:	bb 0b       	sbc	r27, r27
     b0a:	80 2d       	mov	r24, r0
     b0c:	bf 01       	movw	r22, r30
     b0e:	ff 27       	eor	r31, r31
     b10:	93 58       	subi	r25, 0x83	; 131
     b12:	5f 4f       	sbci	r21, 0xFF	; 255
     b14:	3a f0       	brmi	.+14     	; 0xb24 <__divsf3_pse+0x70>
     b16:	9e 3f       	cpi	r25, 0xFE	; 254
     b18:	51 05       	cpc	r21, r1
     b1a:	78 f0       	brcs	.+30     	; 0xb3a <__divsf3_pse+0x86>
     b1c:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
     b20:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
     b24:	5f 3f       	cpi	r21, 0xFF	; 255
     b26:	e4 f3       	brlt	.-8      	; 0xb20 <__divsf3_pse+0x6c>
     b28:	98 3e       	cpi	r25, 0xE8	; 232
     b2a:	d4 f3       	brlt	.-12     	; 0xb20 <__divsf3_pse+0x6c>
     b2c:	86 95       	lsr	r24
     b2e:	77 95       	ror	r23
     b30:	67 95       	ror	r22
     b32:	b7 95       	ror	r27
     b34:	f7 95       	ror	r31
     b36:	9f 5f       	subi	r25, 0xFF	; 255
     b38:	c9 f7       	brne	.-14     	; 0xb2c <__divsf3_pse+0x78>
     b3a:	88 0f       	add	r24, r24
     b3c:	91 1d       	adc	r25, r1
     b3e:	96 95       	lsr	r25
     b40:	87 95       	ror	r24
     b42:	97 f9       	bld	r25, 7
     b44:	08 95       	ret
     b46:	e1 e0       	ldi	r30, 0x01	; 1
     b48:	66 0f       	add	r22, r22
     b4a:	77 1f       	adc	r23, r23
     b4c:	88 1f       	adc	r24, r24
     b4e:	bb 1f       	adc	r27, r27
     b50:	62 17       	cp	r22, r18
     b52:	73 07       	cpc	r23, r19
     b54:	84 07       	cpc	r24, r20
     b56:	ba 07       	cpc	r27, r26
     b58:	20 f0       	brcs	.+8      	; 0xb62 <__divsf3_pse+0xae>
     b5a:	62 1b       	sub	r22, r18
     b5c:	73 0b       	sbc	r23, r19
     b5e:	84 0b       	sbc	r24, r20
     b60:	ba 0b       	sbc	r27, r26
     b62:	ee 1f       	adc	r30, r30
     b64:	88 f7       	brcc	.-30     	; 0xb48 <__divsf3_pse+0x94>
     b66:	e0 95       	com	r30
     b68:	08 95       	ret

00000b6a <__fixsfsi>:
     b6a:	0e 94 bc 05 	call	0xb78	; 0xb78 <__fixunssfsi>
     b6e:	68 94       	set
     b70:	b1 11       	cpse	r27, r1
     b72:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
     b76:	08 95       	ret

00000b78 <__fixunssfsi>:
     b78:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
     b7c:	88 f0       	brcs	.+34     	; 0xba0 <__fixunssfsi+0x28>
     b7e:	9f 57       	subi	r25, 0x7F	; 127
     b80:	98 f0       	brcs	.+38     	; 0xba8 <__fixunssfsi+0x30>
     b82:	b9 2f       	mov	r27, r25
     b84:	99 27       	eor	r25, r25
     b86:	b7 51       	subi	r27, 0x17	; 23
     b88:	b0 f0       	brcs	.+44     	; 0xbb6 <__fixunssfsi+0x3e>
     b8a:	e1 f0       	breq	.+56     	; 0xbc4 <__fixunssfsi+0x4c>
     b8c:	66 0f       	add	r22, r22
     b8e:	77 1f       	adc	r23, r23
     b90:	88 1f       	adc	r24, r24
     b92:	99 1f       	adc	r25, r25
     b94:	1a f0       	brmi	.+6      	; 0xb9c <__fixunssfsi+0x24>
     b96:	ba 95       	dec	r27
     b98:	c9 f7       	brne	.-14     	; 0xb8c <__fixunssfsi+0x14>
     b9a:	14 c0       	rjmp	.+40     	; 0xbc4 <__fixunssfsi+0x4c>
     b9c:	b1 30       	cpi	r27, 0x01	; 1
     b9e:	91 f0       	breq	.+36     	; 0xbc4 <__fixunssfsi+0x4c>
     ba0:	0e 94 d4 06 	call	0xda8	; 0xda8 <__fp_zero>
     ba4:	b1 e0       	ldi	r27, 0x01	; 1
     ba6:	08 95       	ret
     ba8:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__fp_zero>
     bac:	67 2f       	mov	r22, r23
     bae:	78 2f       	mov	r23, r24
     bb0:	88 27       	eor	r24, r24
     bb2:	b8 5f       	subi	r27, 0xF8	; 248
     bb4:	39 f0       	breq	.+14     	; 0xbc4 <__fixunssfsi+0x4c>
     bb6:	b9 3f       	cpi	r27, 0xF9	; 249
     bb8:	cc f3       	brlt	.-14     	; 0xbac <__fixunssfsi+0x34>
     bba:	86 95       	lsr	r24
     bbc:	77 95       	ror	r23
     bbe:	67 95       	ror	r22
     bc0:	b3 95       	inc	r27
     bc2:	d9 f7       	brne	.-10     	; 0xbba <__fixunssfsi+0x42>
     bc4:	3e f4       	brtc	.+14     	; 0xbd4 <__fixunssfsi+0x5c>
     bc6:	90 95       	com	r25
     bc8:	80 95       	com	r24
     bca:	70 95       	com	r23
     bcc:	61 95       	neg	r22
     bce:	7f 4f       	sbci	r23, 0xFF	; 255
     bd0:	8f 4f       	sbci	r24, 0xFF	; 255
     bd2:	9f 4f       	sbci	r25, 0xFF	; 255
     bd4:	08 95       	ret

00000bd6 <__floatunsisf>:
     bd6:	e8 94       	clt
     bd8:	09 c0       	rjmp	.+18     	; 0xbec <__floatsisf+0x12>

00000bda <__floatsisf>:
     bda:	97 fb       	bst	r25, 7
     bdc:	3e f4       	brtc	.+14     	; 0xbec <__floatsisf+0x12>
     bde:	90 95       	com	r25
     be0:	80 95       	com	r24
     be2:	70 95       	com	r23
     be4:	61 95       	neg	r22
     be6:	7f 4f       	sbci	r23, 0xFF	; 255
     be8:	8f 4f       	sbci	r24, 0xFF	; 255
     bea:	9f 4f       	sbci	r25, 0xFF	; 255
     bec:	99 23       	and	r25, r25
     bee:	a9 f0       	breq	.+42     	; 0xc1a <__floatsisf+0x40>
     bf0:	f9 2f       	mov	r31, r25
     bf2:	96 e9       	ldi	r25, 0x96	; 150
     bf4:	bb 27       	eor	r27, r27
     bf6:	93 95       	inc	r25
     bf8:	f6 95       	lsr	r31
     bfa:	87 95       	ror	r24
     bfc:	77 95       	ror	r23
     bfe:	67 95       	ror	r22
     c00:	b7 95       	ror	r27
     c02:	f1 11       	cpse	r31, r1
     c04:	f8 cf       	rjmp	.-16     	; 0xbf6 <__floatsisf+0x1c>
     c06:	fa f4       	brpl	.+62     	; 0xc46 <__floatsisf+0x6c>
     c08:	bb 0f       	add	r27, r27
     c0a:	11 f4       	brne	.+4      	; 0xc10 <__floatsisf+0x36>
     c0c:	60 ff       	sbrs	r22, 0
     c0e:	1b c0       	rjmp	.+54     	; 0xc46 <__floatsisf+0x6c>
     c10:	6f 5f       	subi	r22, 0xFF	; 255
     c12:	7f 4f       	sbci	r23, 0xFF	; 255
     c14:	8f 4f       	sbci	r24, 0xFF	; 255
     c16:	9f 4f       	sbci	r25, 0xFF	; 255
     c18:	16 c0       	rjmp	.+44     	; 0xc46 <__floatsisf+0x6c>
     c1a:	88 23       	and	r24, r24
     c1c:	11 f0       	breq	.+4      	; 0xc22 <__floatsisf+0x48>
     c1e:	96 e9       	ldi	r25, 0x96	; 150
     c20:	11 c0       	rjmp	.+34     	; 0xc44 <__floatsisf+0x6a>
     c22:	77 23       	and	r23, r23
     c24:	21 f0       	breq	.+8      	; 0xc2e <__floatsisf+0x54>
     c26:	9e e8       	ldi	r25, 0x8E	; 142
     c28:	87 2f       	mov	r24, r23
     c2a:	76 2f       	mov	r23, r22
     c2c:	05 c0       	rjmp	.+10     	; 0xc38 <__floatsisf+0x5e>
     c2e:	66 23       	and	r22, r22
     c30:	71 f0       	breq	.+28     	; 0xc4e <__floatsisf+0x74>
     c32:	96 e8       	ldi	r25, 0x86	; 134
     c34:	86 2f       	mov	r24, r22
     c36:	70 e0       	ldi	r23, 0x00	; 0
     c38:	60 e0       	ldi	r22, 0x00	; 0
     c3a:	2a f0       	brmi	.+10     	; 0xc46 <__floatsisf+0x6c>
     c3c:	9a 95       	dec	r25
     c3e:	66 0f       	add	r22, r22
     c40:	77 1f       	adc	r23, r23
     c42:	88 1f       	adc	r24, r24
     c44:	da f7       	brpl	.-10     	; 0xc3c <__floatsisf+0x62>
     c46:	88 0f       	add	r24, r24
     c48:	96 95       	lsr	r25
     c4a:	87 95       	ror	r24
     c4c:	97 f9       	bld	r25, 7
     c4e:	08 95       	ret
     c50:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
     c54:	20 f0       	brcs	.+8      	; 0xc5e <__floatsisf+0x84>
     c56:	19 f0       	breq	.+6      	; 0xc5e <__floatsisf+0x84>
     c58:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
     c5c:	50 f4       	brcc	.+20     	; 0xc72 <fmod+0xc>
     c5e:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
     c62:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>

00000c66 <fmod>:
     c66:	e9 2f       	mov	r30, r25
     c68:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
     c6c:	88 f3       	brcs	.-30     	; 0xc50 <__floatsisf+0x76>
     c6e:	55 23       	and	r21, r21
     c70:	b1 f3       	breq	.-20     	; 0xc5e <__floatsisf+0x84>
     c72:	e7 fb       	bst	r30, 7
     c74:	62 17       	cp	r22, r18
     c76:	73 07       	cpc	r23, r19
     c78:	84 07       	cpc	r24, r20
     c7a:	95 07       	cpc	r25, r21
     c7c:	a8 f1       	brcs	.+106    	; 0xce8 <fmod+0x82>
     c7e:	89 f3       	breq	.-30     	; 0xc62 <__floatsisf+0x88>
     c80:	e9 2f       	mov	r30, r25
     c82:	ff 27       	eor	r31, r31
     c84:	88 23       	and	r24, r24
     c86:	2a f0       	brmi	.+10     	; 0xc92 <fmod+0x2c>
     c88:	31 97       	sbiw	r30, 0x01	; 1
     c8a:	66 0f       	add	r22, r22
     c8c:	77 1f       	adc	r23, r23
     c8e:	88 1f       	adc	r24, r24
     c90:	da f7       	brpl	.-10     	; 0xc88 <fmod+0x22>
     c92:	95 2f       	mov	r25, r21
     c94:	55 27       	eor	r21, r21
     c96:	44 23       	and	r20, r20
     c98:	32 f0       	brmi	.+12     	; 0xca6 <fmod+0x40>
     c9a:	91 50       	subi	r25, 0x01	; 1
     c9c:	50 40       	sbci	r21, 0x00	; 0
     c9e:	22 0f       	add	r18, r18
     ca0:	33 1f       	adc	r19, r19
     ca2:	44 1f       	adc	r20, r20
     ca4:	d2 f7       	brpl	.-12     	; 0xc9a <fmod+0x34>
     ca6:	bb 27       	eor	r27, r27
     ca8:	e9 1b       	sub	r30, r25
     caa:	f5 0b       	sbc	r31, r21
     cac:	62 1b       	sub	r22, r18
     cae:	73 0b       	sbc	r23, r19
     cb0:	84 0b       	sbc	r24, r20
     cb2:	b1 09       	sbc	r27, r1
     cb4:	b1 f2       	breq	.-84     	; 0xc62 <__floatsisf+0x88>
     cb6:	22 f4       	brpl	.+8      	; 0xcc0 <fmod+0x5a>
     cb8:	62 0f       	add	r22, r18
     cba:	73 1f       	adc	r23, r19
     cbc:	84 1f       	adc	r24, r20
     cbe:	b1 1d       	adc	r27, r1
     cc0:	31 97       	sbiw	r30, 0x01	; 1
     cc2:	2a f0       	brmi	.+10     	; 0xcce <fmod+0x68>
     cc4:	66 0f       	add	r22, r22
     cc6:	77 1f       	adc	r23, r23
     cc8:	88 1f       	adc	r24, r24
     cca:	bb 1f       	adc	r27, r27
     ccc:	ef cf       	rjmp	.-34     	; 0xcac <fmod+0x46>
     cce:	91 50       	subi	r25, 0x01	; 1
     cd0:	50 40       	sbci	r21, 0x00	; 0
     cd2:	62 f0       	brmi	.+24     	; 0xcec <fmod+0x86>
     cd4:	41 f0       	breq	.+16     	; 0xce6 <fmod+0x80>
     cd6:	88 23       	and	r24, r24
     cd8:	32 f0       	brmi	.+12     	; 0xce6 <fmod+0x80>
     cda:	66 0f       	add	r22, r22
     cdc:	77 1f       	adc	r23, r23
     cde:	88 1f       	adc	r24, r24
     ce0:	91 50       	subi	r25, 0x01	; 1
     ce2:	50 40       	sbci	r21, 0x00	; 0
     ce4:	c1 f7       	brne	.-16     	; 0xcd6 <fmod+0x70>
     ce6:	93 95       	inc	r25
     ce8:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_mpack>
     cec:	86 95       	lsr	r24
     cee:	77 95       	ror	r23
     cf0:	67 95       	ror	r22
     cf2:	9f 5f       	subi	r25, 0xFF	; 255
     cf4:	d9 f7       	brne	.-10     	; 0xcec <fmod+0x86>
     cf6:	f7 cf       	rjmp	.-18     	; 0xce6 <fmod+0x80>

00000cf8 <__fp_inf>:
     cf8:	97 f9       	bld	r25, 7
     cfa:	9f 67       	ori	r25, 0x7F	; 127
     cfc:	80 e8       	ldi	r24, 0x80	; 128
     cfe:	70 e0       	ldi	r23, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	08 95       	ret

00000d04 <__fp_mpack>:
     d04:	9f 3f       	cpi	r25, 0xFF	; 255
     d06:	31 f0       	breq	.+12     	; 0xd14 <__fp_mpack_finite+0xc>

00000d08 <__fp_mpack_finite>:
     d08:	91 50       	subi	r25, 0x01	; 1
     d0a:	20 f4       	brcc	.+8      	; 0xd14 <__fp_mpack_finite+0xc>
     d0c:	87 95       	ror	r24
     d0e:	77 95       	ror	r23
     d10:	67 95       	ror	r22
     d12:	b7 95       	ror	r27
     d14:	88 0f       	add	r24, r24
     d16:	91 1d       	adc	r25, r1
     d18:	96 95       	lsr	r25
     d1a:	87 95       	ror	r24
     d1c:	97 f9       	bld	r25, 7
     d1e:	08 95       	ret

00000d20 <__fp_nan>:
     d20:	9f ef       	ldi	r25, 0xFF	; 255
     d22:	80 ec       	ldi	r24, 0xC0	; 192
     d24:	08 95       	ret

00000d26 <__fp_pscA>:
     d26:	00 24       	eor	r0, r0
     d28:	0a 94       	dec	r0
     d2a:	16 16       	cp	r1, r22
     d2c:	17 06       	cpc	r1, r23
     d2e:	18 06       	cpc	r1, r24
     d30:	09 06       	cpc	r0, r25
     d32:	08 95       	ret

00000d34 <__fp_pscB>:
     d34:	00 24       	eor	r0, r0
     d36:	0a 94       	dec	r0
     d38:	12 16       	cp	r1, r18
     d3a:	13 06       	cpc	r1, r19
     d3c:	14 06       	cpc	r1, r20
     d3e:	05 06       	cpc	r0, r21
     d40:	08 95       	ret

00000d42 <__fp_round>:
     d42:	09 2e       	mov	r0, r25
     d44:	03 94       	inc	r0
     d46:	00 0c       	add	r0, r0
     d48:	11 f4       	brne	.+4      	; 0xd4e <__fp_round+0xc>
     d4a:	88 23       	and	r24, r24
     d4c:	52 f0       	brmi	.+20     	; 0xd62 <__fp_round+0x20>
     d4e:	bb 0f       	add	r27, r27
     d50:	40 f4       	brcc	.+16     	; 0xd62 <__fp_round+0x20>
     d52:	bf 2b       	or	r27, r31
     d54:	11 f4       	brne	.+4      	; 0xd5a <__fp_round+0x18>
     d56:	60 ff       	sbrs	r22, 0
     d58:	04 c0       	rjmp	.+8      	; 0xd62 <__fp_round+0x20>
     d5a:	6f 5f       	subi	r22, 0xFF	; 255
     d5c:	7f 4f       	sbci	r23, 0xFF	; 255
     d5e:	8f 4f       	sbci	r24, 0xFF	; 255
     d60:	9f 4f       	sbci	r25, 0xFF	; 255
     d62:	08 95       	ret

00000d64 <__fp_split3>:
     d64:	57 fd       	sbrc	r21, 7
     d66:	90 58       	subi	r25, 0x80	; 128
     d68:	44 0f       	add	r20, r20
     d6a:	55 1f       	adc	r21, r21
     d6c:	59 f0       	breq	.+22     	; 0xd84 <__fp_splitA+0x10>
     d6e:	5f 3f       	cpi	r21, 0xFF	; 255
     d70:	71 f0       	breq	.+28     	; 0xd8e <__fp_splitA+0x1a>
     d72:	47 95       	ror	r20

00000d74 <__fp_splitA>:
     d74:	88 0f       	add	r24, r24
     d76:	97 fb       	bst	r25, 7
     d78:	99 1f       	adc	r25, r25
     d7a:	61 f0       	breq	.+24     	; 0xd94 <__fp_splitA+0x20>
     d7c:	9f 3f       	cpi	r25, 0xFF	; 255
     d7e:	79 f0       	breq	.+30     	; 0xd9e <__fp_splitA+0x2a>
     d80:	87 95       	ror	r24
     d82:	08 95       	ret
     d84:	12 16       	cp	r1, r18
     d86:	13 06       	cpc	r1, r19
     d88:	14 06       	cpc	r1, r20
     d8a:	55 1f       	adc	r21, r21
     d8c:	f2 cf       	rjmp	.-28     	; 0xd72 <__fp_split3+0xe>
     d8e:	46 95       	lsr	r20
     d90:	f1 df       	rcall	.-30     	; 0xd74 <__fp_splitA>
     d92:	08 c0       	rjmp	.+16     	; 0xda4 <__fp_splitA+0x30>
     d94:	16 16       	cp	r1, r22
     d96:	17 06       	cpc	r1, r23
     d98:	18 06       	cpc	r1, r24
     d9a:	99 1f       	adc	r25, r25
     d9c:	f1 cf       	rjmp	.-30     	; 0xd80 <__fp_splitA+0xc>
     d9e:	86 95       	lsr	r24
     da0:	71 05       	cpc	r23, r1
     da2:	61 05       	cpc	r22, r1
     da4:	08 94       	sec
     da6:	08 95       	ret

00000da8 <__fp_zero>:
     da8:	e8 94       	clt

00000daa <__fp_szero>:
     daa:	bb 27       	eor	r27, r27
     dac:	66 27       	eor	r22, r22
     dae:	77 27       	eor	r23, r23
     db0:	cb 01       	movw	r24, r22
     db2:	97 f9       	bld	r25, 7
     db4:	08 95       	ret

00000db6 <__mulsf3>:
     db6:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3x>
     dba:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>
     dbe:	0e 94 93 06 	call	0xd26	; 0xd26 <__fp_pscA>
     dc2:	38 f0       	brcs	.+14     	; 0xdd2 <__mulsf3+0x1c>
     dc4:	0e 94 9a 06 	call	0xd34	; 0xd34 <__fp_pscB>
     dc8:	20 f0       	brcs	.+8      	; 0xdd2 <__mulsf3+0x1c>
     dca:	95 23       	and	r25, r21
     dcc:	11 f0       	breq	.+4      	; 0xdd2 <__mulsf3+0x1c>
     dce:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
     dd2:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
     dd6:	11 24       	eor	r1, r1
     dd8:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>

00000ddc <__mulsf3x>:
     ddc:	0e 94 b2 06 	call	0xd64	; 0xd64 <__fp_split3>
     de0:	70 f3       	brcs	.-36     	; 0xdbe <__mulsf3+0x8>

00000de2 <__mulsf3_pse>:
     de2:	95 9f       	mul	r25, r21
     de4:	c1 f3       	breq	.-16     	; 0xdd6 <__mulsf3+0x20>
     de6:	95 0f       	add	r25, r21
     de8:	50 e0       	ldi	r21, 0x00	; 0
     dea:	55 1f       	adc	r21, r21
     dec:	62 9f       	mul	r22, r18
     dee:	f0 01       	movw	r30, r0
     df0:	72 9f       	mul	r23, r18
     df2:	bb 27       	eor	r27, r27
     df4:	f0 0d       	add	r31, r0
     df6:	b1 1d       	adc	r27, r1
     df8:	63 9f       	mul	r22, r19
     dfa:	aa 27       	eor	r26, r26
     dfc:	f0 0d       	add	r31, r0
     dfe:	b1 1d       	adc	r27, r1
     e00:	aa 1f       	adc	r26, r26
     e02:	64 9f       	mul	r22, r20
     e04:	66 27       	eor	r22, r22
     e06:	b0 0d       	add	r27, r0
     e08:	a1 1d       	adc	r26, r1
     e0a:	66 1f       	adc	r22, r22
     e0c:	82 9f       	mul	r24, r18
     e0e:	22 27       	eor	r18, r18
     e10:	b0 0d       	add	r27, r0
     e12:	a1 1d       	adc	r26, r1
     e14:	62 1f       	adc	r22, r18
     e16:	73 9f       	mul	r23, r19
     e18:	b0 0d       	add	r27, r0
     e1a:	a1 1d       	adc	r26, r1
     e1c:	62 1f       	adc	r22, r18
     e1e:	83 9f       	mul	r24, r19
     e20:	a0 0d       	add	r26, r0
     e22:	61 1d       	adc	r22, r1
     e24:	22 1f       	adc	r18, r18
     e26:	74 9f       	mul	r23, r20
     e28:	33 27       	eor	r19, r19
     e2a:	a0 0d       	add	r26, r0
     e2c:	61 1d       	adc	r22, r1
     e2e:	23 1f       	adc	r18, r19
     e30:	84 9f       	mul	r24, r20
     e32:	60 0d       	add	r22, r0
     e34:	21 1d       	adc	r18, r1
     e36:	82 2f       	mov	r24, r18
     e38:	76 2f       	mov	r23, r22
     e3a:	6a 2f       	mov	r22, r26
     e3c:	11 24       	eor	r1, r1
     e3e:	9f 57       	subi	r25, 0x7F	; 127
     e40:	50 40       	sbci	r21, 0x00	; 0
     e42:	9a f0       	brmi	.+38     	; 0xe6a <__mulsf3_pse+0x88>
     e44:	f1 f0       	breq	.+60     	; 0xe82 <__mulsf3_pse+0xa0>
     e46:	88 23       	and	r24, r24
     e48:	4a f0       	brmi	.+18     	; 0xe5c <__mulsf3_pse+0x7a>
     e4a:	ee 0f       	add	r30, r30
     e4c:	ff 1f       	adc	r31, r31
     e4e:	bb 1f       	adc	r27, r27
     e50:	66 1f       	adc	r22, r22
     e52:	77 1f       	adc	r23, r23
     e54:	88 1f       	adc	r24, r24
     e56:	91 50       	subi	r25, 0x01	; 1
     e58:	50 40       	sbci	r21, 0x00	; 0
     e5a:	a9 f7       	brne	.-22     	; 0xe46 <__mulsf3_pse+0x64>
     e5c:	9e 3f       	cpi	r25, 0xFE	; 254
     e5e:	51 05       	cpc	r21, r1
     e60:	80 f0       	brcs	.+32     	; 0xe82 <__mulsf3_pse+0xa0>
     e62:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
     e66:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
     e6a:	5f 3f       	cpi	r21, 0xFF	; 255
     e6c:	e4 f3       	brlt	.-8      	; 0xe66 <__mulsf3_pse+0x84>
     e6e:	98 3e       	cpi	r25, 0xE8	; 232
     e70:	d4 f3       	brlt	.-12     	; 0xe66 <__mulsf3_pse+0x84>
     e72:	86 95       	lsr	r24
     e74:	77 95       	ror	r23
     e76:	67 95       	ror	r22
     e78:	b7 95       	ror	r27
     e7a:	f7 95       	ror	r31
     e7c:	e7 95       	ror	r30
     e7e:	9f 5f       	subi	r25, 0xFF	; 255
     e80:	c1 f7       	brne	.-16     	; 0xe72 <__mulsf3_pse+0x90>
     e82:	fe 2b       	or	r31, r30
     e84:	88 0f       	add	r24, r24
     e86:	91 1d       	adc	r25, r1
     e88:	96 95       	lsr	r25
     e8a:	87 95       	ror	r24
     e8c:	97 f9       	bld	r25, 7
     e8e:	08 95       	ret

00000e90 <pow>:
     e90:	fa 01       	movw	r30, r20
     e92:	ee 0f       	add	r30, r30
     e94:	ff 1f       	adc	r31, r31
     e96:	30 96       	adiw	r30, 0x00	; 0
     e98:	21 05       	cpc	r18, r1
     e9a:	31 05       	cpc	r19, r1
     e9c:	a1 f1       	breq	.+104    	; 0xf06 <pow+0x76>
     e9e:	61 15       	cp	r22, r1
     ea0:	71 05       	cpc	r23, r1
     ea2:	61 f4       	brne	.+24     	; 0xebc <pow+0x2c>
     ea4:	80 38       	cpi	r24, 0x80	; 128
     ea6:	bf e3       	ldi	r27, 0x3F	; 63
     ea8:	9b 07       	cpc	r25, r27
     eaa:	49 f1       	breq	.+82     	; 0xefe <pow+0x6e>
     eac:	68 94       	set
     eae:	90 38       	cpi	r25, 0x80	; 128
     eb0:	81 05       	cpc	r24, r1
     eb2:	61 f0       	breq	.+24     	; 0xecc <pow+0x3c>
     eb4:	80 38       	cpi	r24, 0x80	; 128
     eb6:	bf ef       	ldi	r27, 0xFF	; 255
     eb8:	9b 07       	cpc	r25, r27
     eba:	41 f0       	breq	.+16     	; 0xecc <pow+0x3c>
     ebc:	99 23       	and	r25, r25
     ebe:	4a f5       	brpl	.+82     	; 0xf12 <pow+0x82>
     ec0:	ff 3f       	cpi	r31, 0xFF	; 255
     ec2:	e1 05       	cpc	r30, r1
     ec4:	31 05       	cpc	r19, r1
     ec6:	21 05       	cpc	r18, r1
     ec8:	19 f1       	breq	.+70     	; 0xf10 <pow+0x80>
     eca:	e8 94       	clt
     ecc:	08 94       	sec
     ece:	e7 95       	ror	r30
     ed0:	d9 01       	movw	r26, r18
     ed2:	aa 23       	and	r26, r26
     ed4:	29 f4       	brne	.+10     	; 0xee0 <pow+0x50>
     ed6:	ab 2f       	mov	r26, r27
     ed8:	be 2f       	mov	r27, r30
     eda:	f8 5f       	subi	r31, 0xF8	; 248
     edc:	d0 f3       	brcs	.-12     	; 0xed2 <pow+0x42>
     ede:	10 c0       	rjmp	.+32     	; 0xf00 <pow+0x70>
     ee0:	ff 5f       	subi	r31, 0xFF	; 255
     ee2:	70 f4       	brcc	.+28     	; 0xf00 <pow+0x70>
     ee4:	a6 95       	lsr	r26
     ee6:	e0 f7       	brcc	.-8      	; 0xee0 <pow+0x50>
     ee8:	f7 39       	cpi	r31, 0x97	; 151
     eea:	50 f0       	brcs	.+20     	; 0xf00 <pow+0x70>
     eec:	19 f0       	breq	.+6      	; 0xef4 <pow+0x64>
     eee:	ff 3a       	cpi	r31, 0xAF	; 175
     ef0:	38 f4       	brcc	.+14     	; 0xf00 <pow+0x70>
     ef2:	9f 77       	andi	r25, 0x7F	; 127
     ef4:	9f 93       	push	r25
     ef6:	0d d0       	rcall	.+26     	; 0xf12 <pow+0x82>
     ef8:	0f 90       	pop	r0
     efa:	07 fc       	sbrc	r0, 7
     efc:	90 58       	subi	r25, 0x80	; 128
     efe:	08 95       	ret
     f00:	46 f0       	brts	.+16     	; 0xf12 <pow+0x82>
     f02:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	70 e0       	ldi	r23, 0x00	; 0
     f0a:	80 e8       	ldi	r24, 0x80	; 128
     f0c:	9f e3       	ldi	r25, 0x3F	; 63
     f0e:	08 95       	ret
     f10:	4f e7       	ldi	r20, 0x7F	; 127
     f12:	9f 77       	andi	r25, 0x7F	; 127
     f14:	5f 93       	push	r21
     f16:	4f 93       	push	r20
     f18:	3f 93       	push	r19
     f1a:	2f 93       	push	r18
     f1c:	0e 94 8a 08 	call	0x1114	; 0x1114 <log>
     f20:	2f 91       	pop	r18
     f22:	3f 91       	pop	r19
     f24:	4f 91       	pop	r20
     f26:	5f 91       	pop	r21
     f28:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
     f2c:	0c 94 a8 07 	jmp	0xf50	; 0xf50 <exp>

00000f30 <sin>:
     f30:	9f 93       	push	r25
     f32:	0e 94 03 08 	call	0x1006	; 0x1006 <__fp_rempio2>
     f36:	0f 90       	pop	r0
     f38:	07 fc       	sbrc	r0, 7
     f3a:	ee 5f       	subi	r30, 0xFE	; 254
     f3c:	0c 94 2c 08 	jmp	0x1058	; 0x1058 <__fp_sinus>
     f40:	29 f4       	brne	.+10     	; 0xf4c <sin+0x1c>
     f42:	16 f0       	brts	.+4      	; 0xf48 <sin+0x18>
     f44:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
     f48:	0c 94 d4 06 	jmp	0xda8	; 0xda8 <__fp_zero>
     f4c:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>

00000f50 <exp>:
     f50:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
     f54:	a8 f3       	brcs	.-22     	; 0xf40 <sin+0x10>
     f56:	96 38       	cpi	r25, 0x86	; 134
     f58:	a0 f7       	brcc	.-24     	; 0xf42 <sin+0x12>
     f5a:	07 f8       	bld	r0, 7
     f5c:	0f 92       	push	r0
     f5e:	e8 94       	clt
     f60:	2b e3       	ldi	r18, 0x3B	; 59
     f62:	3a ea       	ldi	r19, 0xAA	; 170
     f64:	48 eb       	ldi	r20, 0xB8	; 184
     f66:	5f e7       	ldi	r21, 0x7F	; 127
     f68:	0e 94 f1 06 	call	0xde2	; 0xde2 <__mulsf3_pse>
     f6c:	0f 92       	push	r0
     f6e:	0f 92       	push	r0
     f70:	0f 92       	push	r0
     f72:	4d b7       	in	r20, 0x3d	; 61
     f74:	5e b7       	in	r21, 0x3e	; 62
     f76:	0f 92       	push	r0
     f78:	0e 94 d2 08 	call	0x11a4	; 0x11a4 <modf>
     f7c:	e8 e6       	ldi	r30, 0x68	; 104
     f7e:	f0 e0       	ldi	r31, 0x00	; 0
     f80:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_powser>
     f84:	4f 91       	pop	r20
     f86:	5f 91       	pop	r21
     f88:	ef 91       	pop	r30
     f8a:	ff 91       	pop	r31
     f8c:	e5 95       	asr	r30
     f8e:	ee 1f       	adc	r30, r30
     f90:	ff 1f       	adc	r31, r31
     f92:	49 f0       	breq	.+18     	; 0xfa6 <exp+0x56>
     f94:	fe 57       	subi	r31, 0x7E	; 126
     f96:	e0 68       	ori	r30, 0x80	; 128
     f98:	44 27       	eor	r20, r20
     f9a:	ee 0f       	add	r30, r30
     f9c:	44 1f       	adc	r20, r20
     f9e:	fa 95       	dec	r31
     fa0:	e1 f7       	brne	.-8      	; 0xf9a <exp+0x4a>
     fa2:	41 95       	neg	r20
     fa4:	55 0b       	sbc	r21, r21
     fa6:	0e 94 4c 08 	call	0x1098	; 0x1098 <ldexp>
     faa:	0f 90       	pop	r0
     fac:	07 fe       	sbrs	r0, 7
     fae:	0c 94 40 08 	jmp	0x1080	; 0x1080 <inverse>
     fb2:	08 95       	ret

00000fb4 <__fp_powser>:
     fb4:	df 93       	push	r29
     fb6:	cf 93       	push	r28
     fb8:	1f 93       	push	r17
     fba:	0f 93       	push	r16
     fbc:	ff 92       	push	r15
     fbe:	ef 92       	push	r14
     fc0:	df 92       	push	r13
     fc2:	7b 01       	movw	r14, r22
     fc4:	8c 01       	movw	r16, r24
     fc6:	68 94       	set
     fc8:	06 c0       	rjmp	.+12     	; 0xfd6 <__fp_powser+0x22>
     fca:	da 2e       	mov	r13, r26
     fcc:	ef 01       	movw	r28, r30
     fce:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3x>
     fd2:	fe 01       	movw	r30, r28
     fd4:	e8 94       	clt
     fd6:	a5 91       	lpm	r26, Z+
     fd8:	25 91       	lpm	r18, Z+
     fda:	35 91       	lpm	r19, Z+
     fdc:	45 91       	lpm	r20, Z+
     fde:	55 91       	lpm	r21, Z+
     fe0:	a6 f3       	brts	.-24     	; 0xfca <__fp_powser+0x16>
     fe2:	ef 01       	movw	r28, r30
     fe4:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
     fe8:	fe 01       	movw	r30, r28
     fea:	97 01       	movw	r18, r14
     fec:	a8 01       	movw	r20, r16
     fee:	da 94       	dec	r13
     ff0:	69 f7       	brne	.-38     	; 0xfcc <__fp_powser+0x18>
     ff2:	df 90       	pop	r13
     ff4:	ef 90       	pop	r14
     ff6:	ff 90       	pop	r15
     ff8:	0f 91       	pop	r16
     ffa:	1f 91       	pop	r17
     ffc:	cf 91       	pop	r28
     ffe:	df 91       	pop	r29
    1000:	08 95       	ret
    1002:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>

00001006 <__fp_rempio2>:
    1006:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
    100a:	d8 f3       	brcs	.-10     	; 0x1002 <__fp_powser+0x4e>
    100c:	e8 94       	clt
    100e:	e0 e0       	ldi	r30, 0x00	; 0
    1010:	bb 27       	eor	r27, r27
    1012:	9f 57       	subi	r25, 0x7F	; 127
    1014:	f0 f0       	brcs	.+60     	; 0x1052 <__fp_rempio2+0x4c>
    1016:	2a ed       	ldi	r18, 0xDA	; 218
    1018:	3f e0       	ldi	r19, 0x0F	; 15
    101a:	49 ec       	ldi	r20, 0xC9	; 201
    101c:	06 c0       	rjmp	.+12     	; 0x102a <__fp_rempio2+0x24>
    101e:	ee 0f       	add	r30, r30
    1020:	bb 0f       	add	r27, r27
    1022:	66 1f       	adc	r22, r22
    1024:	77 1f       	adc	r23, r23
    1026:	88 1f       	adc	r24, r24
    1028:	28 f0       	brcs	.+10     	; 0x1034 <__fp_rempio2+0x2e>
    102a:	b2 3a       	cpi	r27, 0xA2	; 162
    102c:	62 07       	cpc	r22, r18
    102e:	73 07       	cpc	r23, r19
    1030:	84 07       	cpc	r24, r20
    1032:	28 f0       	brcs	.+10     	; 0x103e <__fp_rempio2+0x38>
    1034:	b2 5a       	subi	r27, 0xA2	; 162
    1036:	62 0b       	sbc	r22, r18
    1038:	73 0b       	sbc	r23, r19
    103a:	84 0b       	sbc	r24, r20
    103c:	e3 95       	inc	r30
    103e:	9a 95       	dec	r25
    1040:	72 f7       	brpl	.-36     	; 0x101e <__fp_rempio2+0x18>
    1042:	80 38       	cpi	r24, 0x80	; 128
    1044:	30 f4       	brcc	.+12     	; 0x1052 <__fp_rempio2+0x4c>
    1046:	9a 95       	dec	r25
    1048:	bb 0f       	add	r27, r27
    104a:	66 1f       	adc	r22, r22
    104c:	77 1f       	adc	r23, r23
    104e:	88 1f       	adc	r24, r24
    1050:	d2 f7       	brpl	.-12     	; 0x1046 <__fp_rempio2+0x40>
    1052:	90 48       	sbci	r25, 0x80	; 128
    1054:	0c 94 84 06 	jmp	0xd08	; 0xd08 <__fp_mpack_finite>

00001058 <__fp_sinus>:
    1058:	ef 93       	push	r30
    105a:	e0 ff       	sbrs	r30, 0
    105c:	07 c0       	rjmp	.+14     	; 0x106c <__fp_sinus+0x14>
    105e:	a2 ea       	ldi	r26, 0xA2	; 162
    1060:	2a ed       	ldi	r18, 0xDA	; 218
    1062:	3f e0       	ldi	r19, 0x0F	; 15
    1064:	49 ec       	ldi	r20, 0xC9	; 201
    1066:	5f eb       	ldi	r21, 0xBF	; 191
    1068:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
    106c:	0e 94 a1 06 	call	0xd42	; 0xd42 <__fp_round>
    1070:	0f 90       	pop	r0
    1072:	03 94       	inc	r0
    1074:	01 fc       	sbrc	r0, 1
    1076:	90 58       	subi	r25, 0x80	; 128
    1078:	e0 e9       	ldi	r30, 0x90	; 144
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	0c 94 06 09 	jmp	0x120c	; 0x120c <__fp_powsodd>

00001080 <inverse>:
    1080:	9b 01       	movw	r18, r22
    1082:	ac 01       	movw	r20, r24
    1084:	60 e0       	ldi	r22, 0x00	; 0
    1086:	70 e0       	ldi	r23, 0x00	; 0
    1088:	80 e8       	ldi	r24, 0x80	; 128
    108a:	9f e3       	ldi	r25, 0x3F	; 63
    108c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__divsf3>
    1090:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>
    1094:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_mpack>

00001098 <ldexp>:
    1098:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
    109c:	d8 f3       	brcs	.-10     	; 0x1094 <inverse+0x14>
    109e:	99 23       	and	r25, r25
    10a0:	c9 f3       	breq	.-14     	; 0x1094 <inverse+0x14>
    10a2:	94 0f       	add	r25, r20
    10a4:	51 1d       	adc	r21, r1
    10a6:	a3 f3       	brvs	.-24     	; 0x1090 <inverse+0x10>
    10a8:	91 50       	subi	r25, 0x01	; 1
    10aa:	50 40       	sbci	r21, 0x00	; 0
    10ac:	94 f0       	brlt	.+36     	; 0x10d2 <ldexp+0x3a>
    10ae:	59 f0       	breq	.+22     	; 0x10c6 <ldexp+0x2e>
    10b0:	88 23       	and	r24, r24
    10b2:	32 f0       	brmi	.+12     	; 0x10c0 <ldexp+0x28>
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	88 1f       	adc	r24, r24
    10ba:	91 50       	subi	r25, 0x01	; 1
    10bc:	50 40       	sbci	r21, 0x00	; 0
    10be:	c1 f7       	brne	.-16     	; 0x10b0 <ldexp+0x18>
    10c0:	9e 3f       	cpi	r25, 0xFE	; 254
    10c2:	51 05       	cpc	r21, r1
    10c4:	2c f7       	brge	.-54     	; 0x1090 <inverse+0x10>
    10c6:	88 0f       	add	r24, r24
    10c8:	91 1d       	adc	r25, r1
    10ca:	96 95       	lsr	r25
    10cc:	87 95       	ror	r24
    10ce:	97 f9       	bld	r25, 7
    10d0:	08 95       	ret
    10d2:	5f 3f       	cpi	r21, 0xFF	; 255
    10d4:	ac f0       	brlt	.+42     	; 0x1100 <ldexp+0x68>
    10d6:	98 3e       	cpi	r25, 0xE8	; 232
    10d8:	9c f0       	brlt	.+38     	; 0x1100 <ldexp+0x68>
    10da:	bb 27       	eor	r27, r27
    10dc:	86 95       	lsr	r24
    10de:	77 95       	ror	r23
    10e0:	67 95       	ror	r22
    10e2:	b7 95       	ror	r27
    10e4:	08 f4       	brcc	.+2      	; 0x10e8 <ldexp+0x50>
    10e6:	b1 60       	ori	r27, 0x01	; 1
    10e8:	93 95       	inc	r25
    10ea:	c1 f7       	brne	.-16     	; 0x10dc <ldexp+0x44>
    10ec:	bb 0f       	add	r27, r27
    10ee:	58 f7       	brcc	.-42     	; 0x10c6 <ldexp+0x2e>
    10f0:	11 f4       	brne	.+4      	; 0x10f6 <ldexp+0x5e>
    10f2:	60 ff       	sbrs	r22, 0
    10f4:	e8 cf       	rjmp	.-48     	; 0x10c6 <ldexp+0x2e>
    10f6:	6f 5f       	subi	r22, 0xFF	; 255
    10f8:	7f 4f       	sbci	r23, 0xFF	; 255
    10fa:	8f 4f       	sbci	r24, 0xFF	; 255
    10fc:	9f 4f       	sbci	r25, 0xFF	; 255
    10fe:	e3 cf       	rjmp	.-58     	; 0x10c6 <ldexp+0x2e>
    1100:	0c 94 d5 06 	jmp	0xdaa	; 0xdaa <__fp_szero>
    1104:	16 f0       	brts	.+4      	; 0x110a <ldexp+0x72>
    1106:	0c 94 82 06 	jmp	0xd04	; 0xd04 <__fp_mpack>
    110a:	0c 94 90 06 	jmp	0xd20	; 0xd20 <__fp_nan>
    110e:	68 94       	set
    1110:	0c 94 7c 06 	jmp	0xcf8	; 0xcf8 <__fp_inf>

00001114 <log>:
    1114:	0e 94 ba 06 	call	0xd74	; 0xd74 <__fp_splitA>
    1118:	a8 f3       	brcs	.-22     	; 0x1104 <ldexp+0x6c>
    111a:	99 23       	and	r25, r25
    111c:	c1 f3       	breq	.-16     	; 0x110e <ldexp+0x76>
    111e:	ae f3       	brts	.-22     	; 0x110a <ldexp+0x72>
    1120:	df 93       	push	r29
    1122:	cf 93       	push	r28
    1124:	1f 93       	push	r17
    1126:	0f 93       	push	r16
    1128:	ff 92       	push	r15
    112a:	c9 2f       	mov	r28, r25
    112c:	dd 27       	eor	r29, r29
    112e:	88 23       	and	r24, r24
    1130:	2a f0       	brmi	.+10     	; 0x113c <log+0x28>
    1132:	21 97       	sbiw	r28, 0x01	; 1
    1134:	66 0f       	add	r22, r22
    1136:	77 1f       	adc	r23, r23
    1138:	88 1f       	adc	r24, r24
    113a:	da f7       	brpl	.-10     	; 0x1132 <log+0x1e>
    113c:	20 e0       	ldi	r18, 0x00	; 0
    113e:	30 e0       	ldi	r19, 0x00	; 0
    1140:	40 e8       	ldi	r20, 0x80	; 128
    1142:	5f eb       	ldi	r21, 0xBF	; 191
    1144:	9f e3       	ldi	r25, 0x3F	; 63
    1146:	88 39       	cpi	r24, 0x98	; 152
    1148:	20 f0       	brcs	.+8      	; 0x1152 <log+0x3e>
    114a:	80 3e       	cpi	r24, 0xE0	; 224
    114c:	38 f0       	brcs	.+14     	; 0x115c <log+0x48>
    114e:	21 96       	adiw	r28, 0x01	; 1
    1150:	8f 77       	andi	r24, 0x7F	; 127
    1152:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
    1156:	ee ea       	ldi	r30, 0xAE	; 174
    1158:	f0 e0       	ldi	r31, 0x00	; 0
    115a:	04 c0       	rjmp	.+8      	; 0x1164 <log+0x50>
    115c:	0e 94 d7 04 	call	0x9ae	; 0x9ae <__addsf3>
    1160:	eb ed       	ldi	r30, 0xDB	; 219
    1162:	f0 e0       	ldi	r31, 0x00	; 0
    1164:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_powser>
    1168:	8b 01       	movw	r16, r22
    116a:	be 01       	movw	r22, r28
    116c:	ec 01       	movw	r28, r24
    116e:	fb 2e       	mov	r15, r27
    1170:	6f 57       	subi	r22, 0x7F	; 127
    1172:	71 09       	sbc	r23, r1
    1174:	75 95       	asr	r23
    1176:	77 1f       	adc	r23, r23
    1178:	88 0b       	sbc	r24, r24
    117a:	99 0b       	sbc	r25, r25
    117c:	0e 94 ed 05 	call	0xbda	; 0xbda <__floatsisf>
    1180:	28 e1       	ldi	r18, 0x18	; 24
    1182:	32 e7       	ldi	r19, 0x72	; 114
    1184:	41 e3       	ldi	r20, 0x31	; 49
    1186:	5f e3       	ldi	r21, 0x3F	; 63
    1188:	0e 94 ee 06 	call	0xddc	; 0xddc <__mulsf3x>
    118c:	af 2d       	mov	r26, r15
    118e:	98 01       	movw	r18, r16
    1190:	ae 01       	movw	r20, r28
    1192:	ff 90       	pop	r15
    1194:	0f 91       	pop	r16
    1196:	1f 91       	pop	r17
    1198:	cf 91       	pop	r28
    119a:	df 91       	pop	r29
    119c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <__addsf3x>
    11a0:	0c 94 a1 06 	jmp	0xd42	; 0xd42 <__fp_round>

000011a4 <modf>:
    11a4:	fa 01       	movw	r30, r20
    11a6:	dc 01       	movw	r26, r24
    11a8:	aa 0f       	add	r26, r26
    11aa:	bb 1f       	adc	r27, r27
    11ac:	9b 01       	movw	r18, r22
    11ae:	ac 01       	movw	r20, r24
    11b0:	bf 57       	subi	r27, 0x7F	; 127
    11b2:	28 f4       	brcc	.+10     	; 0x11be <modf+0x1a>
    11b4:	22 27       	eor	r18, r18
    11b6:	33 27       	eor	r19, r19
    11b8:	44 27       	eor	r20, r20
    11ba:	50 78       	andi	r21, 0x80	; 128
    11bc:	20 c0       	rjmp	.+64     	; 0x11fe <modf+0x5a>
    11be:	b7 51       	subi	r27, 0x17	; 23
    11c0:	90 f4       	brcc	.+36     	; 0x11e6 <modf+0x42>
    11c2:	ab 2f       	mov	r26, r27
    11c4:	00 24       	eor	r0, r0
    11c6:	46 95       	lsr	r20
    11c8:	37 95       	ror	r19
    11ca:	27 95       	ror	r18
    11cc:	01 1c       	adc	r0, r1
    11ce:	a3 95       	inc	r26
    11d0:	d2 f3       	brmi	.-12     	; 0x11c6 <modf+0x22>
    11d2:	00 20       	and	r0, r0
    11d4:	71 f0       	breq	.+28     	; 0x11f2 <modf+0x4e>
    11d6:	22 0f       	add	r18, r18
    11d8:	33 1f       	adc	r19, r19
    11da:	44 1f       	adc	r20, r20
    11dc:	b3 95       	inc	r27
    11de:	da f3       	brmi	.-10     	; 0x11d6 <modf+0x32>
    11e0:	0e d0       	rcall	.+28     	; 0x11fe <modf+0x5a>
    11e2:	0c 94 d6 04 	jmp	0x9ac	; 0x9ac <__subsf3>
    11e6:	61 30       	cpi	r22, 0x01	; 1
    11e8:	71 05       	cpc	r23, r1
    11ea:	a0 e8       	ldi	r26, 0x80	; 128
    11ec:	8a 07       	cpc	r24, r26
    11ee:	b9 46       	sbci	r27, 0x69	; 105
    11f0:	30 f4       	brcc	.+12     	; 0x11fe <modf+0x5a>
    11f2:	9b 01       	movw	r18, r22
    11f4:	ac 01       	movw	r20, r24
    11f6:	66 27       	eor	r22, r22
    11f8:	77 27       	eor	r23, r23
    11fa:	88 27       	eor	r24, r24
    11fc:	90 78       	andi	r25, 0x80	; 128
    11fe:	30 96       	adiw	r30, 0x00	; 0
    1200:	21 f0       	breq	.+8      	; 0x120a <modf+0x66>
    1202:	20 83       	st	Z, r18
    1204:	31 83       	std	Z+1, r19	; 0x01
    1206:	42 83       	std	Z+2, r20	; 0x02
    1208:	53 83       	std	Z+3, r21	; 0x03
    120a:	08 95       	ret

0000120c <__fp_powsodd>:
    120c:	9f 93       	push	r25
    120e:	8f 93       	push	r24
    1210:	7f 93       	push	r23
    1212:	6f 93       	push	r22
    1214:	ff 93       	push	r31
    1216:	ef 93       	push	r30
    1218:	9b 01       	movw	r18, r22
    121a:	ac 01       	movw	r20, r24
    121c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <__mulsf3>
    1220:	ef 91       	pop	r30
    1222:	ff 91       	pop	r31
    1224:	0e 94 da 07 	call	0xfb4	; 0xfb4 <__fp_powser>
    1228:	2f 91       	pop	r18
    122a:	3f 91       	pop	r19
    122c:	4f 91       	pop	r20
    122e:	5f 91       	pop	r21
    1230:	0c 94 db 06 	jmp	0xdb6	; 0xdb6 <__mulsf3>

00001234 <__udivmodhi4>:
    1234:	aa 1b       	sub	r26, r26
    1236:	bb 1b       	sub	r27, r27
    1238:	51 e1       	ldi	r21, 0x11	; 17
    123a:	07 c0       	rjmp	.+14     	; 0x124a <__udivmodhi4_ep>

0000123c <__udivmodhi4_loop>:
    123c:	aa 1f       	adc	r26, r26
    123e:	bb 1f       	adc	r27, r27
    1240:	a6 17       	cp	r26, r22
    1242:	b7 07       	cpc	r27, r23
    1244:	10 f0       	brcs	.+4      	; 0x124a <__udivmodhi4_ep>
    1246:	a6 1b       	sub	r26, r22
    1248:	b7 0b       	sbc	r27, r23

0000124a <__udivmodhi4_ep>:
    124a:	88 1f       	adc	r24, r24
    124c:	99 1f       	adc	r25, r25
    124e:	5a 95       	dec	r21
    1250:	a9 f7       	brne	.-22     	; 0x123c <__udivmodhi4_loop>
    1252:	80 95       	com	r24
    1254:	90 95       	com	r25
    1256:	bc 01       	movw	r22, r24
    1258:	cd 01       	movw	r24, r26
    125a:	08 95       	ret

0000125c <__itoa_ncheck>:
    125c:	bb 27       	eor	r27, r27
    125e:	4a 30       	cpi	r20, 0x0A	; 10
    1260:	31 f4       	brne	.+12     	; 0x126e <__itoa_ncheck+0x12>
    1262:	99 23       	and	r25, r25
    1264:	22 f4       	brpl	.+8      	; 0x126e <__itoa_ncheck+0x12>
    1266:	bd e2       	ldi	r27, 0x2D	; 45
    1268:	90 95       	com	r25
    126a:	81 95       	neg	r24
    126c:	9f 4f       	sbci	r25, 0xFF	; 255
    126e:	0c 94 3a 09 	jmp	0x1274	; 0x1274 <__utoa_common>

00001272 <__utoa_ncheck>:
    1272:	bb 27       	eor	r27, r27

00001274 <__utoa_common>:
    1274:	fb 01       	movw	r30, r22
    1276:	55 27       	eor	r21, r21
    1278:	aa 27       	eor	r26, r26
    127a:	88 0f       	add	r24, r24
    127c:	99 1f       	adc	r25, r25
    127e:	aa 1f       	adc	r26, r26
    1280:	a4 17       	cp	r26, r20
    1282:	10 f0       	brcs	.+4      	; 0x1288 <__utoa_common+0x14>
    1284:	a4 1b       	sub	r26, r20
    1286:	83 95       	inc	r24
    1288:	50 51       	subi	r21, 0x10	; 16
    128a:	b9 f7       	brne	.-18     	; 0x127a <__utoa_common+0x6>
    128c:	a0 5d       	subi	r26, 0xD0	; 208
    128e:	aa 33       	cpi	r26, 0x3A	; 58
    1290:	08 f0       	brcs	.+2      	; 0x1294 <__utoa_common+0x20>
    1292:	a9 5d       	subi	r26, 0xD9	; 217
    1294:	a1 93       	st	Z+, r26
    1296:	00 97       	sbiw	r24, 0x00	; 0
    1298:	79 f7       	brne	.-34     	; 0x1278 <__utoa_common+0x4>
    129a:	b1 11       	cpse	r27, r1
    129c:	b1 93       	st	Z+, r27
    129e:	11 92       	st	Z+, r1
    12a0:	cb 01       	movw	r24, r22
    12a2:	0c 94 53 09 	jmp	0x12a6	; 0x12a6 <strrev>

000012a6 <strrev>:
    12a6:	dc 01       	movw	r26, r24
    12a8:	fc 01       	movw	r30, r24
    12aa:	67 2f       	mov	r22, r23
    12ac:	71 91       	ld	r23, Z+
    12ae:	77 23       	and	r23, r23
    12b0:	e1 f7       	brne	.-8      	; 0x12aa <strrev+0x4>
    12b2:	32 97       	sbiw	r30, 0x02	; 2
    12b4:	04 c0       	rjmp	.+8      	; 0x12be <strrev+0x18>
    12b6:	7c 91       	ld	r23, X
    12b8:	6d 93       	st	X+, r22
    12ba:	70 83       	st	Z, r23
    12bc:	62 91       	ld	r22, -Z
    12be:	ae 17       	cp	r26, r30
    12c0:	bf 07       	cpc	r27, r31
    12c2:	c8 f3       	brcs	.-14     	; 0x12b6 <strrev+0x10>
    12c4:	08 95       	ret

000012c6 <_exit>:
    12c6:	f8 94       	cli

000012c8 <__stop_program>:
    12c8:	ff cf       	rjmp	.-2      	; 0x12c8 <__stop_program>
