
DAC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000050  00800100  000011c4  00001258  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000011c4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004d  00800150  00800150  000012a8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000012a8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000012d8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000170  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001e09  00000000  00000000  00001488  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c16  00000000  00000000  00003291  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e96  00000000  00000000  00003ea7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000444  00000000  00000000  00004d40  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000066a  00000000  00000000  00005184  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000fb3  00000000  00000000  000057ee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000160  00000000  00000000  000067a1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 43 00 	jmp	0x86	; 0x86 <__ctors_end>
       4:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       8:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
       c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      10:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      14:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      18:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      1c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      20:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      24:	0c 94 61 03 	jmp	0x6c2	; 0x6c2 <__vector_9>
      28:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      2c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      30:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      34:	0c 94 1b 03 	jmp	0x636	; 0x636 <__vector_13>
      38:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      3c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      40:	0c 94 30 03 	jmp	0x660	; 0x660 <__vector_16>
      44:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      48:	0c 94 22 05 	jmp	0xa44	; 0xa44 <__vector_18>
      4c:	0c 94 50 05 	jmp	0xaa0	; 0xaa0 <__vector_19>
      50:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      54:	0c 94 ae 03 	jmp	0x75c	; 0x75c <__vector_21>
      58:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      5c:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      60:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      64:	0c 94 60 00 	jmp	0xc0	; 0xc0 <__bad_interrupt>
      68:	05 a8       	ldd	r0, Z+53	; 0x35
      6a:	4c cd       	rjmp	.-1384   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
      6c:	b2 d4       	rcall	.+2404   	; 0x9d2 <__stack+0xd3>
      6e:	4e b9       	out	0x0e, r20	; 14
      70:	38 36       	cpi	r19, 0x68	; 104
      72:	a9 02       	muls	r26, r25
      74:	0c 50       	subi	r16, 0x0C	; 12
      76:	b9 91       	ld	r27, Y+
      78:	86 88       	ldd	r8, Z+22	; 0x16
      7a:	08 3c       	cpi	r16, 0xC8	; 200
      7c:	a6 aa       	std	Z+54, r10	; 0x36
      7e:	aa 2a       	or	r10, r26
      80:	be 00       	.word	0x00be	; ????
      82:	00 00       	nop
      84:	80 3f       	cpi	r24, 0xF0	; 240

00000086 <__ctors_end>:
      86:	11 24       	eor	r1, r1
      88:	1f be       	out	0x3f, r1	; 63
      8a:	cf ef       	ldi	r28, 0xFF	; 255
      8c:	d8 e0       	ldi	r29, 0x08	; 8
      8e:	de bf       	out	0x3e, r29	; 62
      90:	cd bf       	out	0x3d, r28	; 61

00000092 <__do_copy_data>:
      92:	11 e0       	ldi	r17, 0x01	; 1
      94:	a0 e0       	ldi	r26, 0x00	; 0
      96:	b1 e0       	ldi	r27, 0x01	; 1
      98:	e4 ec       	ldi	r30, 0xC4	; 196
      9a:	f1 e1       	ldi	r31, 0x11	; 17
      9c:	02 c0       	rjmp	.+4      	; 0xa2 <__do_copy_data+0x10>
      9e:	05 90       	lpm	r0, Z+
      a0:	0d 92       	st	X+, r0
      a2:	a0 35       	cpi	r26, 0x50	; 80
      a4:	b1 07       	cpc	r27, r17
      a6:	d9 f7       	brne	.-10     	; 0x9e <__do_copy_data+0xc>

000000a8 <__do_clear_bss>:
      a8:	21 e0       	ldi	r18, 0x01	; 1
      aa:	a0 e5       	ldi	r26, 0x50	; 80
      ac:	b1 e0       	ldi	r27, 0x01	; 1
      ae:	01 c0       	rjmp	.+2      	; 0xb2 <.do_clear_bss_start>

000000b0 <.do_clear_bss_loop>:
      b0:	1d 92       	st	X+, r1

000000b2 <.do_clear_bss_start>:
      b2:	ad 39       	cpi	r26, 0x9D	; 157
      b4:	b2 07       	cpc	r27, r18
      b6:	e1 f7       	brne	.-8      	; 0xb0 <.do_clear_bss_loop>
      b8:	0e 94 91 02 	call	0x522	; 0x522 <main>
      bc:	0c 94 e0 08 	jmp	0x11c0	; 0x11c0 <_exit>

000000c0 <__bad_interrupt>:
      c0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000c4 <GPIO_config_output>:
/*--------------------------------------------------------------------*/
void GPIO_config_input_pullup(volatile uint8_t *reg_name, uint8_t pin_num)
{
    *reg_name = *reg_name & ~(1<<pin_num);  // Data Direction Register
    *reg_name++;                    // Change pointer to Data Register
    *reg_name = *reg_name | (1<<pin_num);   // Data Register
      c4:	fc 01       	movw	r30, r24
      c6:	40 81       	ld	r20, Z
      c8:	21 e0       	ldi	r18, 0x01	; 1
      ca:	30 e0       	ldi	r19, 0x00	; 0
      cc:	02 c0       	rjmp	.+4      	; 0xd2 <GPIO_config_output+0xe>
      ce:	22 0f       	add	r18, r18
      d0:	33 1f       	adc	r19, r19
      d2:	6a 95       	dec	r22
      d4:	e2 f7       	brpl	.-8      	; 0xce <GPIO_config_output+0xa>
      d6:	24 2b       	or	r18, r20
      d8:	20 83       	st	Z, r18
      da:	08 95       	ret

000000dc <GPIO_write_low>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_low(volatile uint8_t *reg_name, uint8_t pin_num)
{
      dc:	fc 01       	movw	r30, r24
    *reg_name = *reg_name & ~(1<<pin_num);
      de:	90 81       	ld	r25, Z
      e0:	21 e0       	ldi	r18, 0x01	; 1
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	02 c0       	rjmp	.+4      	; 0xea <GPIO_write_low+0xe>
      e6:	22 0f       	add	r18, r18
      e8:	33 1f       	adc	r19, r19
      ea:	6a 95       	dec	r22
      ec:	e2 f7       	brpl	.-8      	; 0xe6 <GPIO_write_low+0xa>
      ee:	20 95       	com	r18
      f0:	29 23       	and	r18, r25
      f2:	20 83       	st	Z, r18
      f4:	08 95       	ret

000000f6 <GPIO_write_high>:
}

/*--------------------------------------------------------------------*/
void GPIO_write_high(volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name | (1<<pin_num);
      f6:	fc 01       	movw	r30, r24
      f8:	40 81       	ld	r20, Z
      fa:	21 e0       	ldi	r18, 0x01	; 1
      fc:	30 e0       	ldi	r19, 0x00	; 0
      fe:	02 c0       	rjmp	.+4      	; 0x104 <GPIO_write_high+0xe>
     100:	22 0f       	add	r18, r18
     102:	33 1f       	adc	r19, r19
     104:	6a 95       	dec	r22
     106:	e2 f7       	brpl	.-8      	; 0x100 <GPIO_write_high+0xa>
     108:	24 2b       	or	r18, r20
     10a:	20 83       	st	Z, r18
     10c:	08 95       	ret

0000010e <GPIO_toggle>:
}

/*--------------------------------------------------------------------*/
 void GPIO_toggle (volatile uint8_t *reg_name, uint8_t pin_num) 
{
	*reg_name = *reg_name ^ (1<<pin_num);
     10e:	fc 01       	movw	r30, r24
     110:	40 81       	ld	r20, Z
     112:	21 e0       	ldi	r18, 0x01	; 1
     114:	30 e0       	ldi	r19, 0x00	; 0
     116:	02 c0       	rjmp	.+4      	; 0x11c <GPIO_toggle+0xe>
     118:	22 0f       	add	r18, r18
     11a:	33 1f       	adc	r19, r19
     11c:	6a 95       	dec	r22
     11e:	e2 f7       	brpl	.-8      	; 0x118 <GPIO_toggle+0xa>
     120:	24 27       	eor	r18, r20
     122:	20 83       	st	Z, r18
     124:	08 95       	ret

00000126 <toggle_e>:

    while ( (c = pgm_read_byte(progmem_s++)) )
    {
        lcd_putc(c);
    }
}/* lcd_puts_p */
     126:	29 9a       	sbi	0x05, 1	; 5
     128:	85 e0       	ldi	r24, 0x05	; 5
     12a:	8a 95       	dec	r24
     12c:	f1 f7       	brne	.-4      	; 0x12a <toggle_e+0x4>
     12e:	00 00       	nop
     130:	29 98       	cbi	0x05, 1	; 5
     132:	08 95       	ret

00000134 <lcd_write>:
     134:	cf 93       	push	r28
     136:	c8 2f       	mov	r28, r24
     138:	66 23       	and	r22, r22
     13a:	11 f0       	breq	.+4      	; 0x140 <lcd_write+0xc>
     13c:	28 9a       	sbi	0x05, 0	; 5
     13e:	01 c0       	rjmp	.+2      	; 0x142 <lcd_write+0xe>
     140:	28 98       	cbi	0x05, 0	; 5
     142:	54 9a       	sbi	0x0a, 4	; 10
     144:	55 9a       	sbi	0x0a, 5	; 10
     146:	56 9a       	sbi	0x0a, 6	; 10
     148:	57 9a       	sbi	0x0a, 7	; 10
     14a:	5f 98       	cbi	0x0b, 7	; 11
     14c:	5e 98       	cbi	0x0b, 6	; 11
     14e:	5d 98       	cbi	0x0b, 5	; 11
     150:	5c 98       	cbi	0x0b, 4	; 11
     152:	cc 23       	and	r28, r28
     154:	0c f4       	brge	.+2      	; 0x158 <lcd_write+0x24>
     156:	5f 9a       	sbi	0x0b, 7	; 11
     158:	c6 fd       	sbrc	r28, 6
     15a:	5e 9a       	sbi	0x0b, 6	; 11
     15c:	c5 fd       	sbrc	r28, 5
     15e:	5d 9a       	sbi	0x0b, 5	; 11
     160:	c4 fd       	sbrc	r28, 4
     162:	5c 9a       	sbi	0x0b, 4	; 11
     164:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     168:	5f 98       	cbi	0x0b, 7	; 11
     16a:	5e 98       	cbi	0x0b, 6	; 11
     16c:	5d 98       	cbi	0x0b, 5	; 11
     16e:	5c 98       	cbi	0x0b, 4	; 11
     170:	c3 fd       	sbrc	r28, 3
     172:	5f 9a       	sbi	0x0b, 7	; 11
     174:	c2 fd       	sbrc	r28, 2
     176:	5e 9a       	sbi	0x0b, 6	; 11
     178:	c1 fd       	sbrc	r28, 1
     17a:	5d 9a       	sbi	0x0b, 5	; 11
     17c:	c0 fd       	sbrc	r28, 0
     17e:	5c 9a       	sbi	0x0b, 4	; 11
     180:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     184:	5c 9a       	sbi	0x0b, 4	; 11
     186:	5d 9a       	sbi	0x0b, 5	; 11
     188:	5e 9a       	sbi	0x0b, 6	; 11
     18a:	5f 9a       	sbi	0x0b, 7	; 11
     18c:	87 eb       	ldi	r24, 0xB7	; 183
     18e:	9b e0       	ldi	r25, 0x0B	; 11
     190:	01 97       	sbiw	r24, 0x01	; 1
     192:	f1 f7       	brne	.-4      	; 0x190 <lcd_write+0x5c>
     194:	00 c0       	rjmp	.+0      	; 0x196 <lcd_write+0x62>
     196:	00 00       	nop
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <lcd_command>:
     19c:	60 e0       	ldi	r22, 0x00	; 0
     19e:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
     1a2:	08 95       	ret

000001a4 <lcd_gotoxy>:
     1a4:	61 11       	cpse	r22, r1
     1a6:	04 c0       	rjmp	.+8      	; 0x1b0 <lcd_gotoxy+0xc>
     1a8:	80 58       	subi	r24, 0x80	; 128
     1aa:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
     1ae:	08 95       	ret
     1b0:	80 54       	subi	r24, 0x40	; 64
     1b2:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
     1b6:	08 95       	ret

000001b8 <lcd_clrscr>:
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
     1be:	08 95       	ret

000001c0 <lcd_putc>:
     1c0:	61 e0       	ldi	r22, 0x01	; 1
     1c2:	0e 94 9a 00 	call	0x134	; 0x134 <lcd_write>
     1c6:	08 95       	ret

000001c8 <lcd_puts>:
     1c8:	cf 93       	push	r28
     1ca:	df 93       	push	r29
     1cc:	ec 01       	movw	r28, r24
     1ce:	21 96       	adiw	r28, 0x01	; 1
     1d0:	fc 01       	movw	r30, r24
     1d2:	80 81       	ld	r24, Z
     1d4:	88 23       	and	r24, r24
     1d6:	29 f0       	breq	.+10     	; 0x1e2 <lcd_puts+0x1a>
     1d8:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <lcd_putc>
     1dc:	89 91       	ld	r24, Y+
     1de:	81 11       	cpse	r24, r1
     1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <lcd_puts+0x10>
     1e2:	df 91       	pop	r29
     1e4:	cf 91       	pop	r28
     1e6:	08 95       	ret

000001e8 <lcd_init>:
*                  LCD_DISP_ON_CURSOR      display on, cursor on
*                  LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
*  Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
     1e8:	cf 93       	push	r28
     1ea:	c8 2f       	mov	r28, r24
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
    }
    else
    {
        /* configure all port bits as output (LCD data and control lines on different ports */
        DDR(LCD_RS_PORT)    |= _BV(LCD_RS_PIN);
     1ec:	20 9a       	sbi	0x04, 0	; 4
        DDR(LCD_RW_PORT)    |= _BV(LCD_RW_PIN);
     1ee:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_E_PORT)     |= _BV(LCD_E_PIN);
     1f0:	21 9a       	sbi	0x04, 1	; 4
        DDR(LCD_DATA0_PORT) |= _BV(LCD_DATA0_PIN);
     1f2:	54 9a       	sbi	0x0a, 4	; 10
        DDR(LCD_DATA1_PORT) |= _BV(LCD_DATA1_PIN);
     1f4:	55 9a       	sbi	0x0a, 5	; 10
        DDR(LCD_DATA2_PORT) |= _BV(LCD_DATA2_PIN);
     1f6:	56 9a       	sbi	0x0a, 6	; 10
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
     1f8:	57 9a       	sbi	0x0a, 7	; 10
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     1fa:	8f ef       	ldi	r24, 0xFF	; 255
     1fc:	99 ef       	ldi	r25, 0xF9	; 249
     1fe:	01 97       	sbiw	r24, 0x01	; 1
     200:	f1 f7       	brne	.-4      	; 0x1fe <lcd_init+0x16>
     202:	00 c0       	rjmp	.+0      	; 0x204 <lcd_init+0x1c>
     204:	00 00       	nop
    }
    delay(LCD_DELAY_BOOTUP); /* wait 16ms or more after power-on       */

    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN); // LCD_FUNCTION>>4;
     206:	5d 9a       	sbi	0x0b, 5	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN); // LCD_FUNCTION_8BIT>>4;
     208:	5c 9a       	sbi	0x0b, 4	; 11
    lcd_e_toggle();
     20a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     20e:	8f e1       	ldi	r24, 0x1F	; 31
     210:	9e e4       	ldi	r25, 0x4E	; 78
     212:	01 97       	sbiw	r24, 0x01	; 1
     214:	f1 f7       	brne	.-4      	; 0x212 <lcd_init+0x2a>
     216:	00 c0       	rjmp	.+0      	; 0x218 <lcd_init+0x30>
     218:	00 00       	nop
    delay(LCD_DELAY_INIT); /* delay, busy flag can't be checked here */

    /* repeat last command */
    lcd_e_toggle();
     21a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     21e:	8f ef       	ldi	r24, 0xFF	; 255
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	01 97       	sbiw	r24, 0x01	; 1
     224:	f1 f7       	brne	.-4      	; 0x222 <lcd_init+0x3a>
     226:	00 c0       	rjmp	.+0      	; 0x228 <lcd_init+0x40>
     228:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* repeat last command a third time */
    lcd_e_toggle();
     22a:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     22e:	8f ef       	ldi	r24, 0xFF	; 255
     230:	90 e0       	ldi	r25, 0x00	; 0
     232:	01 97       	sbiw	r24, 0x01	; 1
     234:	f1 f7       	brne	.-4      	; 0x232 <lcd_init+0x4a>
     236:	00 c0       	rjmp	.+0      	; 0x238 <lcd_init+0x50>
     238:	00 00       	nop
    delay(LCD_DELAY_INIT_REP); /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN); // LCD_FUNCTION_4BIT_1LINE>>4
     23a:	5c 98       	cbi	0x0b, 4	; 11
    lcd_e_toggle();
     23c:	0e 94 93 00 	call	0x126	; 0x126 <toggle_e>
     240:	8f ef       	ldi	r24, 0xFF	; 255
     242:	90 e0       	ldi	r25, 0x00	; 0
     244:	01 97       	sbiw	r24, 0x01	; 1
     246:	f1 f7       	brne	.-4      	; 0x244 <lcd_init+0x5c>
     248:	00 c0       	rjmp	.+0      	; 0x24a <lcd_init+0x62>
     24a:	00 00       	nop
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
    lcd_command(KS0073_4LINES_MODE);
    lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
    #else
    lcd_command(LCD_FUNCTION_DEFAULT); /* function set: display lines  */
     24c:	88 e2       	ldi	r24, 0x28	; 40
     24e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    #endif
    lcd_command(LCD_DISP_OFF);     /* display off                  */
     252:	88 e0       	ldi	r24, 0x08	; 8
     254:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_clrscr();                  /* display clear                */
     258:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT); /* set entry mode               */
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
    lcd_command(dispAttr);         /* display/cursor control       */
     262:	8c 2f       	mov	r24, r28
     264:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_command>
}/* lcd_init */
     268:	cf 91       	pop	r28
     26a:	08 95       	ret

0000026c <fce>:
 * and start ADC conversion four times per second. Send value to LCD
 * and UART.
 */

//function for generating signals values
unsigned int fce(unsigned int i ) {
     26c:	4f 92       	push	r4
     26e:	5f 92       	push	r5
     270:	6f 92       	push	r6
     272:	7f 92       	push	r7
     274:	8f 92       	push	r8
     276:	9f 92       	push	r9
     278:	af 92       	push	r10
     27a:	bf 92       	push	r11
     27c:	cf 92       	push	r12
     27e:	df 92       	push	r13
     280:	ef 92       	push	r14
     282:	ff 92       	push	r15
     284:	bc 01       	movw	r22, r24
	
	if(fceType==0) 
     286:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
     28a:	91 11       	cpse	r25, r1
     28c:	37 c0       	rjmp	.+110    	; 0x2fc <fce+0x90>
		return (unsigned int)(255*(1 + sin(i * 6.28 * Tvz/T))/2); //returns sin values
     28e:	80 e0       	ldi	r24, 0x00	; 0
     290:	90 e0       	ldi	r25, 0x00	; 0
     292:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     296:	23 ec       	ldi	r18, 0xC3	; 195
     298:	35 ef       	ldi	r19, 0xF5	; 245
     29a:	48 ec       	ldi	r20, 0xC8	; 200
     29c:	50 e4       	ldi	r21, 0x40	; 64
     29e:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     2a2:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     2a6:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     2aa:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     2ae:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     2b2:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     2b6:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <T>
     2ba:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <T+0x1>
     2be:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <T+0x2>
     2c2:	50 91 08 01 	lds	r21, 0x0108	; 0x800108 <T+0x3>
     2c6:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     2ca:	0e 94 29 08 	call	0x1052	; 0x1052 <sin>
     2ce:	20 e0       	ldi	r18, 0x00	; 0
     2d0:	30 e0       	ldi	r19, 0x00	; 0
     2d2:	40 e8       	ldi	r20, 0x80	; 128
     2d4:	5f e3       	ldi	r21, 0x3F	; 63
     2d6:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     2da:	20 e0       	ldi	r18, 0x00	; 0
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	4f e7       	ldi	r20, 0x7F	; 127
     2e0:	53 e4       	ldi	r21, 0x43	; 67
     2e2:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     2e6:	20 e0       	ldi	r18, 0x00	; 0
     2e8:	30 e0       	ldi	r19, 0x00	; 0
     2ea:	40 e0       	ldi	r20, 0x00	; 0
     2ec:	5f e3       	ldi	r21, 0x3F	; 63
     2ee:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     2f2:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
     2f6:	26 2f       	mov	r18, r22
     2f8:	97 2f       	mov	r25, r23
     2fa:	89 c0       	rjmp	.+274    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	else if(fceType==1)
     2fc:	91 30       	cpi	r25, 0x01	; 1
     2fe:	49 f5       	brne	.+82     	; 0x352 <fce+0xe6>
		return (unsigned int)(255 * fmod(i*Tvz,T)/T);			  //returns saw values
     300:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     304:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     308:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     30c:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
     310:	80 e0       	ldi	r24, 0x00	; 0
     312:	90 e0       	ldi	r25, 0x00	; 0
     314:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     318:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     31c:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     320:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     324:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     328:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     32c:	a7 01       	movw	r20, r14
     32e:	96 01       	movw	r18, r12
     330:	0e 94 14 07 	call	0xe28	; 0xe28 <fmod>
     334:	20 e0       	ldi	r18, 0x00	; 0
     336:	30 e0       	ldi	r19, 0x00	; 0
     338:	4f e7       	ldi	r20, 0x7F	; 127
     33a:	53 e4       	ldi	r21, 0x43	; 67
     33c:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     340:	a7 01       	movw	r20, r14
     342:	96 01       	movw	r18, r12
     344:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     348:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
     34c:	26 2f       	mov	r18, r22
     34e:	97 2f       	mov	r25, r23
     350:	5e c0       	rjmp	.+188    	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	else if(fceType==2) {										  //returns triangle values
     352:	92 30       	cpi	r25, 0x02	; 2
     354:	09 f0       	breq	.+2      	; 0x358 <fce+0xec>
     356:	56 c0       	rjmp	.+172    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
		int j = (int)(i*Tvz/(T/2));
     358:	80 e0       	ldi	r24, 0x00	; 0
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	0e 94 cc 06 	call	0xd98	; 0xd98 <__floatunsisf>
     360:	20 91 01 01 	lds	r18, 0x0101	; 0x800101 <Tvz>
     364:	30 91 02 01 	lds	r19, 0x0102	; 0x800102 <Tvz+0x1>
     368:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <Tvz+0x2>
     36c:	50 91 04 01 	lds	r21, 0x0104	; 0x800104 <Tvz+0x3>
     370:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     374:	2b 01       	movw	r4, r22
     376:	3c 01       	movw	r6, r24
     378:	c0 90 05 01 	lds	r12, 0x0105	; 0x800105 <T>
     37c:	d0 90 06 01 	lds	r13, 0x0106	; 0x800106 <T+0x1>
     380:	e0 90 07 01 	lds	r14, 0x0107	; 0x800107 <T+0x2>
     384:	f0 90 08 01 	lds	r15, 0x0108	; 0x800108 <T+0x3>
		float a = 2*fmod(i*Tvz,T)/T; 
     388:	a7 01       	movw	r20, r14
     38a:	96 01       	movw	r18, r12
     38c:	0e 94 14 07 	call	0xe28	; 0xe28 <fmod>
     390:	9b 01       	movw	r18, r22
     392:	ac 01       	movw	r20, r24
     394:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     398:	a7 01       	movw	r20, r14
     39a:	96 01       	movw	r18, r12
     39c:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     3a0:	4b 01       	movw	r8, r22
     3a2:	5c 01       	movw	r10, r24
		a = 255*(j%2==0? a : 1 - a);   
     3a4:	20 e0       	ldi	r18, 0x00	; 0
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	40 e0       	ldi	r20, 0x00	; 0
     3aa:	5f e3       	ldi	r21, 0x3F	; 63
     3ac:	c7 01       	movw	r24, r14
     3ae:	b6 01       	movw	r22, r12
     3b0:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     3b4:	9b 01       	movw	r18, r22
     3b6:	ac 01       	movw	r20, r24
     3b8:	c3 01       	movw	r24, r6
     3ba:	b2 01       	movw	r22, r4
     3bc:	0e 94 24 06 	call	0xc48	; 0xc48 <__divsf3>
     3c0:	0e 94 96 06 	call	0xd2c	; 0xd2c <__fixsfsi>
     3c4:	61 70       	andi	r22, 0x01	; 1
     3c6:	77 27       	eor	r23, r23
     3c8:	67 2b       	or	r22, r23
     3ca:	79 f0       	breq	.+30     	; 0x3ea <fce+0x17e>
     3cc:	a5 01       	movw	r20, r10
     3ce:	94 01       	movw	r18, r8
     3d0:	60 e0       	ldi	r22, 0x00	; 0
     3d2:	70 e0       	ldi	r23, 0x00	; 0
     3d4:	80 e8       	ldi	r24, 0x80	; 128
     3d6:	9f e3       	ldi	r25, 0x3F	; 63
     3d8:	0e 94 b7 05 	call	0xb6e	; 0xb6e <__subsf3>
     3dc:	20 e0       	ldi	r18, 0x00	; 0
     3de:	30 e0       	ldi	r19, 0x00	; 0
     3e0:	4f e7       	ldi	r20, 0x7F	; 127
     3e2:	53 e4       	ldi	r21, 0x43	; 67
     3e4:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     3e8:	08 c0       	rjmp	.+16     	; 0x3fa <fce+0x18e>
     3ea:	20 e0       	ldi	r18, 0x00	; 0
     3ec:	30 e0       	ldi	r19, 0x00	; 0
     3ee:	4f e7       	ldi	r20, 0x7F	; 127
     3f0:	53 e4       	ldi	r21, 0x43	; 67
     3f2:	c5 01       	movw	r24, r10
     3f4:	b4 01       	movw	r22, r8
     3f6:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
		return (unsigned int)a;	
     3fa:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
     3fe:	26 2f       	mov	r18, r22
     400:	97 2f       	mov	r25, r23
     402:	05 c0       	rjmp	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
	}
	else if(fceType==10)										  //stops signal generating
     404:	9a 30       	cpi	r25, 0x0A	; 10
     406:	09 f0       	breq	.+2      	; 0x40a <__LOCK_REGION_LENGTH__+0xa>
	return (uint8_t)(0);
}
     408:	03 c0       	rjmp	.+6      	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
		float a = 2*fmod(i*Tvz,T)/T; 
		a = 255*(j%2==0? a : 1 - a);   
		return (unsigned int)a;	
	}
	else if(fceType==10)										  //stops signal generating
	return (uint8_t)(0);
     40a:	20 e0       	ldi	r18, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	82 2f       	mov	r24, r18
}
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	cf 90       	pop	r12
     418:	bf 90       	pop	r11
     41a:	af 90       	pop	r10
     41c:	9f 90       	pop	r9
     41e:	8f 90       	pop	r8
     420:	7f 90       	pop	r7
     422:	6f 90       	pop	r6
     424:	5f 90       	pop	r5
     426:	4f 90       	pop	r4
     428:	08 95       	ret

0000042a <setByte>:
// function for recognition each bit values
unsigned setByte(unsigned int num) {
     42a:	cf 93       	push	r28
     42c:	c8 2f       	mov	r28, r24
	if (num & (0x01 << 0)) GPIO_write_high(&PORTD,PD3); else GPIO_write_low(&PORTD,PD3);
     42e:	80 ff       	sbrs	r24, 0
     430:	07 c0       	rjmp	.+14     	; 0x440 <setByte+0x16>
     432:	63 e0       	ldi	r22, 0x03	; 3
     434:	70 e0       	ldi	r23, 0x00	; 0
     436:	8b e2       	ldi	r24, 0x2B	; 43
     438:	90 e0       	ldi	r25, 0x00	; 0
     43a:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     43e:	06 c0       	rjmp	.+12     	; 0x44c <setByte+0x22>
     440:	63 e0       	ldi	r22, 0x03	; 3
     442:	70 e0       	ldi	r23, 0x00	; 0
     444:	8b e2       	ldi	r24, 0x2B	; 43
     446:	90 e0       	ldi	r25, 0x00	; 0
     448:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 1)) GPIO_write_high(&PORTD,PD2); else GPIO_write_low(&PORTD,PD2);
     44c:	c1 ff       	sbrs	r28, 1
     44e:	07 c0       	rjmp	.+14     	; 0x45e <setByte+0x34>
     450:	62 e0       	ldi	r22, 0x02	; 2
     452:	70 e0       	ldi	r23, 0x00	; 0
     454:	8b e2       	ldi	r24, 0x2B	; 43
     456:	90 e0       	ldi	r25, 0x00	; 0
     458:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     45c:	06 c0       	rjmp	.+12     	; 0x46a <setByte+0x40>
     45e:	62 e0       	ldi	r22, 0x02	; 2
     460:	70 e0       	ldi	r23, 0x00	; 0
     462:	8b e2       	ldi	r24, 0x2B	; 43
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 2)) GPIO_write_high(&PORTD,PD1); else GPIO_write_low(&PORTD,PD1);
     46a:	c2 ff       	sbrs	r28, 2
     46c:	07 c0       	rjmp	.+14     	; 0x47c <setByte+0x52>
     46e:	61 e0       	ldi	r22, 0x01	; 1
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	8b e2       	ldi	r24, 0x2B	; 43
     474:	90 e0       	ldi	r25, 0x00	; 0
     476:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     47a:	06 c0       	rjmp	.+12     	; 0x488 <setByte+0x5e>
     47c:	61 e0       	ldi	r22, 0x01	; 1
     47e:	70 e0       	ldi	r23, 0x00	; 0
     480:	8b e2       	ldi	r24, 0x2B	; 43
     482:	90 e0       	ldi	r25, 0x00	; 0
     484:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 3)) GPIO_write_high(&PORTD,PD0); else GPIO_write_low(&PORTD,PD0);
     488:	c3 ff       	sbrs	r28, 3
     48a:	07 c0       	rjmp	.+14     	; 0x49a <setByte+0x70>
     48c:	60 e0       	ldi	r22, 0x00	; 0
     48e:	70 e0       	ldi	r23, 0x00	; 0
     490:	8b e2       	ldi	r24, 0x2B	; 43
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     498:	06 c0       	rjmp	.+12     	; 0x4a6 <setByte+0x7c>
     49a:	60 e0       	ldi	r22, 0x00	; 0
     49c:	70 e0       	ldi	r23, 0x00	; 0
     49e:	8b e2       	ldi	r24, 0x2B	; 43
     4a0:	90 e0       	ldi	r25, 0x00	; 0
     4a2:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 4)) GPIO_write_high(&PORTC,PC6); else GPIO_write_low(&PORTC,PC6);
     4a6:	c4 ff       	sbrs	r28, 4
     4a8:	07 c0       	rjmp	.+14     	; 0x4b8 <setByte+0x8e>
     4aa:	66 e0       	ldi	r22, 0x06	; 6
     4ac:	70 e0       	ldi	r23, 0x00	; 0
     4ae:	88 e2       	ldi	r24, 0x28	; 40
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4b6:	06 c0       	rjmp	.+12     	; 0x4c4 <setByte+0x9a>
     4b8:	66 e0       	ldi	r22, 0x06	; 6
     4ba:	70 e0       	ldi	r23, 0x00	; 0
     4bc:	88 e2       	ldi	r24, 0x28	; 40
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 5)) GPIO_write_high(&PORTC,PC5); else GPIO_write_low(&PORTC,PC5);
     4c4:	c5 ff       	sbrs	r28, 5
     4c6:	07 c0       	rjmp	.+14     	; 0x4d6 <setByte+0xac>
     4c8:	65 e0       	ldi	r22, 0x05	; 5
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	88 e2       	ldi	r24, 0x28	; 40
     4ce:	90 e0       	ldi	r25, 0x00	; 0
     4d0:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4d4:	06 c0       	rjmp	.+12     	; 0x4e2 <setByte+0xb8>
     4d6:	65 e0       	ldi	r22, 0x05	; 5
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	88 e2       	ldi	r24, 0x28	; 40
     4dc:	90 e0       	ldi	r25, 0x00	; 0
     4de:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 6)) GPIO_write_high(&PORTC,PC4); else GPIO_write_low(&PORTC,PC4);
     4e2:	c6 ff       	sbrs	r28, 6
     4e4:	07 c0       	rjmp	.+14     	; 0x4f4 <setByte+0xca>
     4e6:	64 e0       	ldi	r22, 0x04	; 4
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	88 e2       	ldi	r24, 0x28	; 40
     4ec:	90 e0       	ldi	r25, 0x00	; 0
     4ee:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     4f2:	06 c0       	rjmp	.+12     	; 0x500 <setByte+0xd6>
     4f4:	64 e0       	ldi	r22, 0x04	; 4
     4f6:	70 e0       	ldi	r23, 0x00	; 0
     4f8:	88 e2       	ldi	r24, 0x28	; 40
     4fa:	90 e0       	ldi	r25, 0x00	; 0
     4fc:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
	if (num & (0x01 << 7)) GPIO_write_high(&PORTC,PC3); else GPIO_write_low(&PORTC,PC3);		
     500:	c7 ff       	sbrs	r28, 7
     502:	07 c0       	rjmp	.+14     	; 0x512 <setByte+0xe8>
     504:	63 e0       	ldi	r22, 0x03	; 3
     506:	70 e0       	ldi	r23, 0x00	; 0
     508:	88 e2       	ldi	r24, 0x28	; 40
     50a:	90 e0       	ldi	r25, 0x00	; 0
     50c:	0e 94 7b 00 	call	0xf6	; 0xf6 <GPIO_write_high>
     510:	06 c0       	rjmp	.+12     	; 0x51e <setByte+0xf4>
     512:	63 e0       	ldi	r22, 0x03	; 3
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	88 e2       	ldi	r24, 0x28	; 40
     518:	90 e0       	ldi	r25, 0x00	; 0
     51a:	0e 94 6e 00 	call	0xdc	; 0xdc <GPIO_write_low>
}
     51e:	cf 91       	pop	r28
     520:	08 95       	ret

00000522 <main>:

int main(void)
{
    // Initialize LCD display
    lcd_init(LCD_DISP_ON);
     522:	8c e0       	ldi	r24, 0x0C	; 12
     524:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <lcd_init>
    lcd_gotoxy(1, 0); lcd_puts("adc_value:");
     528:	60 e0       	ldi	r22, 0x00	; 0
     52a:	81 e0       	ldi	r24, 0x01	; 1
     52c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     530:	80 e1       	ldi	r24, 0x10	; 16
     532:	91 e0       	ldi	r25, 0x01	; 1
     534:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
    lcd_gotoxy(1, 1); lcd_puts("prubeh:");
     538:	61 e0       	ldi	r22, 0x01	; 1
     53a:	81 e0       	ldi	r24, 0x01	; 1
     53c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     540:	8b e1       	ldi	r24, 0x1B	; 27
     542:	91 e0       	ldi	r25, 0x01	; 1
     544:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	//config output 
	GPIO_config_output(&DDRD, PD0);
     548:	60 e0       	ldi	r22, 0x00	; 0
     54a:	70 e0       	ldi	r23, 0x00	; 0
     54c:	8a e2       	ldi	r24, 0x2A	; 42
     54e:	90 e0       	ldi	r25, 0x00	; 0
     550:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD1);
     554:	61 e0       	ldi	r22, 0x01	; 1
     556:	70 e0       	ldi	r23, 0x00	; 0
     558:	8a e2       	ldi	r24, 0x2A	; 42
     55a:	90 e0       	ldi	r25, 0x00	; 0
     55c:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD2);
     560:	62 e0       	ldi	r22, 0x02	; 2
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	8a e2       	ldi	r24, 0x2A	; 42
     566:	90 e0       	ldi	r25, 0x00	; 0
     568:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRD, PD3);
     56c:	63 e0       	ldi	r22, 0x03	; 3
     56e:	70 e0       	ldi	r23, 0x00	; 0
     570:	8a e2       	ldi	r24, 0x2A	; 42
     572:	90 e0       	ldi	r25, 0x00	; 0
     574:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRB, PB6);
     578:	66 e0       	ldi	r22, 0x06	; 6
     57a:	70 e0       	ldi	r23, 0x00	; 0
     57c:	84 e2       	ldi	r24, 0x24	; 36
     57e:	90 e0       	ldi	r25, 0x00	; 0
     580:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC3);
     584:	63 e0       	ldi	r22, 0x03	; 3
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	87 e2       	ldi	r24, 0x27	; 39
     58a:	90 e0       	ldi	r25, 0x00	; 0
     58c:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC4);
     590:	64 e0       	ldi	r22, 0x04	; 4
     592:	70 e0       	ldi	r23, 0x00	; 0
     594:	87 e2       	ldi	r24, 0x27	; 39
     596:	90 e0       	ldi	r25, 0x00	; 0
     598:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC5);
     59c:	65 e0       	ldi	r22, 0x05	; 5
     59e:	70 e0       	ldi	r23, 0x00	; 0
     5a0:	87 e2       	ldi	r24, 0x27	; 39
     5a2:	90 e0       	ldi	r25, 0x00	; 0
     5a4:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	GPIO_config_output(&DDRC, PC6);
     5a8:	66 e0       	ldi	r22, 0x06	; 6
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	87 e2       	ldi	r24, 0x27	; 39
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	0e 94 62 00 	call	0xc4	; 0xc4 <GPIO_config_output>
	// Enable interrupt and set the overflow prescaler to 262 ms
	TIM2_overflow_interrupt_enable();
     5b4:	e0 e7       	ldi	r30, 0x70	; 112
     5b6:	f0 e0       	ldi	r31, 0x00	; 0
     5b8:	80 81       	ld	r24, Z
     5ba:	81 60       	ori	r24, 0x01	; 1
     5bc:	80 83       	st	Z, r24
	TIM2_overflow_16us();
     5be:	e1 eb       	ldi	r30, 0xB1	; 177
     5c0:	f0 e0       	ldi	r31, 0x00	; 0
     5c2:	80 81       	ld	r24, Z
     5c4:	89 7f       	andi	r24, 0xF9	; 249
     5c6:	80 83       	st	Z, r24
     5c8:	80 81       	ld	r24, Z
     5ca:	81 60       	ori	r24, 0x01	; 1
     5cc:	80 83       	st	Z, r24
	TIM1_overflow_interrupt_enable();
     5ce:	ef e6       	ldi	r30, 0x6F	; 111
     5d0:	f0 e0       	ldi	r31, 0x00	; 0
     5d2:	80 81       	ld	r24, Z
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 83       	st	Z, r24
	TIM1_overflow_262ms();
     5d8:	e1 e8       	ldi	r30, 0x81	; 129
     5da:	f0 e0       	ldi	r31, 0x00	; 0
     5dc:	80 81       	ld	r24, Z
     5de:	8b 7f       	andi	r24, 0xFB	; 251
     5e0:	80 83       	st	Z, r24
     5e2:	80 81       	ld	r24, Z
     5e4:	83 60       	ori	r24, 0x03	; 3
     5e6:	80 83       	st	Z, r24
	TIM0_overflow_interrupt_enable();
     5e8:	ee e6       	ldi	r30, 0x6E	; 110
     5ea:	f0 e0       	ldi	r31, 0x00	; 0
     5ec:	80 81       	ld	r24, Z
     5ee:	81 60       	ori	r24, 0x01	; 1
     5f0:	80 83       	st	Z, r24
	TIM0_overflow_4ms();
     5f2:	85 b5       	in	r24, 0x25	; 37
     5f4:	8c 7f       	andi	r24, 0xFC	; 252
     5f6:	85 bd       	out	0x25, r24	; 37
     5f8:	85 b5       	in	r24, 0x25	; 37
     5fa:	84 60       	ori	r24, 0x04	; 4
     5fc:	85 bd       	out	0x25, r24	; 37
	// Configure ADC to convert PC0[A0] analog value
	// Set ADC reference to AVcc
	ADMUX |= (1<<REFS0);
     5fe:	ec e7       	ldi	r30, 0x7C	; 124
     600:	f0 e0       	ldi	r31, 0x00	; 0
     602:	80 81       	ld	r24, Z
     604:	80 64       	ori	r24, 0x40	; 64
     606:	80 83       	st	Z, r24
	ADMUX &= ~(1<<REFS1);
     608:	80 81       	ld	r24, Z
     60a:	8f 77       	andi	r24, 0x7F	; 127
     60c:	80 83       	st	Z, r24
	// Set input channel to ADC0
	ADMUX &= ~((1<<MUX0)|(1<<MUX1)|(1<<MUX2)|(1<<MUX3));
     60e:	80 81       	ld	r24, Z
     610:	80 7f       	andi	r24, 0xF0	; 240
     612:	80 83       	st	Z, r24
	// Enable ADC module
	ADCSRA |= (1<<ADEN);
     614:	ea e7       	ldi	r30, 0x7A	; 122
     616:	f0 e0       	ldi	r31, 0x00	; 0
     618:	80 81       	ld	r24, Z
     61a:	80 68       	ori	r24, 0x80	; 128
     61c:	80 83       	st	Z, r24
	// Enable conversion complete interrupt
	ADCSRA |= (1<<ADIE);
     61e:	80 81       	ld	r24, Z
     620:	88 60       	ori	r24, 0x08	; 8
     622:	80 83       	st	Z, r24
	// Set clock prescaler to 128
	ADCSRA |= ((1<<ADPS0)|(1<<ADPS1)|(1<<ADPS2));
     624:	80 81       	ld	r24, Z
     626:	87 60       	ori	r24, 0x07	; 7
     628:	80 83       	st	Z, r24
	// Initialize UART to asynchronous, 8N1, 9600
	uart_init(UART_BAUD_SELECT(9600,F_CPU));
     62a:	87 e6       	ldi	r24, 0x67	; 103
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	0e 94 7a 05 	call	0xaf4	; 0xaf4 <uart_init>
	// Enables interrupts by setting the global interrupt mask
    sei();
     632:	78 94       	sei
     634:	ff cf       	rjmp	.-2      	; 0x634 <main+0x112>

00000636 <__vector_13>:
/**
 * ISR starts when Timer/Counter1 overflows. Use single conversion mode
 * and start conversion four times per second.
 */
ISR(TIMER1_OVF_vect)
{	
     636:	1f 92       	push	r1
     638:	0f 92       	push	r0
     63a:	0f b6       	in	r0, 0x3f	; 63
     63c:	0f 92       	push	r0
     63e:	11 24       	eor	r1, r1
     640:	8f 93       	push	r24
     642:	ef 93       	push	r30
     644:	ff 93       	push	r31
	// Start ADC conversion
	ADCSRA |= (1<<ADSC);
     646:	ea e7       	ldi	r30, 0x7A	; 122
     648:	f0 e0       	ldi	r31, 0x00	; 0
     64a:	80 81       	ld	r24, Z
     64c:	80 64       	ori	r24, 0x40	; 64
     64e:	80 83       	st	Z, r24
}
     650:	ff 91       	pop	r31
     652:	ef 91       	pop	r30
     654:	8f 91       	pop	r24
     656:	0f 90       	pop	r0
     658:	0f be       	out	0x3f, r0	; 63
     65a:	0f 90       	pop	r0
     65c:	1f 90       	pop	r1
     65e:	18 95       	reti

00000660 <__vector_16>:

ISR(TIMER0_OVF_vect)
{
     660:	1f 92       	push	r1
     662:	0f 92       	push	r0
     664:	0f b6       	in	r0, 0x3f	; 63
     666:	0f 92       	push	r0
     668:	11 24       	eor	r1, r1
     66a:	2f 93       	push	r18
     66c:	3f 93       	push	r19
     66e:	4f 93       	push	r20
     670:	5f 93       	push	r21
     672:	6f 93       	push	r22
     674:	7f 93       	push	r23
     676:	8f 93       	push	r24
     678:	9f 93       	push	r25
     67a:	af 93       	push	r26
     67c:	bf 93       	push	r27
     67e:	ef 93       	push	r30
     680:	ff 93       	push	r31
	uint16_t a =fce(i++); //calls for signal values
     682:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <__data_end>
     686:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <__data_end+0x1>
     68a:	9c 01       	movw	r18, r24
     68c:	2f 5f       	subi	r18, 0xFF	; 255
     68e:	3f 4f       	sbci	r19, 0xFF	; 255
     690:	30 93 51 01 	sts	0x0151, r19	; 0x800151 <__data_end+0x1>
     694:	20 93 50 01 	sts	0x0150, r18	; 0x800150 <__data_end>
     698:	0e 94 36 01 	call	0x26c	; 0x26c <fce>
	setByte(a);			  //calls for bit recognition
     69c:	0e 94 15 02 	call	0x42a	; 0x42a <setByte>
}	
     6a0:	ff 91       	pop	r31
     6a2:	ef 91       	pop	r30
     6a4:	bf 91       	pop	r27
     6a6:	af 91       	pop	r26
     6a8:	9f 91       	pop	r25
     6aa:	8f 91       	pop	r24
     6ac:	7f 91       	pop	r23
     6ae:	6f 91       	pop	r22
     6b0:	5f 91       	pop	r21
     6b2:	4f 91       	pop	r20
     6b4:	3f 91       	pop	r19
     6b6:	2f 91       	pop	r18
     6b8:	0f 90       	pop	r0
     6ba:	0f be       	out	0x3f, r0	; 63
     6bc:	0f 90       	pop	r0
     6be:	1f 90       	pop	r1
     6c0:	18 95       	reti

000006c2 <__vector_9>:

ISR(TIMER2_OVF_vect)
	// DTMF generator
{ 
     6c2:	1f 92       	push	r1
     6c4:	0f 92       	push	r0
     6c6:	0f b6       	in	r0, 0x3f	; 63
     6c8:	0f 92       	push	r0
     6ca:	11 24       	eor	r1, r1
     6cc:	2f 93       	push	r18
     6ce:	3f 93       	push	r19
     6d0:	4f 93       	push	r20
     6d2:	5f 93       	push	r21
     6d4:	6f 93       	push	r22
     6d6:	7f 93       	push	r23
     6d8:	8f 93       	push	r24
     6da:	9f 93       	push	r25
     6dc:	af 93       	push	r26
     6de:	bf 93       	push	r27
     6e0:	ef 93       	push	r30
     6e2:	ff 93       	push	r31
	x++;
     6e4:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <x>
     6e8:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <x+0x1>
     6ec:	01 96       	adiw	r24, 0x01	; 1
     6ee:	90 93 55 01 	sts	0x0155, r25	; 0x800155 <x+0x1>
     6f2:	80 93 54 01 	sts	0x0154, r24	; 0x800154 <x>
	if (x>=(DTMF/2)&&duration>1){
     6f6:	20 91 56 01 	lds	r18, 0x0156	; 0x800156 <DTMF>
     6fa:	30 91 57 01 	lds	r19, 0x0157	; 0x800157 <DTMF+0x1>
     6fe:	36 95       	lsr	r19
     700:	27 95       	ror	r18
     702:	82 17       	cp	r24, r18
     704:	93 07       	cpc	r25, r19
     706:	c8 f0       	brcs	.+50     	; 0x73a <__vector_9+0x78>
     708:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <duration>
     70c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <duration+0x1>
     710:	02 97       	sbiw	r24, 0x02	; 2
     712:	98 f0       	brcs	.+38     	; 0x73a <__vector_9+0x78>
		GPIO_toggle(&PORTB,PB6);
     714:	66 e0       	ldi	r22, 0x06	; 6
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	85 e2       	ldi	r24, 0x25	; 37
     71a:	90 e0       	ldi	r25, 0x00	; 0
     71c:	0e 94 87 00 	call	0x10e	; 0x10e <GPIO_toggle>
		x=0;
     720:	10 92 55 01 	sts	0x0155, r1	; 0x800155 <x+0x1>
     724:	10 92 54 01 	sts	0x0154, r1	; 0x800154 <x>
		duration=duration-1;
     728:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <duration>
     72c:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <duration+0x1>
     730:	01 97       	sbiw	r24, 0x01	; 1
     732:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     736:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	}
}
     73a:	ff 91       	pop	r31
     73c:	ef 91       	pop	r30
     73e:	bf 91       	pop	r27
     740:	af 91       	pop	r26
     742:	9f 91       	pop	r25
     744:	8f 91       	pop	r24
     746:	7f 91       	pop	r23
     748:	6f 91       	pop	r22
     74a:	5f 91       	pop	r21
     74c:	4f 91       	pop	r20
     74e:	3f 91       	pop	r19
     750:	2f 91       	pop	r18
     752:	0f 90       	pop	r0
     754:	0f be       	out	0x3f, r0	; 63
     756:	0f 90       	pop	r0
     758:	1f 90       	pop	r1
     75a:	18 95       	reti

0000075c <__vector_21>:

ISR(ADC_vect)
{
     75c:	1f 92       	push	r1
     75e:	0f 92       	push	r0
     760:	0f b6       	in	r0, 0x3f	; 63
     762:	0f 92       	push	r0
     764:	11 24       	eor	r1, r1
     766:	0f 93       	push	r16
     768:	1f 93       	push	r17
     76a:	2f 93       	push	r18
     76c:	3f 93       	push	r19
     76e:	4f 93       	push	r20
     770:	5f 93       	push	r21
     772:	6f 93       	push	r22
     774:	7f 93       	push	r23
     776:	8f 93       	push	r24
     778:	9f 93       	push	r25
     77a:	af 93       	push	r26
     77c:	bf 93       	push	r27
     77e:	ef 93       	push	r30
     780:	ff 93       	push	r31
     782:	cf 93       	push	r28
     784:	df 93       	push	r29
     786:	cd b7       	in	r28, 0x3d	; 61
     788:	de b7       	in	r29, 0x3e	; 62
     78a:	26 97       	sbiw	r28, 0x06	; 6
     78c:	de bf       	out	0x3e, r29	; 62
     78e:	cd bf       	out	0x3d, r28	; 61
	uint16_t value = ADC;
     790:	00 91 78 00 	lds	r16, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     794:	10 91 79 00 	lds	r17, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
	char lcd_string[6] ="      ";
     798:	86 e0       	ldi	r24, 0x06	; 6
     79a:	e9 e0       	ldi	r30, 0x09	; 9
     79c:	f1 e0       	ldi	r31, 0x01	; 1
     79e:	de 01       	movw	r26, r28
     7a0:	11 96       	adiw	r26, 0x01	; 1
     7a2:	01 90       	ld	r0, Z+
     7a4:	0d 92       	st	X+, r0
     7a6:	8a 95       	dec	r24
     7a8:	e1 f7       	brne	.-8      	; 0x7a2 <__vector_21+0x46>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     7aa:	4a e0       	ldi	r20, 0x0A	; 10
     7ac:	be 01       	movw	r22, r28
     7ae:	6f 5f       	subi	r22, 0xFF	; 255
     7b0:	7f 4f       	sbci	r23, 0xFF	; 255
     7b2:	c8 01       	movw	r24, r16
     7b4:	0e 94 ab 08 	call	0x1156	; 0x1156 <__itoa_ncheck>
	itoa(value, lcd_string, 10); // value to dacimal
	if (value < 700) // reduce amount of sent uart data
     7b8:	0c 3b       	cpi	r16, 0xBC	; 188
     7ba:	82 e0       	ldi	r24, 0x02	; 2
     7bc:	18 07       	cpc	r17, r24
     7be:	60 f4       	brcc	.+24     	; 0x7d8 <__vector_21+0x7c>
	{
		uart_puts("ADC value in decimal:");
     7c0:	83 e2       	ldi	r24, 0x23	; 35
     7c2:	91 e0       	ldi	r25, 0x01	; 1
     7c4:	0e 94 a8 05 	call	0xb50	; 0xb50 <uart_puts>
		uart_puts(lcd_string); // send uart value in decimal
     7c8:	ce 01       	movw	r24, r28
     7ca:	01 96       	adiw	r24, 0x01	; 1
     7cc:	0e 94 a8 05 	call	0xb50	; 0xb50 <uart_puts>
		uart_puts("\n");
     7d0:	89 e3       	ldi	r24, 0x39	; 57
     7d2:	91 e0       	ldi	r25, 0x01	; 1
     7d4:	0e 94 a8 05 	call	0xb50	; 0xb50 <uart_puts>
	}
	lcd_gotoxy(12, 0);
     7d8:	60 e0       	ldi	r22, 0x00	; 0
     7da:	8c e0       	ldi	r24, 0x0C	; 12
     7dc:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts("    "); //clear area
     7e0:	8b e3       	ldi	r24, 0x3B	; 59
     7e2:	91 e0       	ldi	r25, 0x01	; 1
     7e4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	lcd_gotoxy(12, 0);
     7e8:	60 e0       	ldi	r22, 0x00	; 0
     7ea:	8c e0       	ldi	r24, 0x0C	; 12
     7ec:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
	lcd_puts(lcd_string); // show decimal
     7f0:	ce 01       	movw	r24, r28
     7f2:	01 96       	adiw	r24, 0x01	; 1
     7f4:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	
	if (value>465 && value<520){fceType=0;DTMF=34;duration=300;}    //key1
     7f8:	c8 01       	movw	r24, r16
     7fa:	82 5d       	subi	r24, 0xD2	; 210
     7fc:	91 40       	sbci	r25, 0x01	; 1
     7fe:	c6 97       	sbiw	r24, 0x36	; 54
     800:	70 f4       	brcc	.+28     	; 0x81e <__vector_21+0xc2>
     802:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__data_start>
     806:	82 e2       	ldi	r24, 0x22	; 34
     808:	90 e0       	ldi	r25, 0x00	; 0
     80a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     80e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     812:	8c e2       	ldi	r24, 0x2C	; 44
     814:	91 e0       	ldi	r25, 0x01	; 1
     816:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     81a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>360 && value<380){fceType=1;DTMF=32;duration=300;}	//key2
     81e:	c8 01       	movw	r24, r16
     820:	89 56       	subi	r24, 0x69	; 105
     822:	91 40       	sbci	r25, 0x01	; 1
     824:	43 97       	sbiw	r24, 0x13	; 19
     826:	78 f4       	brcc	.+30     	; 0x846 <__vector_21+0xea>
     828:	81 e0       	ldi	r24, 0x01	; 1
     82a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     82e:	80 e2       	ldi	r24, 0x20	; 32
     830:	90 e0       	ldi	r25, 0x00	; 0
     832:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     836:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     83a:	8c e2       	ldi	r24, 0x2C	; 44
     83c:	91 e0       	ldi	r25, 0x01	; 1
     83e:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     842:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>198 && value<208){fceType=2;DTMF=30;duration=300;}	//key3
     846:	c8 01       	movw	r24, r16
     848:	87 5c       	subi	r24, 0xC7	; 199
     84a:	91 09       	sbc	r25, r1
     84c:	09 97       	sbiw	r24, 0x09	; 9
     84e:	78 f4       	brcc	.+30     	; 0x86e <__vector_21+0x112>
     850:	82 e0       	ldi	r24, 0x02	; 2
     852:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     856:	8e e1       	ldi	r24, 0x1E	; 30
     858:	90 e0       	ldi	r25, 0x00	; 0
     85a:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     85e:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     862:	8c e2       	ldi	r24, 0x2C	; 44
     864:	91 e0       	ldi	r25, 0x01	; 1
     866:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     86a:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>450 && value<460){DTMF=32;duration=300;}				//key4
     86e:	c8 01       	movw	r24, r16
     870:	83 5c       	subi	r24, 0xC3	; 195
     872:	91 40       	sbci	r25, 0x01	; 1
     874:	09 97       	sbiw	r24, 0x09	; 9
     876:	60 f4       	brcc	.+24     	; 0x890 <__vector_21+0x134>
     878:	80 e2       	ldi	r24, 0x20	; 32
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     880:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     884:	8c e2       	ldi	r24, 0x2C	; 44
     886:	91 e0       	ldi	r25, 0x01	; 1
     888:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     88c:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>330 && value<340){DTMF=30;duration=300;}				//key5
     890:	c8 01       	movw	r24, r16
     892:	8b 54       	subi	r24, 0x4B	; 75
     894:	91 40       	sbci	r25, 0x01	; 1
     896:	09 97       	sbiw	r24, 0x09	; 9
     898:	60 f4       	brcc	.+24     	; 0x8b2 <__vector_21+0x156>
     89a:	8e e1       	ldi	r24, 0x1E	; 30
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8a2:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8a6:	8c e2       	ldi	r24, 0x2C	; 44
     8a8:	91 e0       	ldi	r25, 0x01	; 1
     8aa:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8ae:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>140 && value<150){DTMF=29;duration=300;}				//key6
     8b2:	c8 01       	movw	r24, r16
     8b4:	8d 58       	subi	r24, 0x8D	; 141
     8b6:	91 09       	sbc	r25, r1
     8b8:	09 97       	sbiw	r24, 0x09	; 9
     8ba:	60 f4       	brcc	.+24     	; 0x8d4 <__vector_21+0x178>
     8bc:	8d e1       	ldi	r24, 0x1D	; 29
     8be:	90 e0       	ldi	r25, 0x00	; 0
     8c0:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8c4:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8c8:	8c e2       	ldi	r24, 0x2C	; 44
     8ca:	91 e0       	ldi	r25, 0x01	; 1
     8cc:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8d0:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>420 && value<432){DTMF=32;duration=300;}				//key7
     8d4:	c8 01       	movw	r24, r16
     8d6:	85 5a       	subi	r24, 0xA5	; 165
     8d8:	91 40       	sbci	r25, 0x01	; 1
     8da:	0b 97       	sbiw	r24, 0x0b	; 11
     8dc:	60 f4       	brcc	.+24     	; 0x8f6 <__vector_21+0x19a>
     8de:	80 e2       	ldi	r24, 0x20	; 32
     8e0:	90 e0       	ldi	r25, 0x00	; 0
     8e2:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     8e6:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     8ea:	8c e2       	ldi	r24, 0x2C	; 44
     8ec:	91 e0       	ldi	r25, 0x01	; 1
     8ee:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     8f2:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>290 && value<300){DTMF=29;duration=300;}				//key8
     8f6:	c8 01       	movw	r24, r16
     8f8:	83 52       	subi	r24, 0x23	; 35
     8fa:	91 40       	sbci	r25, 0x01	; 1
     8fc:	09 97       	sbiw	r24, 0x09	; 9
     8fe:	60 f4       	brcc	.+24     	; 0x918 <__stack+0x19>
     900:	8d e1       	ldi	r24, 0x1D	; 29
     902:	90 e0       	ldi	r25, 0x00	; 0
     904:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     908:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     90c:	8c e2       	ldi	r24, 0x2C	; 44
     90e:	91 e0       	ldi	r25, 0x01	; 1
     910:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     914:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>70 && value<80){DTMF=27;duration=300;}				//key9									
     918:	c8 01       	movw	r24, r16
     91a:	87 54       	subi	r24, 0x47	; 71
     91c:	91 09       	sbc	r25, r1
     91e:	09 97       	sbiw	r24, 0x09	; 9
     920:	60 f4       	brcc	.+24     	; 0x93a <__stack+0x3b>
     922:	8b e1       	ldi	r24, 0x1B	; 27
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	90 93 57 01 	sts	0x0157, r25	; 0x800157 <DTMF+0x1>
     92a:	80 93 56 01 	sts	0x0156, r24	; 0x800156 <DTMF>
     92e:	8c e2       	ldi	r24, 0x2C	; 44
     930:	91 e0       	ldi	r25, 0x01	; 1
     932:	90 93 53 01 	sts	0x0153, r25	; 0x800153 <duration+0x1>
     936:	80 93 52 01 	sts	0x0152, r24	; 0x800152 <duration>
	if (value>390 && value<410){T=T*2;}								//key*
     93a:	c8 01       	movw	r24, r16
     93c:	87 58       	subi	r24, 0x87	; 135
     93e:	91 40       	sbci	r25, 0x01	; 1
     940:	43 97       	sbiw	r24, 0x13	; 19
     942:	a0 f4       	brcc	.+40     	; 0x96c <__stack+0x6d>
     944:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <T>
     948:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <T+0x1>
     94c:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <T+0x2>
     950:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <T+0x3>
     954:	9b 01       	movw	r18, r22
     956:	ac 01       	movw	r20, r24
     958:	0e 94 b8 05 	call	0xb70	; 0xb70 <__addsf3>
     95c:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <T>
     960:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <T+0x1>
     964:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <T+0x2>
     968:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <T+0x3>
	if (value>240 && value<250){T=T/2;}								//key0
     96c:	c8 01       	movw	r24, r16
     96e:	81 5f       	subi	r24, 0xF1	; 241
     970:	91 09       	sbc	r25, r1
     972:	09 97       	sbiw	r24, 0x09	; 9
     974:	b0 f4       	brcc	.+44     	; 0x9a2 <__stack+0xa3>
     976:	20 e0       	ldi	r18, 0x00	; 0
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	40 e0       	ldi	r20, 0x00	; 0
     97c:	5f e3       	ldi	r21, 0x3F	; 63
     97e:	60 91 05 01 	lds	r22, 0x0105	; 0x800105 <T>
     982:	70 91 06 01 	lds	r23, 0x0106	; 0x800106 <T+0x1>
     986:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <T+0x2>
     98a:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <T+0x3>
     98e:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
     992:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <T>
     996:	70 93 06 01 	sts	0x0106, r23	; 0x800106 <T+0x1>
     99a:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <T+0x2>
     99e:	90 93 08 01 	sts	0x0108, r25	; 0x800108 <T+0x3>
	if (value==0)fceType=10;										//key#
     9a2:	01 2b       	or	r16, r17
     9a4:	21 f4       	brne	.+8      	; 0x9ae <__stack+0xaf>
     9a6:	8a e0       	ldi	r24, 0x0A	; 10
     9a8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     9ac:	18 c0       	rjmp	.+48     	; 0x9de <__stack+0xdf>
		if (fceType==0){lcd_gotoxy(12, 1); lcd_puts("sin");}
     9ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9b2:	81 11       	cpse	r24, r1
     9b4:	08 c0       	rjmp	.+16     	; 0x9c6 <__stack+0xc7>
     9b6:	61 e0       	ldi	r22, 0x01	; 1
     9b8:	8c e0       	ldi	r24, 0x0C	; 12
     9ba:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     9be:	80 e4       	ldi	r24, 0x40	; 64
     9c0:	91 e0       	ldi	r25, 0x01	; 1
     9c2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		if (fceType==1){lcd_gotoxy(12, 1); lcd_puts("saw");}
     9c6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	41 f4       	brne	.+16     	; 0x9de <__stack+0xdf>
     9ce:	61 e0       	ldi	r22, 0x01	; 1
     9d0:	8c e0       	ldi	r24, 0x0C	; 12
     9d2:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     9d6:	84 e4       	ldi	r24, 0x44	; 68
     9d8:	91 e0       	ldi	r25, 0x01	; 1
     9da:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		if (fceType==2){lcd_gotoxy(12, 1); lcd_puts("tri");}
     9de:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9e2:	82 30       	cpi	r24, 0x02	; 2
     9e4:	41 f4       	brne	.+16     	; 0x9f6 <__stack+0xf7>
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	8c e0       	ldi	r24, 0x0C	; 12
     9ea:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     9ee:	88 e4       	ldi	r24, 0x48	; 72
     9f0:	91 e0       	ldi	r25, 0x01	; 1
     9f2:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
		if (fceType==10){lcd_gotoxy(12, 1); lcd_puts("off");}
     9f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     9fa:	8a 30       	cpi	r24, 0x0A	; 10
     9fc:	41 f4       	brne	.+16     	; 0xa0e <__stack+0x10f>
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	8c e0       	ldi	r24, 0x0C	; 12
     a02:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_gotoxy>
     a06:	8c e4       	ldi	r24, 0x4C	; 76
     a08:	91 e0       	ldi	r25, 0x01	; 1
     a0a:	0e 94 e4 00 	call	0x1c8	; 0x1c8 <lcd_puts>
	



     a0e:	26 96       	adiw	r28, 0x06	; 6
     a10:	0f b6       	in	r0, 0x3f	; 63
     a12:	f8 94       	cli
     a14:	de bf       	out	0x3e, r29	; 62
     a16:	0f be       	out	0x3f, r0	; 63
     a18:	cd bf       	out	0x3d, r28	; 61
     a1a:	df 91       	pop	r29
     a1c:	cf 91       	pop	r28
     a1e:	ff 91       	pop	r31
     a20:	ef 91       	pop	r30
     a22:	bf 91       	pop	r27
     a24:	af 91       	pop	r26
     a26:	9f 91       	pop	r25
     a28:	8f 91       	pop	r24
     a2a:	7f 91       	pop	r23
     a2c:	6f 91       	pop	r22
     a2e:	5f 91       	pop	r21
     a30:	4f 91       	pop	r20
     a32:	3f 91       	pop	r19
     a34:	2f 91       	pop	r18
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	0f 90       	pop	r0
     a3c:	0f be       	out	0x3f, r0	; 63
     a3e:	0f 90       	pop	r0
     a40:	1f 90       	pop	r1
     a42:	18 95       	reti

00000a44 <__vector_18>:
    /* store buffer index */
    UART_RxTail = tmptail;

    UART_LastRxError = 0;
    return (lastRxError << 8) + data;
}/* uart_getc */
     a44:	1f 92       	push	r1
     a46:	0f 92       	push	r0
     a48:	0f b6       	in	r0, 0x3f	; 63
     a4a:	0f 92       	push	r0
     a4c:	11 24       	eor	r1, r1
     a4e:	2f 93       	push	r18
     a50:	8f 93       	push	r24
     a52:	9f 93       	push	r25
     a54:	ef 93       	push	r30
     a56:	ff 93       	push	r31
     a58:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     a5c:	20 91 c6 00 	lds	r18, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     a60:	8c 71       	andi	r24, 0x1C	; 28
     a62:	e0 91 5a 01 	lds	r30, 0x015A	; 0x80015a <UART_RxHead>
     a66:	ef 5f       	subi	r30, 0xFF	; 255
     a68:	ef 71       	andi	r30, 0x1F	; 31
     a6a:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <UART_RxTail>
     a6e:	e9 17       	cp	r30, r25
     a70:	39 f0       	breq	.+14     	; 0xa80 <__vector_18+0x3c>
     a72:	e0 93 5a 01 	sts	0x015A, r30	; 0x80015a <UART_RxHead>
     a76:	f0 e0       	ldi	r31, 0x00	; 0
     a78:	e3 5a       	subi	r30, 0xA3	; 163
     a7a:	fe 4f       	sbci	r31, 0xFE	; 254
     a7c:	20 83       	st	Z, r18
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <__vector_18+0x3e>
     a80:	82 e0       	ldi	r24, 0x02	; 2
     a82:	90 91 58 01 	lds	r25, 0x0158	; 0x800158 <UART_LastRxError>
     a86:	89 2b       	or	r24, r25
     a88:	80 93 58 01 	sts	0x0158, r24	; 0x800158 <UART_LastRxError>
     a8c:	ff 91       	pop	r31
     a8e:	ef 91       	pop	r30
     a90:	9f 91       	pop	r25
     a92:	8f 91       	pop	r24
     a94:	2f 91       	pop	r18
     a96:	0f 90       	pop	r0
     a98:	0f be       	out	0x3f, r0	; 63
     a9a:	0f 90       	pop	r0
     a9c:	1f 90       	pop	r1
     a9e:	18 95       	reti

00000aa0 <__vector_19>:
     aa0:	1f 92       	push	r1
     aa2:	0f 92       	push	r0
     aa4:	0f b6       	in	r0, 0x3f	; 63
     aa6:	0f 92       	push	r0
     aa8:	11 24       	eor	r1, r1
     aaa:	8f 93       	push	r24
     aac:	9f 93       	push	r25
     aae:	ef 93       	push	r30
     ab0:	ff 93       	push	r31
     ab2:	90 91 5c 01 	lds	r25, 0x015C	; 0x80015c <UART_TxHead>
     ab6:	80 91 5b 01 	lds	r24, 0x015B	; 0x80015b <UART_TxTail>
     aba:	98 17       	cp	r25, r24
     abc:	69 f0       	breq	.+26     	; 0xad8 <__vector_19+0x38>
     abe:	e0 91 5b 01 	lds	r30, 0x015B	; 0x80015b <UART_TxTail>
     ac2:	ef 5f       	subi	r30, 0xFF	; 255
     ac4:	ef 71       	andi	r30, 0x1F	; 31
     ac6:	e0 93 5b 01 	sts	0x015B, r30	; 0x80015b <UART_TxTail>
     aca:	f0 e0       	ldi	r31, 0x00	; 0
     acc:	e3 58       	subi	r30, 0x83	; 131
     ace:	fe 4f       	sbci	r31, 0xFE	; 254
     ad0:	80 81       	ld	r24, Z
     ad2:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     ad6:	05 c0       	rjmp	.+10     	; 0xae2 <__vector_19+0x42>
     ad8:	e1 ec       	ldi	r30, 0xC1	; 193
     ada:	f0 e0       	ldi	r31, 0x00	; 0
     adc:	80 81       	ld	r24, Z
     ade:	8f 7d       	andi	r24, 0xDF	; 223
     ae0:	80 83       	st	Z, r24
     ae2:	ff 91       	pop	r31
     ae4:	ef 91       	pop	r30
     ae6:	9f 91       	pop	r25
     ae8:	8f 91       	pop	r24
     aea:	0f 90       	pop	r0
     aec:	0f be       	out	0x3f, r0	; 63
     aee:	0f 90       	pop	r0
     af0:	1f 90       	pop	r1
     af2:	18 95       	reti

00000af4 <uart_init>:
     af4:	10 92 5c 01 	sts	0x015C, r1	; 0x80015c <UART_TxHead>
     af8:	10 92 5b 01 	sts	0x015B, r1	; 0x80015b <UART_TxTail>
     afc:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <UART_RxHead>
     b00:	10 92 59 01 	sts	0x0159, r1	; 0x800159 <UART_RxTail>
     b04:	99 23       	and	r25, r25
     b06:	1c f4       	brge	.+6      	; 0xb0e <uart_init+0x1a>
     b08:	22 e0       	ldi	r18, 0x02	; 2
     b0a:	20 93 c0 00 	sts	0x00C0, r18	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
     b0e:	90 78       	andi	r25, 0x80	; 128
     b10:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
     b14:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
     b18:	88 e9       	ldi	r24, 0x98	; 152
     b1a:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     b1e:	86 e0       	ldi	r24, 0x06	; 6
     b20:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
     b24:	08 95       	ret

00000b26 <uart_putc>:
void uart_putc(unsigned char data)
{
    unsigned char tmphead;


    tmphead = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
     b26:	20 91 5c 01 	lds	r18, 0x015C	; 0x80015c <UART_TxHead>
     b2a:	2f 5f       	subi	r18, 0xFF	; 255
     b2c:	2f 71       	andi	r18, 0x1F	; 31

    while (tmphead == UART_TxTail)
     b2e:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <UART_TxTail>
     b32:	29 17       	cp	r18, r25
     b34:	e1 f3       	breq	.-8      	; 0xb2e <uart_putc+0x8>
    {
        ;/* wait for free space in buffer */
    }

    UART_TxBuf[tmphead] = data;
     b36:	e2 2f       	mov	r30, r18
     b38:	f0 e0       	ldi	r31, 0x00	; 0
     b3a:	e3 58       	subi	r30, 0x83	; 131
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 83       	st	Z, r24
    UART_TxHead         = tmphead;
     b40:	20 93 5c 01 	sts	0x015C, r18	; 0x80015c <UART_TxHead>

    /* enable UDRE interrupt */
    UART0_CONTROL |= _BV(UART0_UDRIE);
     b44:	e1 ec       	ldi	r30, 0xC1	; 193
     b46:	f0 e0       	ldi	r31, 0x00	; 0
     b48:	80 81       	ld	r24, Z
     b4a:	80 62       	ori	r24, 0x20	; 32
     b4c:	80 83       	st	Z, r24
     b4e:	08 95       	ret

00000b50 <uart_puts>:
 * Purpose:  transmit string to UART
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
     b50:	cf 93       	push	r28
     b52:	df 93       	push	r29
     b54:	ec 01       	movw	r28, r24
    while (*s)
     b56:	88 81       	ld	r24, Y
     b58:	88 23       	and	r24, r24
     b5a:	31 f0       	breq	.+12     	; 0xb68 <uart_puts+0x18>
     b5c:	21 96       	adiw	r28, 0x01	; 1
        uart_putc(*s++);
     b5e:	0e 94 93 05 	call	0xb26	; 0xb26 <uart_putc>
 * Input:    string to be transmitted
 * Returns:  none
 **************************************************************************/
void uart_puts(const char *s)
{
    while (*s)
     b62:	89 91       	ld	r24, Y+
     b64:	81 11       	cpse	r24, r1
     b66:	fb cf       	rjmp	.-10     	; 0xb5e <uart_puts+0xe>
        uart_putc(*s++);
}/* uart_puts */
     b68:	df 91       	pop	r29
     b6a:	cf 91       	pop	r28
     b6c:	08 95       	ret

00000b6e <__subsf3>:
     b6e:	50 58       	subi	r21, 0x80	; 128

00000b70 <__addsf3>:
     b70:	bb 27       	eor	r27, r27
     b72:	aa 27       	eor	r26, r26
     b74:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__addsf3x>
     b78:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     b7c:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     b80:	38 f0       	brcs	.+14     	; 0xb90 <__addsf3+0x20>
     b82:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     b86:	20 f0       	brcs	.+8      	; 0xb90 <__addsf3+0x20>
     b88:	39 f4       	brne	.+14     	; 0xb98 <__addsf3+0x28>
     b8a:	9f 3f       	cpi	r25, 0xFF	; 255
     b8c:	19 f4       	brne	.+6      	; 0xb94 <__addsf3+0x24>
     b8e:	26 f4       	brtc	.+8      	; 0xb98 <__addsf3+0x28>
     b90:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>
     b94:	0e f4       	brtc	.+2      	; 0xb98 <__addsf3+0x28>
     b96:	e0 95       	com	r30
     b98:	e7 fb       	bst	r30, 7
     b9a:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>

00000b9e <__addsf3x>:
     b9e:	e9 2f       	mov	r30, r25
     ba0:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     ba4:	58 f3       	brcs	.-42     	; 0xb7c <__addsf3+0xc>
     ba6:	ba 17       	cp	r27, r26
     ba8:	62 07       	cpc	r22, r18
     baa:	73 07       	cpc	r23, r19
     bac:	84 07       	cpc	r24, r20
     bae:	95 07       	cpc	r25, r21
     bb0:	20 f0       	brcs	.+8      	; 0xbba <__addsf3x+0x1c>
     bb2:	79 f4       	brne	.+30     	; 0xbd2 <__addsf3x+0x34>
     bb4:	a6 f5       	brtc	.+104    	; 0xc1e <__addsf3x+0x80>
     bb6:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_zero>
     bba:	0e f4       	brtc	.+2      	; 0xbbe <__addsf3x+0x20>
     bbc:	e0 95       	com	r30
     bbe:	0b 2e       	mov	r0, r27
     bc0:	ba 2f       	mov	r27, r26
     bc2:	a0 2d       	mov	r26, r0
     bc4:	0b 01       	movw	r0, r22
     bc6:	b9 01       	movw	r22, r18
     bc8:	90 01       	movw	r18, r0
     bca:	0c 01       	movw	r0, r24
     bcc:	ca 01       	movw	r24, r20
     bce:	a0 01       	movw	r20, r0
     bd0:	11 24       	eor	r1, r1
     bd2:	ff 27       	eor	r31, r31
     bd4:	59 1b       	sub	r21, r25
     bd6:	99 f0       	breq	.+38     	; 0xbfe <__addsf3x+0x60>
     bd8:	59 3f       	cpi	r21, 0xF9	; 249
     bda:	50 f4       	brcc	.+20     	; 0xbf0 <__addsf3x+0x52>
     bdc:	50 3e       	cpi	r21, 0xE0	; 224
     bde:	68 f1       	brcs	.+90     	; 0xc3a <__addsf3x+0x9c>
     be0:	1a 16       	cp	r1, r26
     be2:	f0 40       	sbci	r31, 0x00	; 0
     be4:	a2 2f       	mov	r26, r18
     be6:	23 2f       	mov	r18, r19
     be8:	34 2f       	mov	r19, r20
     bea:	44 27       	eor	r20, r20
     bec:	58 5f       	subi	r21, 0xF8	; 248
     bee:	f3 cf       	rjmp	.-26     	; 0xbd6 <__addsf3x+0x38>
     bf0:	46 95       	lsr	r20
     bf2:	37 95       	ror	r19
     bf4:	27 95       	ror	r18
     bf6:	a7 95       	ror	r26
     bf8:	f0 40       	sbci	r31, 0x00	; 0
     bfa:	53 95       	inc	r21
     bfc:	c9 f7       	brne	.-14     	; 0xbf0 <__addsf3x+0x52>
     bfe:	7e f4       	brtc	.+30     	; 0xc1e <__addsf3x+0x80>
     c00:	1f 16       	cp	r1, r31
     c02:	ba 0b       	sbc	r27, r26
     c04:	62 0b       	sbc	r22, r18
     c06:	73 0b       	sbc	r23, r19
     c08:	84 0b       	sbc	r24, r20
     c0a:	ba f0       	brmi	.+46     	; 0xc3a <__addsf3x+0x9c>
     c0c:	91 50       	subi	r25, 0x01	; 1
     c0e:	a1 f0       	breq	.+40     	; 0xc38 <__addsf3x+0x9a>
     c10:	ff 0f       	add	r31, r31
     c12:	bb 1f       	adc	r27, r27
     c14:	66 1f       	adc	r22, r22
     c16:	77 1f       	adc	r23, r23
     c18:	88 1f       	adc	r24, r24
     c1a:	c2 f7       	brpl	.-16     	; 0xc0c <__addsf3x+0x6e>
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <__addsf3x+0x9c>
     c1e:	ba 0f       	add	r27, r26
     c20:	62 1f       	adc	r22, r18
     c22:	73 1f       	adc	r23, r19
     c24:	84 1f       	adc	r24, r20
     c26:	48 f4       	brcc	.+18     	; 0xc3a <__addsf3x+0x9c>
     c28:	87 95       	ror	r24
     c2a:	77 95       	ror	r23
     c2c:	67 95       	ror	r22
     c2e:	b7 95       	ror	r27
     c30:	f7 95       	ror	r31
     c32:	9e 3f       	cpi	r25, 0xFE	; 254
     c34:	08 f0       	brcs	.+2      	; 0xc38 <__addsf3x+0x9a>
     c36:	b0 cf       	rjmp	.-160    	; 0xb98 <__addsf3+0x28>
     c38:	93 95       	inc	r25
     c3a:	88 0f       	add	r24, r24
     c3c:	08 f0       	brcs	.+2      	; 0xc40 <__addsf3x+0xa2>
     c3e:	99 27       	eor	r25, r25
     c40:	ee 0f       	add	r30, r30
     c42:	97 95       	ror	r25
     c44:	87 95       	ror	r24
     c46:	08 95       	ret

00000c48 <__divsf3>:
     c48:	0e 94 38 06 	call	0xc70	; 0xc70 <__divsf3x>
     c4c:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     c50:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     c54:	58 f0       	brcs	.+22     	; 0xc6c <__divsf3+0x24>
     c56:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     c5a:	40 f0       	brcs	.+16     	; 0xc6c <__divsf3+0x24>
     c5c:	29 f4       	brne	.+10     	; 0xc68 <__divsf3+0x20>
     c5e:	5f 3f       	cpi	r21, 0xFF	; 255
     c60:	29 f0       	breq	.+10     	; 0xc6c <__divsf3+0x24>
     c62:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
     c66:	51 11       	cpse	r21, r1
     c68:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>
     c6c:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>

00000c70 <__divsf3x>:
     c70:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     c74:	68 f3       	brcs	.-38     	; 0xc50 <__divsf3+0x8>

00000c76 <__divsf3_pse>:
     c76:	99 23       	and	r25, r25
     c78:	b1 f3       	breq	.-20     	; 0xc66 <__divsf3+0x1e>
     c7a:	55 23       	and	r21, r21
     c7c:	91 f3       	breq	.-28     	; 0xc62 <__divsf3+0x1a>
     c7e:	95 1b       	sub	r25, r21
     c80:	55 0b       	sbc	r21, r21
     c82:	bb 27       	eor	r27, r27
     c84:	aa 27       	eor	r26, r26
     c86:	62 17       	cp	r22, r18
     c88:	73 07       	cpc	r23, r19
     c8a:	84 07       	cpc	r24, r20
     c8c:	38 f0       	brcs	.+14     	; 0xc9c <__divsf3_pse+0x26>
     c8e:	9f 5f       	subi	r25, 0xFF	; 255
     c90:	5f 4f       	sbci	r21, 0xFF	; 255
     c92:	22 0f       	add	r18, r18
     c94:	33 1f       	adc	r19, r19
     c96:	44 1f       	adc	r20, r20
     c98:	aa 1f       	adc	r26, r26
     c9a:	a9 f3       	breq	.-22     	; 0xc86 <__divsf3_pse+0x10>
     c9c:	35 d0       	rcall	.+106    	; 0xd08 <__divsf3_pse+0x92>
     c9e:	0e 2e       	mov	r0, r30
     ca0:	3a f0       	brmi	.+14     	; 0xcb0 <__divsf3_pse+0x3a>
     ca2:	e0 e8       	ldi	r30, 0x80	; 128
     ca4:	32 d0       	rcall	.+100    	; 0xd0a <__divsf3_pse+0x94>
     ca6:	91 50       	subi	r25, 0x01	; 1
     ca8:	50 40       	sbci	r21, 0x00	; 0
     caa:	e6 95       	lsr	r30
     cac:	00 1c       	adc	r0, r0
     cae:	ca f7       	brpl	.-14     	; 0xca2 <__divsf3_pse+0x2c>
     cb0:	2b d0       	rcall	.+86     	; 0xd08 <__divsf3_pse+0x92>
     cb2:	fe 2f       	mov	r31, r30
     cb4:	29 d0       	rcall	.+82     	; 0xd08 <__divsf3_pse+0x92>
     cb6:	66 0f       	add	r22, r22
     cb8:	77 1f       	adc	r23, r23
     cba:	88 1f       	adc	r24, r24
     cbc:	bb 1f       	adc	r27, r27
     cbe:	26 17       	cp	r18, r22
     cc0:	37 07       	cpc	r19, r23
     cc2:	48 07       	cpc	r20, r24
     cc4:	ab 07       	cpc	r26, r27
     cc6:	b0 e8       	ldi	r27, 0x80	; 128
     cc8:	09 f0       	breq	.+2      	; 0xccc <__divsf3_pse+0x56>
     cca:	bb 0b       	sbc	r27, r27
     ccc:	80 2d       	mov	r24, r0
     cce:	bf 01       	movw	r22, r30
     cd0:	ff 27       	eor	r31, r31
     cd2:	93 58       	subi	r25, 0x83	; 131
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	3a f0       	brmi	.+14     	; 0xce6 <__divsf3_pse+0x70>
     cd8:	9e 3f       	cpi	r25, 0xFE	; 254
     cda:	51 05       	cpc	r21, r1
     cdc:	78 f0       	brcs	.+30     	; 0xcfc <__divsf3_pse+0x86>
     cde:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
     ce2:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>
     ce6:	5f 3f       	cpi	r21, 0xFF	; 255
     ce8:	e4 f3       	brlt	.-8      	; 0xce2 <__divsf3_pse+0x6c>
     cea:	98 3e       	cpi	r25, 0xE8	; 232
     cec:	d4 f3       	brlt	.-12     	; 0xce2 <__divsf3_pse+0x6c>
     cee:	86 95       	lsr	r24
     cf0:	77 95       	ror	r23
     cf2:	67 95       	ror	r22
     cf4:	b7 95       	ror	r27
     cf6:	f7 95       	ror	r31
     cf8:	9f 5f       	subi	r25, 0xFF	; 255
     cfa:	c9 f7       	brne	.-14     	; 0xcee <__divsf3_pse+0x78>
     cfc:	88 0f       	add	r24, r24
     cfe:	91 1d       	adc	r25, r1
     d00:	96 95       	lsr	r25
     d02:	87 95       	ror	r24
     d04:	97 f9       	bld	r25, 7
     d06:	08 95       	ret
     d08:	e1 e0       	ldi	r30, 0x01	; 1
     d0a:	66 0f       	add	r22, r22
     d0c:	77 1f       	adc	r23, r23
     d0e:	88 1f       	adc	r24, r24
     d10:	bb 1f       	adc	r27, r27
     d12:	62 17       	cp	r22, r18
     d14:	73 07       	cpc	r23, r19
     d16:	84 07       	cpc	r24, r20
     d18:	ba 07       	cpc	r27, r26
     d1a:	20 f0       	brcs	.+8      	; 0xd24 <__divsf3_pse+0xae>
     d1c:	62 1b       	sub	r22, r18
     d1e:	73 0b       	sbc	r23, r19
     d20:	84 0b       	sbc	r24, r20
     d22:	ba 0b       	sbc	r27, r26
     d24:	ee 1f       	adc	r30, r30
     d26:	88 f7       	brcc	.-30     	; 0xd0a <__divsf3_pse+0x94>
     d28:	e0 95       	com	r30
     d2a:	08 95       	ret

00000d2c <__fixsfsi>:
     d2c:	0e 94 9d 06 	call	0xd3a	; 0xd3a <__fixunssfsi>
     d30:	68 94       	set
     d32:	b1 11       	cpse	r27, r1
     d34:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>
     d38:	08 95       	ret

00000d3a <__fixunssfsi>:
     d3a:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_splitA>
     d3e:	88 f0       	brcs	.+34     	; 0xd62 <__fixunssfsi+0x28>
     d40:	9f 57       	subi	r25, 0x7F	; 127
     d42:	98 f0       	brcs	.+38     	; 0xd6a <__fixunssfsi+0x30>
     d44:	b9 2f       	mov	r27, r25
     d46:	99 27       	eor	r25, r25
     d48:	b7 51       	subi	r27, 0x17	; 23
     d4a:	b0 f0       	brcs	.+44     	; 0xd78 <__fixunssfsi+0x3e>
     d4c:	e1 f0       	breq	.+56     	; 0xd86 <__fixunssfsi+0x4c>
     d4e:	66 0f       	add	r22, r22
     d50:	77 1f       	adc	r23, r23
     d52:	88 1f       	adc	r24, r24
     d54:	99 1f       	adc	r25, r25
     d56:	1a f0       	brmi	.+6      	; 0xd5e <__fixunssfsi+0x24>
     d58:	ba 95       	dec	r27
     d5a:	c9 f7       	brne	.-14     	; 0xd4e <__fixunssfsi+0x14>
     d5c:	14 c0       	rjmp	.+40     	; 0xd86 <__fixunssfsi+0x4c>
     d5e:	b1 30       	cpi	r27, 0x01	; 1
     d60:	91 f0       	breq	.+36     	; 0xd86 <__fixunssfsi+0x4c>
     d62:	0e 94 b5 07 	call	0xf6a	; 0xf6a <__fp_zero>
     d66:	b1 e0       	ldi	r27, 0x01	; 1
     d68:	08 95       	ret
     d6a:	0c 94 b5 07 	jmp	0xf6a	; 0xf6a <__fp_zero>
     d6e:	67 2f       	mov	r22, r23
     d70:	78 2f       	mov	r23, r24
     d72:	88 27       	eor	r24, r24
     d74:	b8 5f       	subi	r27, 0xF8	; 248
     d76:	39 f0       	breq	.+14     	; 0xd86 <__fixunssfsi+0x4c>
     d78:	b9 3f       	cpi	r27, 0xF9	; 249
     d7a:	cc f3       	brlt	.-14     	; 0xd6e <__fixunssfsi+0x34>
     d7c:	86 95       	lsr	r24
     d7e:	77 95       	ror	r23
     d80:	67 95       	ror	r22
     d82:	b3 95       	inc	r27
     d84:	d9 f7       	brne	.-10     	; 0xd7c <__fixunssfsi+0x42>
     d86:	3e f4       	brtc	.+14     	; 0xd96 <__fixunssfsi+0x5c>
     d88:	90 95       	com	r25
     d8a:	80 95       	com	r24
     d8c:	70 95       	com	r23
     d8e:	61 95       	neg	r22
     d90:	7f 4f       	sbci	r23, 0xFF	; 255
     d92:	8f 4f       	sbci	r24, 0xFF	; 255
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	08 95       	ret

00000d98 <__floatunsisf>:
     d98:	e8 94       	clt
     d9a:	09 c0       	rjmp	.+18     	; 0xdae <__floatsisf+0x12>

00000d9c <__floatsisf>:
     d9c:	97 fb       	bst	r25, 7
     d9e:	3e f4       	brtc	.+14     	; 0xdae <__floatsisf+0x12>
     da0:	90 95       	com	r25
     da2:	80 95       	com	r24
     da4:	70 95       	com	r23
     da6:	61 95       	neg	r22
     da8:	7f 4f       	sbci	r23, 0xFF	; 255
     daa:	8f 4f       	sbci	r24, 0xFF	; 255
     dac:	9f 4f       	sbci	r25, 0xFF	; 255
     dae:	99 23       	and	r25, r25
     db0:	a9 f0       	breq	.+42     	; 0xddc <__floatsisf+0x40>
     db2:	f9 2f       	mov	r31, r25
     db4:	96 e9       	ldi	r25, 0x96	; 150
     db6:	bb 27       	eor	r27, r27
     db8:	93 95       	inc	r25
     dba:	f6 95       	lsr	r31
     dbc:	87 95       	ror	r24
     dbe:	77 95       	ror	r23
     dc0:	67 95       	ror	r22
     dc2:	b7 95       	ror	r27
     dc4:	f1 11       	cpse	r31, r1
     dc6:	f8 cf       	rjmp	.-16     	; 0xdb8 <__floatsisf+0x1c>
     dc8:	fa f4       	brpl	.+62     	; 0xe08 <__floatsisf+0x6c>
     dca:	bb 0f       	add	r27, r27
     dcc:	11 f4       	brne	.+4      	; 0xdd2 <__floatsisf+0x36>
     dce:	60 ff       	sbrs	r22, 0
     dd0:	1b c0       	rjmp	.+54     	; 0xe08 <__floatsisf+0x6c>
     dd2:	6f 5f       	subi	r22, 0xFF	; 255
     dd4:	7f 4f       	sbci	r23, 0xFF	; 255
     dd6:	8f 4f       	sbci	r24, 0xFF	; 255
     dd8:	9f 4f       	sbci	r25, 0xFF	; 255
     dda:	16 c0       	rjmp	.+44     	; 0xe08 <__floatsisf+0x6c>
     ddc:	88 23       	and	r24, r24
     dde:	11 f0       	breq	.+4      	; 0xde4 <__floatsisf+0x48>
     de0:	96 e9       	ldi	r25, 0x96	; 150
     de2:	11 c0       	rjmp	.+34     	; 0xe06 <__floatsisf+0x6a>
     de4:	77 23       	and	r23, r23
     de6:	21 f0       	breq	.+8      	; 0xdf0 <__floatsisf+0x54>
     de8:	9e e8       	ldi	r25, 0x8E	; 142
     dea:	87 2f       	mov	r24, r23
     dec:	76 2f       	mov	r23, r22
     dee:	05 c0       	rjmp	.+10     	; 0xdfa <__floatsisf+0x5e>
     df0:	66 23       	and	r22, r22
     df2:	71 f0       	breq	.+28     	; 0xe10 <__floatsisf+0x74>
     df4:	96 e8       	ldi	r25, 0x86	; 134
     df6:	86 2f       	mov	r24, r22
     df8:	70 e0       	ldi	r23, 0x00	; 0
     dfa:	60 e0       	ldi	r22, 0x00	; 0
     dfc:	2a f0       	brmi	.+10     	; 0xe08 <__floatsisf+0x6c>
     dfe:	9a 95       	dec	r25
     e00:	66 0f       	add	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	88 1f       	adc	r24, r24
     e06:	da f7       	brpl	.-10     	; 0xdfe <__floatsisf+0x62>
     e08:	88 0f       	add	r24, r24
     e0a:	96 95       	lsr	r25
     e0c:	87 95       	ror	r24
     e0e:	97 f9       	bld	r25, 7
     e10:	08 95       	ret
     e12:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     e16:	20 f0       	brcs	.+8      	; 0xe20 <__floatsisf+0x84>
     e18:	19 f0       	breq	.+6      	; 0xe20 <__floatsisf+0x84>
     e1a:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     e1e:	50 f4       	brcc	.+20     	; 0xe34 <fmod+0xc>
     e20:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>
     e24:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>

00000e28 <fmod>:
     e28:	e9 2f       	mov	r30, r25
     e2a:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     e2e:	88 f3       	brcs	.-30     	; 0xe12 <__floatsisf+0x76>
     e30:	55 23       	and	r21, r21
     e32:	b1 f3       	breq	.-20     	; 0xe20 <__floatsisf+0x84>
     e34:	e7 fb       	bst	r30, 7
     e36:	62 17       	cp	r22, r18
     e38:	73 07       	cpc	r23, r19
     e3a:	84 07       	cpc	r24, r20
     e3c:	95 07       	cpc	r25, r21
     e3e:	a8 f1       	brcs	.+106    	; 0xeaa <fmod+0x82>
     e40:	89 f3       	breq	.-30     	; 0xe24 <__floatsisf+0x88>
     e42:	e9 2f       	mov	r30, r25
     e44:	ff 27       	eor	r31, r31
     e46:	88 23       	and	r24, r24
     e48:	2a f0       	brmi	.+10     	; 0xe54 <fmod+0x2c>
     e4a:	31 97       	sbiw	r30, 0x01	; 1
     e4c:	66 0f       	add	r22, r22
     e4e:	77 1f       	adc	r23, r23
     e50:	88 1f       	adc	r24, r24
     e52:	da f7       	brpl	.-10     	; 0xe4a <fmod+0x22>
     e54:	95 2f       	mov	r25, r21
     e56:	55 27       	eor	r21, r21
     e58:	44 23       	and	r20, r20
     e5a:	32 f0       	brmi	.+12     	; 0xe68 <fmod+0x40>
     e5c:	91 50       	subi	r25, 0x01	; 1
     e5e:	50 40       	sbci	r21, 0x00	; 0
     e60:	22 0f       	add	r18, r18
     e62:	33 1f       	adc	r19, r19
     e64:	44 1f       	adc	r20, r20
     e66:	d2 f7       	brpl	.-12     	; 0xe5c <fmod+0x34>
     e68:	bb 27       	eor	r27, r27
     e6a:	e9 1b       	sub	r30, r25
     e6c:	f5 0b       	sbc	r31, r21
     e6e:	62 1b       	sub	r22, r18
     e70:	73 0b       	sbc	r23, r19
     e72:	84 0b       	sbc	r24, r20
     e74:	b1 09       	sbc	r27, r1
     e76:	b1 f2       	breq	.-84     	; 0xe24 <__floatsisf+0x88>
     e78:	22 f4       	brpl	.+8      	; 0xe82 <fmod+0x5a>
     e7a:	62 0f       	add	r22, r18
     e7c:	73 1f       	adc	r23, r19
     e7e:	84 1f       	adc	r24, r20
     e80:	b1 1d       	adc	r27, r1
     e82:	31 97       	sbiw	r30, 0x01	; 1
     e84:	2a f0       	brmi	.+10     	; 0xe90 <fmod+0x68>
     e86:	66 0f       	add	r22, r22
     e88:	77 1f       	adc	r23, r23
     e8a:	88 1f       	adc	r24, r24
     e8c:	bb 1f       	adc	r27, r27
     e8e:	ef cf       	rjmp	.-34     	; 0xe6e <fmod+0x46>
     e90:	91 50       	subi	r25, 0x01	; 1
     e92:	50 40       	sbci	r21, 0x00	; 0
     e94:	62 f0       	brmi	.+24     	; 0xeae <fmod+0x86>
     e96:	41 f0       	breq	.+16     	; 0xea8 <fmod+0x80>
     e98:	88 23       	and	r24, r24
     e9a:	32 f0       	brmi	.+12     	; 0xea8 <fmod+0x80>
     e9c:	66 0f       	add	r22, r22
     e9e:	77 1f       	adc	r23, r23
     ea0:	88 1f       	adc	r24, r24
     ea2:	91 50       	subi	r25, 0x01	; 1
     ea4:	50 40       	sbci	r21, 0x00	; 0
     ea6:	c1 f7       	brne	.-16     	; 0xe98 <fmod+0x70>
     ea8:	93 95       	inc	r25
     eaa:	0c 94 63 07 	jmp	0xec6	; 0xec6 <__fp_mpack>
     eae:	86 95       	lsr	r24
     eb0:	77 95       	ror	r23
     eb2:	67 95       	ror	r22
     eb4:	9f 5f       	subi	r25, 0xFF	; 255
     eb6:	d9 f7       	brne	.-10     	; 0xeae <fmod+0x86>
     eb8:	f7 cf       	rjmp	.-18     	; 0xea8 <fmod+0x80>

00000eba <__fp_inf>:
     eba:	97 f9       	bld	r25, 7
     ebc:	9f 67       	ori	r25, 0x7F	; 127
     ebe:	80 e8       	ldi	r24, 0x80	; 128
     ec0:	70 e0       	ldi	r23, 0x00	; 0
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	08 95       	ret

00000ec6 <__fp_mpack>:
     ec6:	9f 3f       	cpi	r25, 0xFF	; 255
     ec8:	31 f0       	breq	.+12     	; 0xed6 <__fp_mpack_finite+0xc>

00000eca <__fp_mpack_finite>:
     eca:	91 50       	subi	r25, 0x01	; 1
     ecc:	20 f4       	brcc	.+8      	; 0xed6 <__fp_mpack_finite+0xc>
     ece:	87 95       	ror	r24
     ed0:	77 95       	ror	r23
     ed2:	67 95       	ror	r22
     ed4:	b7 95       	ror	r27
     ed6:	88 0f       	add	r24, r24
     ed8:	91 1d       	adc	r25, r1
     eda:	96 95       	lsr	r25
     edc:	87 95       	ror	r24
     ede:	97 f9       	bld	r25, 7
     ee0:	08 95       	ret

00000ee2 <__fp_nan>:
     ee2:	9f ef       	ldi	r25, 0xFF	; 255
     ee4:	80 ec       	ldi	r24, 0xC0	; 192
     ee6:	08 95       	ret

00000ee8 <__fp_pscA>:
     ee8:	00 24       	eor	r0, r0
     eea:	0a 94       	dec	r0
     eec:	16 16       	cp	r1, r22
     eee:	17 06       	cpc	r1, r23
     ef0:	18 06       	cpc	r1, r24
     ef2:	09 06       	cpc	r0, r25
     ef4:	08 95       	ret

00000ef6 <__fp_pscB>:
     ef6:	00 24       	eor	r0, r0
     ef8:	0a 94       	dec	r0
     efa:	12 16       	cp	r1, r18
     efc:	13 06       	cpc	r1, r19
     efe:	14 06       	cpc	r1, r20
     f00:	05 06       	cpc	r0, r21
     f02:	08 95       	ret

00000f04 <__fp_round>:
     f04:	09 2e       	mov	r0, r25
     f06:	03 94       	inc	r0
     f08:	00 0c       	add	r0, r0
     f0a:	11 f4       	brne	.+4      	; 0xf10 <__fp_round+0xc>
     f0c:	88 23       	and	r24, r24
     f0e:	52 f0       	brmi	.+20     	; 0xf24 <__fp_round+0x20>
     f10:	bb 0f       	add	r27, r27
     f12:	40 f4       	brcc	.+16     	; 0xf24 <__fp_round+0x20>
     f14:	bf 2b       	or	r27, r31
     f16:	11 f4       	brne	.+4      	; 0xf1c <__fp_round+0x18>
     f18:	60 ff       	sbrs	r22, 0
     f1a:	04 c0       	rjmp	.+8      	; 0xf24 <__fp_round+0x20>
     f1c:	6f 5f       	subi	r22, 0xFF	; 255
     f1e:	7f 4f       	sbci	r23, 0xFF	; 255
     f20:	8f 4f       	sbci	r24, 0xFF	; 255
     f22:	9f 4f       	sbci	r25, 0xFF	; 255
     f24:	08 95       	ret

00000f26 <__fp_split3>:
     f26:	57 fd       	sbrc	r21, 7
     f28:	90 58       	subi	r25, 0x80	; 128
     f2a:	44 0f       	add	r20, r20
     f2c:	55 1f       	adc	r21, r21
     f2e:	59 f0       	breq	.+22     	; 0xf46 <__fp_splitA+0x10>
     f30:	5f 3f       	cpi	r21, 0xFF	; 255
     f32:	71 f0       	breq	.+28     	; 0xf50 <__fp_splitA+0x1a>
     f34:	47 95       	ror	r20

00000f36 <__fp_splitA>:
     f36:	88 0f       	add	r24, r24
     f38:	97 fb       	bst	r25, 7
     f3a:	99 1f       	adc	r25, r25
     f3c:	61 f0       	breq	.+24     	; 0xf56 <__fp_splitA+0x20>
     f3e:	9f 3f       	cpi	r25, 0xFF	; 255
     f40:	79 f0       	breq	.+30     	; 0xf60 <__fp_splitA+0x2a>
     f42:	87 95       	ror	r24
     f44:	08 95       	ret
     f46:	12 16       	cp	r1, r18
     f48:	13 06       	cpc	r1, r19
     f4a:	14 06       	cpc	r1, r20
     f4c:	55 1f       	adc	r21, r21
     f4e:	f2 cf       	rjmp	.-28     	; 0xf34 <__fp_split3+0xe>
     f50:	46 95       	lsr	r20
     f52:	f1 df       	rcall	.-30     	; 0xf36 <__fp_splitA>
     f54:	08 c0       	rjmp	.+16     	; 0xf66 <__fp_splitA+0x30>
     f56:	16 16       	cp	r1, r22
     f58:	17 06       	cpc	r1, r23
     f5a:	18 06       	cpc	r1, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <__fp_splitA+0xc>
     f60:	86 95       	lsr	r24
     f62:	71 05       	cpc	r23, r1
     f64:	61 05       	cpc	r22, r1
     f66:	08 94       	sec
     f68:	08 95       	ret

00000f6a <__fp_zero>:
     f6a:	e8 94       	clt

00000f6c <__fp_szero>:
     f6c:	bb 27       	eor	r27, r27
     f6e:	66 27       	eor	r22, r22
     f70:	77 27       	eor	r23, r23
     f72:	cb 01       	movw	r24, r22
     f74:	97 f9       	bld	r25, 7
     f76:	08 95       	ret

00000f78 <__mulsf3>:
     f78:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3x>
     f7c:	0c 94 82 07 	jmp	0xf04	; 0xf04 <__fp_round>
     f80:	0e 94 74 07 	call	0xee8	; 0xee8 <__fp_pscA>
     f84:	38 f0       	brcs	.+14     	; 0xf94 <__mulsf3+0x1c>
     f86:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscB>
     f8a:	20 f0       	brcs	.+8      	; 0xf94 <__mulsf3+0x1c>
     f8c:	95 23       	and	r25, r21
     f8e:	11 f0       	breq	.+4      	; 0xf94 <__mulsf3+0x1c>
     f90:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
     f94:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>
     f98:	11 24       	eor	r1, r1
     f9a:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>

00000f9e <__mulsf3x>:
     f9e:	0e 94 93 07 	call	0xf26	; 0xf26 <__fp_split3>
     fa2:	70 f3       	brcs	.-36     	; 0xf80 <__mulsf3+0x8>

00000fa4 <__mulsf3_pse>:
     fa4:	95 9f       	mul	r25, r21
     fa6:	c1 f3       	breq	.-16     	; 0xf98 <__mulsf3+0x20>
     fa8:	95 0f       	add	r25, r21
     faa:	50 e0       	ldi	r21, 0x00	; 0
     fac:	55 1f       	adc	r21, r21
     fae:	62 9f       	mul	r22, r18
     fb0:	f0 01       	movw	r30, r0
     fb2:	72 9f       	mul	r23, r18
     fb4:	bb 27       	eor	r27, r27
     fb6:	f0 0d       	add	r31, r0
     fb8:	b1 1d       	adc	r27, r1
     fba:	63 9f       	mul	r22, r19
     fbc:	aa 27       	eor	r26, r26
     fbe:	f0 0d       	add	r31, r0
     fc0:	b1 1d       	adc	r27, r1
     fc2:	aa 1f       	adc	r26, r26
     fc4:	64 9f       	mul	r22, r20
     fc6:	66 27       	eor	r22, r22
     fc8:	b0 0d       	add	r27, r0
     fca:	a1 1d       	adc	r26, r1
     fcc:	66 1f       	adc	r22, r22
     fce:	82 9f       	mul	r24, r18
     fd0:	22 27       	eor	r18, r18
     fd2:	b0 0d       	add	r27, r0
     fd4:	a1 1d       	adc	r26, r1
     fd6:	62 1f       	adc	r22, r18
     fd8:	73 9f       	mul	r23, r19
     fda:	b0 0d       	add	r27, r0
     fdc:	a1 1d       	adc	r26, r1
     fde:	62 1f       	adc	r22, r18
     fe0:	83 9f       	mul	r24, r19
     fe2:	a0 0d       	add	r26, r0
     fe4:	61 1d       	adc	r22, r1
     fe6:	22 1f       	adc	r18, r18
     fe8:	74 9f       	mul	r23, r20
     fea:	33 27       	eor	r19, r19
     fec:	a0 0d       	add	r26, r0
     fee:	61 1d       	adc	r22, r1
     ff0:	23 1f       	adc	r18, r19
     ff2:	84 9f       	mul	r24, r20
     ff4:	60 0d       	add	r22, r0
     ff6:	21 1d       	adc	r18, r1
     ff8:	82 2f       	mov	r24, r18
     ffa:	76 2f       	mov	r23, r22
     ffc:	6a 2f       	mov	r22, r26
     ffe:	11 24       	eor	r1, r1
    1000:	9f 57       	subi	r25, 0x7F	; 127
    1002:	50 40       	sbci	r21, 0x00	; 0
    1004:	9a f0       	brmi	.+38     	; 0x102c <__mulsf3_pse+0x88>
    1006:	f1 f0       	breq	.+60     	; 0x1044 <__mulsf3_pse+0xa0>
    1008:	88 23       	and	r24, r24
    100a:	4a f0       	brmi	.+18     	; 0x101e <__mulsf3_pse+0x7a>
    100c:	ee 0f       	add	r30, r30
    100e:	ff 1f       	adc	r31, r31
    1010:	bb 1f       	adc	r27, r27
    1012:	66 1f       	adc	r22, r22
    1014:	77 1f       	adc	r23, r23
    1016:	88 1f       	adc	r24, r24
    1018:	91 50       	subi	r25, 0x01	; 1
    101a:	50 40       	sbci	r21, 0x00	; 0
    101c:	a9 f7       	brne	.-22     	; 0x1008 <__mulsf3_pse+0x64>
    101e:	9e 3f       	cpi	r25, 0xFE	; 254
    1020:	51 05       	cpc	r21, r1
    1022:	80 f0       	brcs	.+32     	; 0x1044 <__mulsf3_pse+0xa0>
    1024:	0c 94 5d 07 	jmp	0xeba	; 0xeba <__fp_inf>
    1028:	0c 94 b6 07 	jmp	0xf6c	; 0xf6c <__fp_szero>
    102c:	5f 3f       	cpi	r21, 0xFF	; 255
    102e:	e4 f3       	brlt	.-8      	; 0x1028 <__mulsf3_pse+0x84>
    1030:	98 3e       	cpi	r25, 0xE8	; 232
    1032:	d4 f3       	brlt	.-12     	; 0x1028 <__mulsf3_pse+0x84>
    1034:	86 95       	lsr	r24
    1036:	77 95       	ror	r23
    1038:	67 95       	ror	r22
    103a:	b7 95       	ror	r27
    103c:	f7 95       	ror	r31
    103e:	e7 95       	ror	r30
    1040:	9f 5f       	subi	r25, 0xFF	; 255
    1042:	c1 f7       	brne	.-16     	; 0x1034 <__mulsf3_pse+0x90>
    1044:	fe 2b       	or	r31, r30
    1046:	88 0f       	add	r24, r24
    1048:	91 1d       	adc	r25, r1
    104a:	96 95       	lsr	r25
    104c:	87 95       	ror	r24
    104e:	97 f9       	bld	r25, 7
    1050:	08 95       	ret

00001052 <sin>:
    1052:	9f 93       	push	r25
    1054:	0e 94 33 08 	call	0x1066	; 0x1066 <__fp_rempio2>
    1058:	0f 90       	pop	r0
    105a:	07 fc       	sbrc	r0, 7
    105c:	ee 5f       	subi	r30, 0xFE	; 254
    105e:	0c 94 5c 08 	jmp	0x10b8	; 0x10b8 <__fp_sinus>
    1062:	0c 94 71 07 	jmp	0xee2	; 0xee2 <__fp_nan>

00001066 <__fp_rempio2>:
    1066:	0e 94 9b 07 	call	0xf36	; 0xf36 <__fp_splitA>
    106a:	d8 f3       	brcs	.-10     	; 0x1062 <sin+0x10>
    106c:	e8 94       	clt
    106e:	e0 e0       	ldi	r30, 0x00	; 0
    1070:	bb 27       	eor	r27, r27
    1072:	9f 57       	subi	r25, 0x7F	; 127
    1074:	f0 f0       	brcs	.+60     	; 0x10b2 <__fp_rempio2+0x4c>
    1076:	2a ed       	ldi	r18, 0xDA	; 218
    1078:	3f e0       	ldi	r19, 0x0F	; 15
    107a:	49 ec       	ldi	r20, 0xC9	; 201
    107c:	06 c0       	rjmp	.+12     	; 0x108a <__fp_rempio2+0x24>
    107e:	ee 0f       	add	r30, r30
    1080:	bb 0f       	add	r27, r27
    1082:	66 1f       	adc	r22, r22
    1084:	77 1f       	adc	r23, r23
    1086:	88 1f       	adc	r24, r24
    1088:	28 f0       	brcs	.+10     	; 0x1094 <__fp_rempio2+0x2e>
    108a:	b2 3a       	cpi	r27, 0xA2	; 162
    108c:	62 07       	cpc	r22, r18
    108e:	73 07       	cpc	r23, r19
    1090:	84 07       	cpc	r24, r20
    1092:	28 f0       	brcs	.+10     	; 0x109e <__fp_rempio2+0x38>
    1094:	b2 5a       	subi	r27, 0xA2	; 162
    1096:	62 0b       	sbc	r22, r18
    1098:	73 0b       	sbc	r23, r19
    109a:	84 0b       	sbc	r24, r20
    109c:	e3 95       	inc	r30
    109e:	9a 95       	dec	r25
    10a0:	72 f7       	brpl	.-36     	; 0x107e <__fp_rempio2+0x18>
    10a2:	80 38       	cpi	r24, 0x80	; 128
    10a4:	30 f4       	brcc	.+12     	; 0x10b2 <__fp_rempio2+0x4c>
    10a6:	9a 95       	dec	r25
    10a8:	bb 0f       	add	r27, r27
    10aa:	66 1f       	adc	r22, r22
    10ac:	77 1f       	adc	r23, r23
    10ae:	88 1f       	adc	r24, r24
    10b0:	d2 f7       	brpl	.-12     	; 0x10a6 <__fp_rempio2+0x40>
    10b2:	90 48       	sbci	r25, 0x80	; 128
    10b4:	0c 94 65 07 	jmp	0xeca	; 0xeca <__fp_mpack_finite>

000010b8 <__fp_sinus>:
    10b8:	ef 93       	push	r30
    10ba:	e0 ff       	sbrs	r30, 0
    10bc:	07 c0       	rjmp	.+14     	; 0x10cc <__fp_sinus+0x14>
    10be:	a2 ea       	ldi	r26, 0xA2	; 162
    10c0:	2a ed       	ldi	r18, 0xDA	; 218
    10c2:	3f e0       	ldi	r19, 0x0F	; 15
    10c4:	49 ec       	ldi	r20, 0xC9	; 201
    10c6:	5f eb       	ldi	r21, 0xBF	; 191
    10c8:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__addsf3x>
    10cc:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_round>
    10d0:	0f 90       	pop	r0
    10d2:	03 94       	inc	r0
    10d4:	01 fc       	sbrc	r0, 1
    10d6:	90 58       	subi	r25, 0x80	; 128
    10d8:	e8 e6       	ldi	r30, 0x68	; 104
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	0c 94 70 08 	jmp	0x10e0	; 0x10e0 <__fp_powsodd>

000010e0 <__fp_powsodd>:
    10e0:	9f 93       	push	r25
    10e2:	8f 93       	push	r24
    10e4:	7f 93       	push	r23
    10e6:	6f 93       	push	r22
    10e8:	ff 93       	push	r31
    10ea:	ef 93       	push	r30
    10ec:	9b 01       	movw	r18, r22
    10ee:	ac 01       	movw	r20, r24
    10f0:	0e 94 bc 07 	call	0xf78	; 0xf78 <__mulsf3>
    10f4:	ef 91       	pop	r30
    10f6:	ff 91       	pop	r31
    10f8:	0e 94 84 08 	call	0x1108	; 0x1108 <__fp_powser>
    10fc:	2f 91       	pop	r18
    10fe:	3f 91       	pop	r19
    1100:	4f 91       	pop	r20
    1102:	5f 91       	pop	r21
    1104:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__mulsf3>

00001108 <__fp_powser>:
    1108:	df 93       	push	r29
    110a:	cf 93       	push	r28
    110c:	1f 93       	push	r17
    110e:	0f 93       	push	r16
    1110:	ff 92       	push	r15
    1112:	ef 92       	push	r14
    1114:	df 92       	push	r13
    1116:	7b 01       	movw	r14, r22
    1118:	8c 01       	movw	r16, r24
    111a:	68 94       	set
    111c:	06 c0       	rjmp	.+12     	; 0x112a <__fp_powser+0x22>
    111e:	da 2e       	mov	r13, r26
    1120:	ef 01       	movw	r28, r30
    1122:	0e 94 cf 07 	call	0xf9e	; 0xf9e <__mulsf3x>
    1126:	fe 01       	movw	r30, r28
    1128:	e8 94       	clt
    112a:	a5 91       	lpm	r26, Z+
    112c:	25 91       	lpm	r18, Z+
    112e:	35 91       	lpm	r19, Z+
    1130:	45 91       	lpm	r20, Z+
    1132:	55 91       	lpm	r21, Z+
    1134:	a6 f3       	brts	.-24     	; 0x111e <__fp_powser+0x16>
    1136:	ef 01       	movw	r28, r30
    1138:	0e 94 cf 05 	call	0xb9e	; 0xb9e <__addsf3x>
    113c:	fe 01       	movw	r30, r28
    113e:	97 01       	movw	r18, r14
    1140:	a8 01       	movw	r20, r16
    1142:	da 94       	dec	r13
    1144:	69 f7       	brne	.-38     	; 0x1120 <__fp_powser+0x18>
    1146:	df 90       	pop	r13
    1148:	ef 90       	pop	r14
    114a:	ff 90       	pop	r15
    114c:	0f 91       	pop	r16
    114e:	1f 91       	pop	r17
    1150:	cf 91       	pop	r28
    1152:	df 91       	pop	r29
    1154:	08 95       	ret

00001156 <__itoa_ncheck>:
    1156:	bb 27       	eor	r27, r27
    1158:	4a 30       	cpi	r20, 0x0A	; 10
    115a:	31 f4       	brne	.+12     	; 0x1168 <__itoa_ncheck+0x12>
    115c:	99 23       	and	r25, r25
    115e:	22 f4       	brpl	.+8      	; 0x1168 <__itoa_ncheck+0x12>
    1160:	bd e2       	ldi	r27, 0x2D	; 45
    1162:	90 95       	com	r25
    1164:	81 95       	neg	r24
    1166:	9f 4f       	sbci	r25, 0xFF	; 255
    1168:	0c 94 b7 08 	jmp	0x116e	; 0x116e <__utoa_common>

0000116c <__utoa_ncheck>:
    116c:	bb 27       	eor	r27, r27

0000116e <__utoa_common>:
    116e:	fb 01       	movw	r30, r22
    1170:	55 27       	eor	r21, r21
    1172:	aa 27       	eor	r26, r26
    1174:	88 0f       	add	r24, r24
    1176:	99 1f       	adc	r25, r25
    1178:	aa 1f       	adc	r26, r26
    117a:	a4 17       	cp	r26, r20
    117c:	10 f0       	brcs	.+4      	; 0x1182 <__utoa_common+0x14>
    117e:	a4 1b       	sub	r26, r20
    1180:	83 95       	inc	r24
    1182:	50 51       	subi	r21, 0x10	; 16
    1184:	b9 f7       	brne	.-18     	; 0x1174 <__utoa_common+0x6>
    1186:	a0 5d       	subi	r26, 0xD0	; 208
    1188:	aa 33       	cpi	r26, 0x3A	; 58
    118a:	08 f0       	brcs	.+2      	; 0x118e <__utoa_common+0x20>
    118c:	a9 5d       	subi	r26, 0xD9	; 217
    118e:	a1 93       	st	Z+, r26
    1190:	00 97       	sbiw	r24, 0x00	; 0
    1192:	79 f7       	brne	.-34     	; 0x1172 <__utoa_common+0x4>
    1194:	b1 11       	cpse	r27, r1
    1196:	b1 93       	st	Z+, r27
    1198:	11 92       	st	Z+, r1
    119a:	cb 01       	movw	r24, r22
    119c:	0c 94 d0 08 	jmp	0x11a0	; 0x11a0 <strrev>

000011a0 <strrev>:
    11a0:	dc 01       	movw	r26, r24
    11a2:	fc 01       	movw	r30, r24
    11a4:	67 2f       	mov	r22, r23
    11a6:	71 91       	ld	r23, Z+
    11a8:	77 23       	and	r23, r23
    11aa:	e1 f7       	brne	.-8      	; 0x11a4 <strrev+0x4>
    11ac:	32 97       	sbiw	r30, 0x02	; 2
    11ae:	04 c0       	rjmp	.+8      	; 0x11b8 <strrev+0x18>
    11b0:	7c 91       	ld	r23, X
    11b2:	6d 93       	st	X+, r22
    11b4:	70 83       	st	Z, r23
    11b6:	62 91       	ld	r22, -Z
    11b8:	ae 17       	cp	r26, r30
    11ba:	bf 07       	cpc	r27, r31
    11bc:	c8 f3       	brcs	.-14     	; 0x11b0 <strrev+0x10>
    11be:	08 95       	ret

000011c0 <_exit>:
    11c0:	f8 94       	cli

000011c2 <__stop_program>:
    11c2:	ff cf       	rjmp	.-2      	; 0x11c2 <__stop_program>
